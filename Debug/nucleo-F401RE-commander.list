
nucleo-F401RE-commander.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c98  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08003e38  08003e38  00013e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042a0  080042a0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080042a0  080042a0  000142a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042a8  080042a8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042a8  080042a8  000142a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042ac  080042ac  000142ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080042b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  20000070  08004320  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08004320  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3d5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ea8  00000000  00000000  0002d475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e8  00000000  00000000  0002f320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000730  00000000  00000000  0002fb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e74  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a690  00000000  00000000  000470ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086b9b  00000000  00000000  0005173c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d82d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028b4  00000000  00000000  000d832c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003e20 	.word	0x08003e20

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003e20 	.word	0x08003e20

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 8000586:	2300      	movs	r3, #0
 8000588:	60bb      	str	r3, [r7, #8]

	if ( buffer[i] == name [i] )
 800058a:	683a      	ldr	r2, [r7, #0]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4413      	add	r3, r2
 8000590:	781a      	ldrb	r2, [r3, #0]
 8000592:	6879      	ldr	r1, [r7, #4]
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	440b      	add	r3, r1
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	429a      	cmp	r2, r3
 800059c:	d114      	bne.n	80005c8 <ConsoleCommandMatch+0x50>
	{
		result = 1u;
 800059e:	2301      	movs	r3, #1
 80005a0:	60bb      	str	r3, [r7, #8]
		i++;
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	3301      	adds	r3, #1
 80005a6:	60fb      	str	r3, [r7, #12]
	}

	while ( ( 1u == result ) &&
 80005a8:	e00e      	b.n	80005c8 <ConsoleCommandMatch+0x50>
		( buffer[i] != PARAMETER_SEPARATER ) &&
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
		( buffer[i] != (char) NULL_CHAR )
		)
	{
		if ( buffer[i] != name[i] )
 80005aa:	683a      	ldr	r2, [r7, #0]
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	4413      	add	r3, r2
 80005b0:	781a      	ldrb	r2, [r3, #0]
 80005b2:	6879      	ldr	r1, [r7, #4]
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	440b      	add	r3, r1
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d001      	beq.n	80005c2 <ConsoleCommandMatch+0x4a>
		{
			result = 0u;
 80005be:	2300      	movs	r3, #0
 80005c0:	60bb      	str	r3, [r7, #8]
		}
		i++;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	3301      	adds	r3, #1
 80005c6:	60fb      	str	r3, [r7, #12]
	while ( ( 1u == result ) &&
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d11a      	bne.n	8000604 <ConsoleCommandMatch+0x8c>
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	2b09      	cmp	r3, #9
 80005d2:	d817      	bhi.n	8000604 <ConsoleCommandMatch+0x8c>
		( buffer[i] != PARAMETER_SEPARATER ) &&
 80005d4:	683a      	ldr	r2, [r7, #0]
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	4413      	add	r3, r2
 80005da:	781b      	ldrb	r3, [r3, #0]
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
 80005dc:	2b20      	cmp	r3, #32
 80005de:	d011      	beq.n	8000604 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80005e0:	683a      	ldr	r2, [r7, #0]
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	4413      	add	r3, r2
 80005e6:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != PARAMETER_SEPARATER ) &&
 80005e8:	2b0a      	cmp	r3, #10
 80005ea:	d00b      	beq.n	8000604 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80005ec:	683a      	ldr	r2, [r7, #0]
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	4413      	add	r3, r2
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b0d      	cmp	r3, #13
 80005f6:	d005      	beq.n	8000604 <ConsoleCommandMatch+0x8c>
		( buffer[i] != (char) NULL_CHAR )
 80005f8:	683a      	ldr	r2, [r7, #0]
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	4413      	add	r3, r2
 80005fe:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000600:	2b00      	cmp	r3, #0
 8000602:	d1d2      	bne.n	80005aa <ConsoleCommandMatch+0x32>
	}

	return result;
 8000604:	68bb      	ldr	r3, [r7, #8]
}
 8000606:	4618      	mov	r0, r3
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr

08000612 <ConsoleResetBuffer>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[], const uint32_t filledLength, uint32_t usedSoFar)
{
 8000612:	b480      	push	{r7}
 8000614:	b087      	sub	sp, #28
 8000616:	af00      	add	r7, sp, #0
 8000618:	60f8      	str	r0, [r7, #12]
 800061a:	60b9      	str	r1, [r7, #8]
 800061c:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength)
 8000622:	e00d      	b.n	8000640 <ConsoleResetBuffer+0x2e>
	{
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 8000624:	68fa      	ldr	r2, [r7, #12]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	441a      	add	r2, r3
 800062a:	68f9      	ldr	r1, [r7, #12]
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	440b      	add	r3, r1
 8000630:	7812      	ldrb	r2, [r2, #0]
 8000632:	701a      	strb	r2, [r3, #0]
		i++;
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	3301      	adds	r3, #1
 8000638:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	3301      	adds	r3, #1
 800063e:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength)
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	429a      	cmp	r2, r3
 8000646:	d3ed      	bcc.n	8000624 <ConsoleResetBuffer+0x12>
	}
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000648:	e007      	b.n	800065a <ConsoleResetBuffer+0x48>
	{
		receiveBuffer[i] =  NULL_CHAR;
 800064a:	68fa      	ldr	r2, [r7, #12]
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	4413      	add	r3, r2
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	3301      	adds	r3, #1
 8000658:	617b      	str	r3, [r7, #20]
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	2bff      	cmp	r3, #255	; 0xff
 800065e:	d9f4      	bls.n	800064a <ConsoleResetBuffer+0x38>
	}
	return (filledLength - usedSoFar);
 8000660:	68ba      	ldr	r2, [r7, #8]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	1ad3      	subs	r3, r2, r3
}
 8000666:	4618      	mov	r0, r3
 8000668:	371c      	adds	r7, #28
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr

08000672 <ConsoleCommandEndline>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[], const  uint32_t filledLength)
{
 8000672:	b480      	push	{r7}
 8000674:	b085      	sub	sp, #20
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
 800067a:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 800067c:	2300      	movs	r3, #0
 800067e:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 8000680:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000684:	60bb      	str	r3, [r7, #8]

	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 8000686:	e002      	b.n	800068e <ConsoleCommandEndline+0x1c>
			&& ( i < filledLength ) )
	{
		i++;
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	3301      	adds	r3, #1
 800068c:	60fb      	str	r3, [r7, #12]
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	4413      	add	r3, r2
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b0d      	cmp	r3, #13
 8000698:	d009      	beq.n	80006ae <ConsoleCommandEndline+0x3c>
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	4413      	add	r3, r2
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b0a      	cmp	r3, #10
 80006a4:	d003      	beq.n	80006ae <ConsoleCommandEndline+0x3c>
			&& ( i < filledLength ) )
 80006a6:	68fa      	ldr	r2, [r7, #12]
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	429a      	cmp	r2, r3
 80006ac:	d3ec      	bcc.n	8000688 <ConsoleCommandEndline+0x16>
	}
	if ( i < filledLength )
 80006ae:	68fa      	ldr	r2, [r7, #12]
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	429a      	cmp	r2, r3
 80006b4:	d201      	bcs.n	80006ba <ConsoleCommandEndline+0x48>
	{
		result = i;
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	60bb      	str	r3, [r7, #8]
	}
	return result;
 80006ba:	68bb      	ldr	r3, [r7, #8]
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3714      	adds	r7, #20
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
	uint32_t i;

	ConsoleIoInit();
 80006ce:	f000 fb5f 	bl	8000d90 <ConsoleIoInit>
	ConsoleIoSendString("Welcome to the Consolinator, your gateway to testing code and hardware.");
 80006d2:	4811      	ldr	r0, [pc, #68]	; (8000718 <ConsoleInit+0x50>)
 80006d4:	f000 fb8a 	bl	8000dec <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80006d8:	4810      	ldr	r0, [pc, #64]	; (800071c <ConsoleInit+0x54>)
 80006da:	f000 fb87 	bl	8000dec <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80006de:	480f      	ldr	r0, [pc, #60]	; (800071c <ConsoleInit+0x54>)
 80006e0:	f000 fb84 	bl	8000dec <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 80006e4:	480e      	ldr	r0, [pc, #56]	; (8000720 <ConsoleInit+0x58>)
 80006e6:	f000 fb81 	bl	8000dec <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <ConsoleInit+0x5c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	e007      	b.n	8000706 <ConsoleInit+0x3e>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 80006f6:	4a0c      	ldr	r2, [pc, #48]	; (8000728 <ConsoleInit+0x60>)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4413      	add	r3, r2
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3301      	adds	r3, #1
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2bff      	cmp	r3, #255	; 0xff
 800070a:	d9f4      	bls.n	80006f6 <ConsoleInit+0x2e>
	}

}
 800070c:	bf00      	nop
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	08003e38 	.word	0x08003e38
 800071c:	08003e80 	.word	0x08003e80
 8000720:	08003e84 	.word	0x08003e84
 8000724:	20000098 	.word	0x20000098
 8000728:	2000009c 	.word	0x2000009c

0800072c <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  cmdEndline;
	int32_t  found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*)&(mReceiveBuffer[mReceivedSoFar]), ( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar ), &received);
 8000732:	4b4c      	ldr	r3, [pc, #304]	; (8000864 <ConsoleProcess+0x138>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a4c      	ldr	r2, [pc, #304]	; (8000868 <ConsoleProcess+0x13c>)
 8000738:	1898      	adds	r0, r3, r2
 800073a:	4b4a      	ldr	r3, [pc, #296]	; (8000864 <ConsoleProcess+0x138>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000742:	463a      	mov	r2, r7
 8000744:	4619      	mov	r1, r3
 8000746:	f000 fb2b 	bl	8000da0 <ConsoleIoReceive>
	if ( received > 0u )
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	f000 8084 	beq.w	800085a <ConsoleProcess+0x12e>
	{
		mReceivedSoFar += received;
 8000752:	4b44      	ldr	r3, [pc, #272]	; (8000864 <ConsoleProcess+0x138>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	4413      	add	r3, r2
 800075a:	4a42      	ldr	r2, [pc, #264]	; (8000864 <ConsoleProcess+0x138>)
 800075c:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 800075e:	4b41      	ldr	r3, [pc, #260]	; (8000864 <ConsoleProcess+0x138>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4619      	mov	r1, r3
 8000764:	4840      	ldr	r0, [pc, #256]	; (8000868 <ConsoleProcess+0x13c>)
 8000766:	f7ff ff84 	bl	8000672 <ConsoleCommandEndline>
 800076a:	60f8      	str	r0, [r7, #12]
		if ( cmdEndline >= 0 )  // have complete string, find command
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	2b00      	cmp	r3, #0
 8000770:	db73      	blt.n	800085a <ConsoleProcess+0x12e>
		{
			commandTable = ConsoleCommandsGetTable();
 8000772:	f000 fac9 	bl	8000d08 <ConsoleCommandsGetTable>
 8000776:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 800077c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000780:	613b      	str	r3, [r7, #16]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 8000782:	e03d      	b.n	8000800 <ConsoleProcess+0xd4>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, mReceiveBuffer) )
 8000784:	697a      	ldr	r2, [r7, #20]
 8000786:	4613      	mov	r3, r2
 8000788:	00db      	lsls	r3, r3, #3
 800078a:	4413      	add	r3, r2
 800078c:	00db      	lsls	r3, r3, #3
 800078e:	461a      	mov	r2, r3
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	4413      	add	r3, r2
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4934      	ldr	r1, [pc, #208]	; (8000868 <ConsoleProcess+0x13c>)
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff feed 	bl	8000578 <ConsoleCommandMatch>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d02a      	beq.n	80007fa <ConsoleProcess+0xce>
				{
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 80007a4:	697a      	ldr	r2, [r7, #20]
 80007a6:	4613      	mov	r3, r2
 80007a8:	00db      	lsls	r3, r3, #3
 80007aa:	4413      	add	r3, r2
 80007ac:	00db      	lsls	r3, r3, #3
 80007ae:	461a      	mov	r2, r3
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	4413      	add	r3, r2
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	482c      	ldr	r0, [pc, #176]	; (8000868 <ConsoleProcess+0x13c>)
 80007b8:	4798      	blx	r3
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d017      	beq.n	80007f4 <ConsoleProcess+0xc8>
					{
						ConsoleIoSendString("Error: ");
 80007c4:	4829      	ldr	r0, [pc, #164]	; (800086c <ConsoleProcess+0x140>)
 80007c6:	f000 fb11 	bl	8000dec <ConsoleIoSendString>
						ConsoleIoSendString(mReceiveBuffer);
 80007ca:	4827      	ldr	r0, [pc, #156]	; (8000868 <ConsoleProcess+0x13c>)
 80007cc:	f000 fb0e 	bl	8000dec <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 80007d0:	4827      	ldr	r0, [pc, #156]	; (8000870 <ConsoleProcess+0x144>)
 80007d2:	f000 fb0b 	bl	8000dec <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 80007d6:	697a      	ldr	r2, [r7, #20]
 80007d8:	4613      	mov	r3, r2
 80007da:	00db      	lsls	r3, r3, #3
 80007dc:	4413      	add	r3, r2
 80007de:	00db      	lsls	r3, r3, #3
 80007e0:	461a      	mov	r2, r3
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	4413      	add	r3, r2
 80007e6:	3308      	adds	r3, #8
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 faff 	bl	8000dec <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 80007ee:	4821      	ldr	r0, [pc, #132]	; (8000874 <ConsoleProcess+0x148>)
 80007f0:	f000 fafc 	bl	8000dec <ConsoleIoSendString>

					}
					found = cmdIndex;
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	e002      	b.n	8000800 <ConsoleProcess+0xd4>
				}
				else
				{
					cmdIndex++;
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	3301      	adds	r3, #1
 80007fe:	617b      	str	r3, [r7, #20]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 8000800:	697a      	ldr	r2, [r7, #20]
 8000802:	4613      	mov	r3, r2
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	4413      	add	r3, r2
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	461a      	mov	r2, r3
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	4413      	add	r3, r2
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d003      	beq.n	800081e <ConsoleProcess+0xf2>
 8000816:	693b      	ldr	r3, [r7, #16]
 8000818:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800081c:	d0b2      	beq.n	8000784 <ConsoleProcess+0x58>

				}
			}
			if ( ( cmdEndline != 0 ) && ( NOT_FOUND == found ) )
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d00d      	beq.n	8000840 <ConsoleProcess+0x114>
 8000824:	693b      	ldr	r3, [r7, #16]
 8000826:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800082a:	d109      	bne.n	8000840 <ConsoleProcess+0x114>
			{
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 800082c:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <ConsoleProcess+0x138>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b02      	cmp	r3, #2
 8000832:	d905      	bls.n	8000840 <ConsoleProcess+0x114>
				{
					ConsoleIoSendString("Command not found.");
 8000834:	4810      	ldr	r0, [pc, #64]	; (8000878 <ConsoleProcess+0x14c>)
 8000836:	f000 fad9 	bl	8000dec <ConsoleIoSendString>
					ConsoleIoSendString(STR_ENDLINE);
 800083a:	480e      	ldr	r0, [pc, #56]	; (8000874 <ConsoleProcess+0x148>)
 800083c:	f000 fad6 	bl	8000dec <ConsoleIoSendString>
				}
			}
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar, cmdEndline);
 8000840:	4b08      	ldr	r3, [pc, #32]	; (8000864 <ConsoleProcess+0x138>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	68fa      	ldr	r2, [r7, #12]
 8000846:	4619      	mov	r1, r3
 8000848:	4807      	ldr	r0, [pc, #28]	; (8000868 <ConsoleProcess+0x13c>)
 800084a:	f7ff fee2 	bl	8000612 <ConsoleResetBuffer>
 800084e:	4603      	mov	r3, r0
 8000850:	4a04      	ldr	r2, [pc, #16]	; (8000864 <ConsoleProcess+0x138>)
 8000852:	6013      	str	r3, [r2, #0]
			ConsoleIoSendString(CONSOLE_PROMPT);
 8000854:	4809      	ldr	r0, [pc, #36]	; (800087c <ConsoleProcess+0x150>)
 8000856:	f000 fac9 	bl	8000dec <ConsoleIoSendString>
		}
	}
}
 800085a:	bf00      	nop
 800085c:	3718      	adds	r7, #24
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000098 	.word	0x20000098
 8000868:	2000009c 	.word	0x2000009c
 800086c:	08003e88 	.word	0x08003e88
 8000870:	08003e90 	.word	0x08003e90
 8000874:	08003e80 	.word	0x08003e80
 8000878:	08003e98 	.word	0x08003e98
 800087c:	08003e84 	.word	0x08003e84

08000880 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 8000880:	b480      	push	{r7}
 8000882:	b089      	sub	sp, #36	; 0x24
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	460b      	mov	r3, r1
 800088a:	607a      	str	r2, [r7, #4]
 800088c:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000896:	2300      	movs	r3, #0
 8000898:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 800089a:	e00b      	b.n	80008b4 <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 800089c:	68fa      	ldr	r2, [r7, #12]
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	4413      	add	r3, r2
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b20      	cmp	r3, #32
 80008a6:	d102      	bne.n	80008ae <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	3301      	adds	r3, #1
 80008ac:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	3301      	adds	r3, #1
 80008b2:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80008b4:	7afb      	ldrb	r3, [r7, #11]
 80008b6:	69ba      	ldr	r2, [r7, #24]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d002      	beq.n	80008c2 <ConsoleParamFindN+0x42>
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	2bff      	cmp	r3, #255	; 0xff
 80008c0:	d9ec      	bls.n	800089c <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008c8:	d102      	bne.n	80008d0 <ConsoleParamFindN+0x50>
	{
		result = COMMAND_PARAMETER_ERROR;
 80008ca:	2310      	movs	r3, #16
 80008cc:	75fb      	strb	r3, [r7, #23]
 80008ce:	e002      	b.n	80008d6 <ConsoleParamFindN+0x56>
	}
	else
	{
		*startLocation = bufferIndex;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	69fa      	ldr	r2, [r7, #28]
 80008d4:	601a      	str	r2, [r3, #0]
	}
	return result;
 80008d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3724      	adds	r7, #36	; 0x24
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	; 0x28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	460b      	mov	r3, r1
 80008ee:	607a      	str	r2, [r7, #4]
 80008f0:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80008f6:	f107 021c 	add.w	r2, r7, #28
 80008fa:	7afb      	ldrb	r3, [r7, #11]
 80008fc:	4619      	mov	r1, r3
 80008fe:	68f8      	ldr	r0, [r7, #12]
 8000900:	f7ff ffbe 	bl	8000880 <ConsoleParamFindN>
 8000904:	4603      	mov	r3, r0
 8000906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 800090e:	69fa      	ldr	r2, [r7, #28]
 8000910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000912:	4413      	add	r3, r2
 8000914:	68fa      	ldr	r2, [r7, #12]
 8000916:	4413      	add	r3, r2
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 800091e:	e011      	b.n	8000944 <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 8000920:	f107 0214 	add.w	r2, r7, #20
 8000924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000926:	4413      	add	r3, r2
 8000928:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800092c:	701a      	strb	r2, [r3, #0]
		i++;
 800092e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000930:	3301      	adds	r3, #1
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8000934:	69fa      	ldr	r2, [r7, #28]
 8000936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000938:	4413      	add	r3, r2
 800093a:	68fa      	ldr	r2, [r7, #12]
 800093c:	4413      	add	r3, r2
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000944:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000948:	2b0a      	cmp	r3, #10
 800094a:	d00a      	beq.n	8000962 <ConsoleReceiveParamInt16+0x7e>
 800094c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000950:	2b0d      	cmp	r3, #13
 8000952:	d006      	beq.n	8000962 <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal )
 8000954:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000958:	2b20      	cmp	r3, #32
 800095a:	d002      	beq.n	8000962 <ConsoleReceiveParamInt16+0x7e>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 800095c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095e:	2b07      	cmp	r3, #7
 8000960:	d9de      	bls.n	8000920 <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 8000962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000964:	2b08      	cmp	r3, #8
 8000966:	d102      	bne.n	800096e <ConsoleReceiveParamInt16+0x8a>
	{
		result = COMMAND_PARAMETER_ERROR;
 8000968:	2310      	movs	r3, #16
 800096a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 800096e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000972:	2b00      	cmp	r3, #0
 8000974:	d10e      	bne.n	8000994 <ConsoleReceiveParamInt16+0xb0>
	{
		str[i] = NULL_CHAR;
 8000976:	f107 0214 	add.w	r2, r7, #20
 800097a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097c:	4413      	add	r3, r2
 800097e:	2200      	movs	r2, #0
 8000980:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	4618      	mov	r0, r3
 8000988:	f001 ffc6 	bl	8002918 <atoi>
 800098c:	4603      	mov	r3, r0
 800098e:	b21a      	sxth	r2, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000994:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8000998:	4618      	mov	r0, r3
 800099a:	3728      	adds	r7, #40	; 0x28
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char * buffer, const uint8_t parameterNumber, uint16_t* parameterUint16)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	460b      	mov	r3, r1
 80009aa:	607a      	str	r2, [r7, #4]
 80009ac:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80009b6:	f107 0218 	add.w	r2, r7, #24
 80009ba:	7afb      	ldrb	r3, [r7, #11]
 80009bc:	4619      	mov	r1, r3
 80009be:	68f8      	ldr	r0, [r7, #12]
 80009c0:	f7ff ff5e 	bl	8000880 <ConsoleParamFindN>
 80009c4:	4603      	mov	r3, r0
 80009c6:	77fb      	strb	r3, [r7, #31]
	if ( COMMAND_SUCCESS == result )
 80009c8:	7ffb      	ldrb	r3, [r7, #31]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d12c      	bne.n	8000a28 <ConsoleReceiveParamHexUint16+0x88>
	{
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 80009ce:	2300      	movs	r3, #0
 80009d0:	623b      	str	r3, [r7, #32]
 80009d2:	e01e      	b.n	8000a12 <ConsoleReceiveParamHexUint16+0x72>
		{
			if ( COMMAND_SUCCESS == result )
 80009d4:	7ffb      	ldrb	r3, [r7, #31]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d10d      	bne.n	80009f6 <ConsoleReceiveParamHexUint16+0x56>
			{
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i], &tmpUint8);
 80009da:	69ba      	ldr	r2, [r7, #24]
 80009dc:	6a3b      	ldr	r3, [r7, #32]
 80009de:	4413      	add	r3, r2
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	4413      	add	r3, r2
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	f107 0217 	add.w	r2, r7, #23
 80009ea:	4611      	mov	r1, r2
 80009ec:	4618      	mov	r0, r3
 80009ee:	f000 f870 	bl	8000ad2 <ConsoleUtilHexCharToInt>
 80009f2:	4603      	mov	r3, r0
 80009f4:	77fb      	strb	r3, [r7, #31]
			}
			if ( COMMAND_SUCCESS == result )
 80009f6:	7ffb      	ldrb	r3, [r7, #31]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d107      	bne.n	8000a0c <ConsoleReceiveParamHexUint16+0x6c>
			{
				value = (value << 4u);
 80009fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80009fe:	011b      	lsls	r3, r3, #4
 8000a00:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 8000a02:	7dfb      	ldrb	r3, [r7, #23]
 8000a04:	b29a      	uxth	r2, r3
 8000a06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a08:	4413      	add	r3, r2
 8000a0a:	84fb      	strh	r3, [r7, #38]	; 0x26
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a0c:	6a3b      	ldr	r3, [r7, #32]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	623b      	str	r3, [r7, #32]
 8000a12:	6a3b      	ldr	r3, [r7, #32]
 8000a14:	2b03      	cmp	r3, #3
 8000a16:	d9dd      	bls.n	80009d4 <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if  ( COMMAND_PARAMETER_END == result )
 8000a18:	7ffb      	ldrb	r3, [r7, #31]
 8000a1a:	2b11      	cmp	r3, #17
 8000a1c:	d101      	bne.n	8000a22 <ConsoleReceiveParamHexUint16+0x82>
		{
			result = COMMAND_SUCCESS;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000a26:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000a28:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3728      	adds	r7, #40	; 0x28
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <ConsoleSendParamHexUint16>:
// ConsoleSendParamHexUint16
// Send a parameter of type uint16 as hex.
// This does not use a library function to do it (though you could
// do itoa (parameterUint16, out, 16);  instead of building it up
eCommandResult_T ConsoleSendParamHexUint16(uint16_t parameterUint16)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b086      	sub	sp, #24
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	4603      	mov	r3, r0
 8000a3a:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	char out[4u + 1u];  // U16 must be less than 4 hex digits: 0xFFFF, end buffer with a NULL
	eCommandResult_T result = COMMAND_SUCCESS;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	74fb      	strb	r3, [r7, #19]
	uint8_t tmpUint8;

	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	e01b      	b.n	8000a7e <ConsoleSendParamHexUint16+0x4c>
	{
		if ( COMMAND_SUCCESS == result )
 8000a46:	7cfb      	ldrb	r3, [r7, #19]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d115      	bne.n	8000a78 <ConsoleSendParamHexUint16+0x46>
		{
			tmpUint8 = ( parameterUint16 >> (12u - (i*4u)) & 0xF);
 8000a4c:	88fa      	ldrh	r2, [r7, #6]
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	f1c3 0303 	rsb	r3, r3, #3
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	fa42 f303 	asr.w	r3, r2, r3
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	f003 030f 	and.w	r3, r3, #15
 8000a60:	74bb      	strb	r3, [r7, #18]
			result = ConsoleUtilsIntToHexChar(tmpUint8, &(out[i]));
 8000a62:	f107 020c 	add.w	r2, r7, #12
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	441a      	add	r2, r3
 8000a6a:	7cbb      	ldrb	r3, [r7, #18]
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 f870 	bl	8000b54 <ConsoleUtilsIntToHexChar>
 8000a74:	4603      	mov	r3, r0
 8000a76:	74fb      	strb	r3, [r7, #19]
	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	2b03      	cmp	r3, #3
 8000a82:	d9e0      	bls.n	8000a46 <ConsoleSendParamHexUint16+0x14>
		}
	}
	out[i] = NULL_CHAR;
 8000a84:	f107 020c 	add.w	r2, r7, #12
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	701a      	strb	r2, [r3, #0]
	ConsoleIoSendString(out);
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	4618      	mov	r0, r3
 8000a96:	f000 f9a9 	bl	8000dec <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000a9a:	2300      	movs	r3, #0
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3718      	adds	r7, #24
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <ConsoleSendParamInt16>:

// ConsoleSendParamInt16
// Send a parameter of type int16 using the (unsafe) C library function
// __itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt16(int16_t parameterInt)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	80fb      	strh	r3, [r7, #6]
	char out[INT16_MAX_STR_LENGTH];
//	memset(out, 0, INT16_MAX_STR_LENGTH);

	__itoa (parameterInt, out, 10);
 8000aae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ab2:	f107 0108 	add.w	r1, r7, #8
 8000ab6:	220a      	movs	r2, #10
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f001 ff6d 	bl	8002998 <__itoa>
	ConsoleIoSendString(out);
 8000abe:	f107 0308 	add.w	r3, r7, #8
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 f992 	bl	8000dec <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <ConsoleUtilHexCharToInt>:
	return COMMAND_SUCCESS;
}
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t* pInt)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b085      	sub	sp, #20
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	4603      	mov	r3, r0
 8000ada:	6039      	str	r1, [r7, #0]
 8000adc:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	73fb      	strb	r3, [r7, #15]

    if ( ( '0' <= charVal ) && ( charVal <= '9' ) )
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	2b2f      	cmp	r3, #47	; 0x2f
 8000ae6:	d908      	bls.n	8000afa <ConsoleUtilHexCharToInt+0x28>
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	2b39      	cmp	r3, #57	; 0x39
 8000aec:	d805      	bhi.n	8000afa <ConsoleUtilHexCharToInt+0x28>
    {
        *pInt = charVal - '0';
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	3b30      	subs	r3, #48	; 0x30
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	701a      	strb	r2, [r3, #0]
 8000af8:	e025      	b.n	8000b46 <ConsoleUtilHexCharToInt+0x74>
    }
    else if ( ( 'A' <= charVal ) && ( charVal <= 'F' ) )
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	2b40      	cmp	r3, #64	; 0x40
 8000afe:	d908      	bls.n	8000b12 <ConsoleUtilHexCharToInt+0x40>
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	2b46      	cmp	r3, #70	; 0x46
 8000b04:	d805      	bhi.n	8000b12 <ConsoleUtilHexCharToInt+0x40>
    {
        *pInt = 10u + charVal - 'A';
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	3b37      	subs	r3, #55	; 0x37
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	701a      	strb	r2, [r3, #0]
 8000b10:	e019      	b.n	8000b46 <ConsoleUtilHexCharToInt+0x74>
    }
    else if( ( 'a' <= charVal ) && ( charVal <= 'f' ) )
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	2b60      	cmp	r3, #96	; 0x60
 8000b16:	d908      	bls.n	8000b2a <ConsoleUtilHexCharToInt+0x58>
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	2b66      	cmp	r3, #102	; 0x66
 8000b1c:	d805      	bhi.n	8000b2a <ConsoleUtilHexCharToInt+0x58>
    {
        *pInt = 10u + charVal - 'a';
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	3b57      	subs	r3, #87	; 0x57
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	701a      	strb	r2, [r3, #0]
 8000b28:	e00d      	b.n	8000b46 <ConsoleUtilHexCharToInt+0x74>
    }
	else if ( ( LF_CHAR != charVal ) || ( CR_CHAR != charVal )
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	2b0a      	cmp	r3, #10
 8000b2e:	d105      	bne.n	8000b3c <ConsoleUtilHexCharToInt+0x6a>
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	2b0d      	cmp	r3, #13
 8000b34:	d102      	bne.n	8000b3c <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal ) )
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	2b20      	cmp	r3, #32
 8000b3a:	d102      	bne.n	8000b42 <ConsoleUtilHexCharToInt+0x70>
	{
		result = COMMAND_PARAMETER_END;
 8000b3c:	2311      	movs	r3, #17
 8000b3e:	73fb      	strb	r3, [r7, #15]
 8000b40:	e001      	b.n	8000b46 <ConsoleUtilHexCharToInt+0x74>

	}
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000b42:	2310      	movs	r3, #16
 8000b44:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <ConsoleUtilsIntToHexChar>:
// ConsoleUtilsIntToHexChar
// Converts an integer nibble (0-15) to a hex character (0-9,A-F)
static eCommandResult_T ConsoleUtilsIntToHexChar(uint8_t intVal, char* pChar)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	6039      	str	r1, [r7, #0]
 8000b5e:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000b60:	2300      	movs	r3, #0
 8000b62:	73fb      	strb	r3, [r7, #15]

    if ( intVal <= 9u )
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	2b09      	cmp	r3, #9
 8000b68:	d805      	bhi.n	8000b76 <ConsoleUtilsIntToHexChar+0x22>
    {
        *pChar = intVal + '0';
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	3330      	adds	r3, #48	; 0x30
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	701a      	strb	r2, [r3, #0]
 8000b74:	e00d      	b.n	8000b92 <ConsoleUtilsIntToHexChar+0x3e>
    }
    else if ( ( 10u <= intVal ) && ( intVal <= 15u ) )
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	2b09      	cmp	r3, #9
 8000b7a:	d908      	bls.n	8000b8e <ConsoleUtilsIntToHexChar+0x3a>
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	2b0f      	cmp	r3, #15
 8000b80:	d805      	bhi.n	8000b8e <ConsoleUtilsIntToHexChar+0x3a>
    {
        *pChar = intVal - 10u + 'A';
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	3337      	adds	r3, #55	; 0x37
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	701a      	strb	r2, [r3, #0]
 8000b8c:	e001      	b.n	8000b92 <ConsoleUtilsIntToHexChar+0x3e>
    }
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000b8e:	2310      	movs	r3, #16
 8000b90:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <ConsoleCommandComment>:

	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandComment(const char buffer[])
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
	...

08000bb8 <ConsoleCommandHelp>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8000bc4:	2306      	movs	r3, #6
 8000bc6:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	e01e      	b.n	8000c0c <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8000bce:	4914      	ldr	r1, [pc, #80]	; (8000c20 <ConsoleCommandHelp+0x68>)
 8000bd0:	697a      	ldr	r2, [r7, #20]
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	4413      	add	r3, r2
 8000bd8:	00db      	lsls	r3, r3, #3
 8000bda:	440b      	add	r3, r1
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 f904 	bl	8000dec <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8000be4:	480f      	ldr	r0, [pc, #60]	; (8000c24 <ConsoleCommandHelp+0x6c>)
 8000be6:	f000 f901 	bl	8000dec <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8000bea:	697a      	ldr	r2, [r7, #20]
 8000bec:	4613      	mov	r3, r2
 8000bee:	00db      	lsls	r3, r3, #3
 8000bf0:	4413      	add	r3, r2
 8000bf2:	00db      	lsls	r3, r3, #3
 8000bf4:	3308      	adds	r3, #8
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <ConsoleCommandHelp+0x68>)
 8000bf8:	4413      	add	r3, r2
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 f8f6 	bl	8000dec <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8000c00:	4809      	ldr	r0, [pc, #36]	; (8000c28 <ConsoleCommandHelp+0x70>)
 8000c02:	f000 f8f3 	bl	8000dec <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	617b      	str	r3, [r7, #20]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	697a      	ldr	r2, [r7, #20]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d3db      	bcc.n	8000bce <ConsoleCommandHelp+0x16>
	}
	return result;
 8000c16:	7cfb      	ldrb	r3, [r7, #19]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	08003f18 	.word	0x08003f18
 8000c24:	08003ec8 	.word	0x08003ec8
 8000c28:	08003ecc 	.word	0x08003ecc

08000c2c <ConsoleCommandParamExampleInt16>:

static eCommandResult_T ConsoleCommandParamExampleInt16(const char buffer[])
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	461a      	mov	r2, r3
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff fe51 	bl	80008e4 <ConsoleReceiveParamInt16>
 8000c42:	4603      	mov	r3, r0
 8000c44:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000c46:	7bfb      	ldrb	r3, [r7, #15]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d116      	bne.n	8000c7a <ConsoleCommandParamExampleInt16+0x4e>
	{
		ConsoleIoSendString("Parameter is ");
 8000c4c:	480d      	ldr	r0, [pc, #52]	; (8000c84 <ConsoleCommandParamExampleInt16+0x58>)
 8000c4e:	f000 f8cd 	bl	8000dec <ConsoleIoSendString>
		ConsoleSendParamInt16(parameterInt);
 8000c52:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff ff24 	bl	8000aa4 <ConsoleSendParamInt16>
		ConsoleIoSendString(" (0x");
 8000c5c:	480a      	ldr	r0, [pc, #40]	; (8000c88 <ConsoleCommandParamExampleInt16+0x5c>)
 8000c5e:	f000 f8c5 	bl	8000dec <ConsoleIoSendString>
		ConsoleSendParamHexUint16((uint16_t)parameterInt);
 8000c62:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fee2 	bl	8000a32 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(")");
 8000c6e:	4807      	ldr	r0, [pc, #28]	; (8000c8c <ConsoleCommandParamExampleInt16+0x60>)
 8000c70:	f000 f8bc 	bl	8000dec <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 8000c74:	4806      	ldr	r0, [pc, #24]	; (8000c90 <ConsoleCommandParamExampleInt16+0x64>)
 8000c76:	f000 f8b9 	bl	8000dec <ConsoleIoSendString>
	}
	return result;
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	08003ed0 	.word	0x08003ed0
 8000c88:	08003ee0 	.word	0x08003ee0
 8000c8c:	08003ee8 	.word	0x08003ee8
 8000c90:	08003ecc 	.word	0x08003ecc

08000c94 <ConsoleCommandParamExampleHexUint16>:
static eCommandResult_T ConsoleCommandParamExampleHexUint16(const char buffer[])
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
	uint16_t parameterUint16;
	eCommandResult_T result;
	result = ConsoleReceiveParamHexUint16(buffer, 1, &parameterUint16);
 8000c9c:	f107 030c 	add.w	r3, r7, #12
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff fe7b 	bl	80009a0 <ConsoleReceiveParamHexUint16>
 8000caa:	4603      	mov	r3, r0
 8000cac:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d109      	bne.n	8000cc8 <ConsoleCommandParamExampleHexUint16+0x34>
	{
		ConsoleIoSendString("Parameter is 0x");
 8000cb4:	4807      	ldr	r0, [pc, #28]	; (8000cd4 <ConsoleCommandParamExampleHexUint16+0x40>)
 8000cb6:	f000 f899 	bl	8000dec <ConsoleIoSendString>
		ConsoleSendParamHexUint16(parameterUint16);
 8000cba:	89bb      	ldrh	r3, [r7, #12]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff feb8 	bl	8000a32 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(STR_ENDLINE);
 8000cc2:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <ConsoleCommandParamExampleHexUint16+0x44>)
 8000cc4:	f000 f892 	bl	8000dec <ConsoleIoSendString>
	}
	return result;
 8000cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	08003eec 	.word	0x08003eec
 8000cd8:	08003ecc 	.word	0x08003ecc

08000cdc <ConsoleCommandVer>:

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8000ce8:	4805      	ldr	r0, [pc, #20]	; (8000d00 <ConsoleCommandVer+0x24>)
 8000cea:	f000 f87f 	bl	8000dec <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <ConsoleCommandVer+0x28>)
 8000cf0:	f000 f87c 	bl	8000dec <ConsoleIoSendString>
	return result;
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	08003efc 	.word	0x08003efc
 8000d04:	08003ecc 	.word	0x08003ecc

08000d08 <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8000d0c:	4b02      	ldr	r3, [pc, #8]	; (8000d18 <ConsoleCommandsGetTable+0x10>)
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	08003f18 	.word	0x08003f18

08000d1c <_read>:

#include "consoleIo.h"
#include <stdio.h>
#include "stm32f4xx_hal.h"

int _read(int file, char *result, size_t len) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status;
    int retcode = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]

    if (len != 0) {
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d012      	beq.n	8000d58 <_read+0x3c>
        status = HAL_UART_Receive( &huart2, (uint8_t *) result, len, HAL_MAX_DELAY);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d3a:	68b9      	ldr	r1, [r7, #8]
 8000d3c:	4809      	ldr	r0, [pc, #36]	; (8000d64 <_read+0x48>)
 8000d3e:	f001 fb12 	bl	8002366 <HAL_UART_Receive>
 8000d42:	4603      	mov	r3, r0
 8000d44:	74fb      	strb	r3, [r7, #19]

        if (status == HAL_OK) {
 8000d46:	7cfb      	ldrb	r3, [r7, #19]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d102      	bne.n	8000d52 <_read+0x36>
            retcode = len;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	e002      	b.n	8000d58 <_read+0x3c>
        } else {
            retcode = -1;
 8000d52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d56:	617b      	str	r3, [r7, #20]
        }
    }
    return( retcode);
 8000d58:	697b      	ldr	r3, [r7, #20]
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3718      	adds	r7, #24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	2000019c 	.word	0x2000019c

08000d68 <_write>:

int _write(int file, char *ptr, int len) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 100);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	2364      	movs	r3, #100	; 0x64
 8000d7a:	68b9      	ldr	r1, [r7, #8]
 8000d7c:	4803      	ldr	r0, [pc, #12]	; (8000d8c <_write+0x24>)
 8000d7e:	f001 fa60 	bl	8002242 <HAL_UART_Transmit>
	return len;
 8000d82:	687b      	ldr	r3, [r7, #4]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	2000019c 	.word	0x2000019c

08000d90 <ConsoleIoInit>:

eConsoleError ConsoleIoInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
	return CONSOLE_SUCCESS;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <ConsoleIoReceive>:

eConsoleError ConsoleIoReceive(uint8_t *buffer, const uint32_t bufferLength, uint32_t *readLength)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]

	uint8_t i = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	75fb      	strb	r3, [r7, #23]
	char ch;

	ch = getchar();
 8000db0:	f001 fdbc 	bl	800292c <getchar>
 8000db4:	4603      	mov	r3, r0
 8000db6:	75bb      	strb	r3, [r7, #22]
	while ( ( EOF != ch ) && ( i < bufferLength ) )
 8000db8:	e00b      	b.n	8000dd2 <ConsoleIoReceive+0x32>
	{
		buffer[i] = (uint8_t) ch;
 8000dba:	7dfb      	ldrb	r3, [r7, #23]
 8000dbc:	68fa      	ldr	r2, [r7, #12]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	7dba      	ldrb	r2, [r7, #22]
 8000dc2:	701a      	strb	r2, [r3, #0]
		i++;
 8000dc4:	7dfb      	ldrb	r3, [r7, #23]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	75fb      	strb	r3, [r7, #23]
		ch = getchar();
 8000dca:	f001 fdaf 	bl	800292c <getchar>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	75bb      	strb	r3, [r7, #22]
	while ( ( EOF != ch ) && ( i < bufferLength ) )
 8000dd2:	7dfb      	ldrb	r3, [r7, #23]
 8000dd4:	68ba      	ldr	r2, [r7, #8]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d8ef      	bhi.n	8000dba <ConsoleIoReceive+0x1a>
	}
	*readLength = i;
 8000dda:	7dfa      	ldrb	r2, [r7, #23]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	601a      	str	r2, [r3, #0]

	return CONSOLE_SUCCESS;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <ConsoleIoSendString>:
	*sentLength = bufferLength;
	return CONSOLE_SUCCESS;
}

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	printf("%s", buffer);
 8000df4:	6879      	ldr	r1, [r7, #4]
 8000df6:	4804      	ldr	r0, [pc, #16]	; (8000e08 <ConsoleIoSendString+0x1c>)
 8000df8:	f001 fdee 	bl	80029d8 <iprintf>
	return CONSOLE_SUCCESS;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	08003f14 	.word	0x08003f14

08000e0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e10:	f000 fa60 	bl	80012d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e14:	f000 f814 	bl	8000e40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e18:	f000 f8a8 	bl	8000f6c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e1c:	f000 f87c 	bl	8000f18 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	ConsoleInit();
 8000e20:	f7ff fc52 	bl	80006c8 <ConsoleInit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	setvbuf(stdin, NULL, _IONBF, 0);
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <main+0x30>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	6858      	ldr	r0, [r3, #4]
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	2100      	movs	r1, #0
 8000e30:	f001 fdea 	bl	8002a08 <setvbuf>
	while (1) {
		ConsoleProcess();
 8000e34:	f7ff fc7a 	bl	800072c <ConsoleProcess>
 8000e38:	e7fc      	b.n	8000e34 <main+0x28>
 8000e3a:	bf00      	nop
 8000e3c:	2000000c 	.word	0x2000000c

08000e40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b094      	sub	sp, #80	; 0x50
 8000e44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e46:	f107 0320 	add.w	r3, r7, #32
 8000e4a:	2230      	movs	r2, #48	; 0x30
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f001 fdba 	bl	80029c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e54:	f107 030c 	add.w	r3, r7, #12
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e64:	2300      	movs	r3, #0
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	4b29      	ldr	r3, [pc, #164]	; (8000f10 <SystemClock_Config+0xd0>)
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6c:	4a28      	ldr	r2, [pc, #160]	; (8000f10 <SystemClock_Config+0xd0>)
 8000e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e72:	6413      	str	r3, [r2, #64]	; 0x40
 8000e74:	4b26      	ldr	r3, [pc, #152]	; (8000f10 <SystemClock_Config+0xd0>)
 8000e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e80:	2300      	movs	r3, #0
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	4b23      	ldr	r3, [pc, #140]	; (8000f14 <SystemClock_Config+0xd4>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e8c:	4a21      	ldr	r2, [pc, #132]	; (8000f14 <SystemClock_Config+0xd4>)
 8000e8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e92:	6013      	str	r3, [r2, #0]
 8000e94:	4b1f      	ldr	r3, [pc, #124]	; (8000f14 <SystemClock_Config+0xd4>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ea8:	2310      	movs	r3, #16
 8000eaa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eac:	2302      	movs	r3, #2
 8000eae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000eb4:	2310      	movs	r3, #16
 8000eb6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000eb8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ebc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ec2:	2307      	movs	r3, #7
 8000ec4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec6:	f107 0320 	add.w	r3, r7, #32
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 fcf8 	bl	80018c0 <HAL_RCC_OscConfig>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ed6:	f000 f8b7 	bl	8001048 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eda:	230f      	movs	r3, #15
 8000edc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ee6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ef0:	f107 030c 	add.w	r3, r7, #12
 8000ef4:	2102      	movs	r1, #2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 ff5a 	bl	8001db0 <HAL_RCC_ClockConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000f02:	f000 f8a1 	bl	8001048 <Error_Handler>
  }
}
 8000f06:	bf00      	nop
 8000f08:	3750      	adds	r7, #80	; 0x50
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40007000 	.word	0x40007000

08000f18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f1c:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <MX_USART2_UART_Init+0x4c>)
 8000f1e:	4a12      	ldr	r2, [pc, #72]	; (8000f68 <MX_USART2_UART_Init+0x50>)
 8000f20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <MX_USART2_UART_Init+0x4c>)
 8000f24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <MX_USART2_UART_Init+0x4c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_USART2_UART_Init+0x4c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f36:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <MX_USART2_UART_Init+0x4c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f3c:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_USART2_UART_Init+0x4c>)
 8000f3e:	220c      	movs	r2, #12
 8000f40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f42:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <MX_USART2_UART_Init+0x4c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <MX_USART2_UART_Init+0x4c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f4e:	4805      	ldr	r0, [pc, #20]	; (8000f64 <MX_USART2_UART_Init+0x4c>)
 8000f50:	f001 f92a 	bl	80021a8 <HAL_UART_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f5a:	f000 f875 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	2000019c 	.word	0x2000019c
 8000f68:	40004400 	.word	0x40004400

08000f6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	4b2d      	ldr	r3, [pc, #180]	; (800103c <MX_GPIO_Init+0xd0>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a2c      	ldr	r2, [pc, #176]	; (800103c <MX_GPIO_Init+0xd0>)
 8000f8c:	f043 0304 	orr.w	r3, r3, #4
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b2a      	ldr	r3, [pc, #168]	; (800103c <MX_GPIO_Init+0xd0>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0304 	and.w	r3, r3, #4
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b26      	ldr	r3, [pc, #152]	; (800103c <MX_GPIO_Init+0xd0>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a25      	ldr	r2, [pc, #148]	; (800103c <MX_GPIO_Init+0xd0>)
 8000fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b23      	ldr	r3, [pc, #140]	; (800103c <MX_GPIO_Init+0xd0>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	4b1f      	ldr	r3, [pc, #124]	; (800103c <MX_GPIO_Init+0xd0>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a1e      	ldr	r2, [pc, #120]	; (800103c <MX_GPIO_Init+0xd0>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b1c      	ldr	r3, [pc, #112]	; (800103c <MX_GPIO_Init+0xd0>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	4b18      	ldr	r3, [pc, #96]	; (800103c <MX_GPIO_Init+0xd0>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a17      	ldr	r2, [pc, #92]	; (800103c <MX_GPIO_Init+0xd0>)
 8000fe0:	f043 0302 	orr.w	r3, r3, #2
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b15      	ldr	r3, [pc, #84]	; (800103c <MX_GPIO_Init+0xd0>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2120      	movs	r1, #32
 8000ff6:	4812      	ldr	r0, [pc, #72]	; (8001040 <MX_GPIO_Init+0xd4>)
 8000ff8:	f000 fc48 	bl	800188c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ffc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001002:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001006:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4619      	mov	r1, r3
 8001012:	480c      	ldr	r0, [pc, #48]	; (8001044 <MX_GPIO_Init+0xd8>)
 8001014:	f000 fab6 	bl	8001584 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001018:	2320      	movs	r3, #32
 800101a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101c:	2301      	movs	r3, #1
 800101e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	4619      	mov	r1, r3
 800102e:	4804      	ldr	r0, [pc, #16]	; (8001040 <MX_GPIO_Init+0xd4>)
 8001030:	f000 faa8 	bl	8001584 <HAL_GPIO_Init>

}
 8001034:	bf00      	nop
 8001036:	3728      	adds	r7, #40	; 0x28
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40023800 	.word	0x40023800
 8001040:	40020000 	.word	0x40020000
 8001044:	40020800 	.word	0x40020800

08001048 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800104c:	b672      	cpsid	i
}
 800104e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001050:	e7fe      	b.n	8001050 <Error_Handler+0x8>
	...

08001054 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <HAL_MspInit+0x4c>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	4a0f      	ldr	r2, [pc, #60]	; (80010a0 <HAL_MspInit+0x4c>)
 8001064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001068:	6453      	str	r3, [r2, #68]	; 0x44
 800106a:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <HAL_MspInit+0x4c>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	603b      	str	r3, [r7, #0]
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <HAL_MspInit+0x4c>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	4a08      	ldr	r2, [pc, #32]	; (80010a0 <HAL_MspInit+0x4c>)
 8001080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001084:	6413      	str	r3, [r2, #64]	; 0x40
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_MspInit+0x4c>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108e:	603b      	str	r3, [r7, #0]
 8001090:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001092:	2007      	movs	r0, #7
 8001094:	f000 fa42 	bl	800151c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40023800 	.word	0x40023800

080010a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a19      	ldr	r2, [pc, #100]	; (8001128 <HAL_UART_MspInit+0x84>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d12b      	bne.n	800111e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	4b18      	ldr	r3, [pc, #96]	; (800112c <HAL_UART_MspInit+0x88>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	4a17      	ldr	r2, [pc, #92]	; (800112c <HAL_UART_MspInit+0x88>)
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d4:	6413      	str	r3, [r2, #64]	; 0x40
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <HAL_UART_MspInit+0x88>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <HAL_UART_MspInit+0x88>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a10      	ldr	r2, [pc, #64]	; (800112c <HAL_UART_MspInit+0x88>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <HAL_UART_MspInit+0x88>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010fe:	230c      	movs	r3, #12
 8001100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800110e:	2307      	movs	r3, #7
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <HAL_UART_MspInit+0x8c>)
 800111a:	f000 fa33 	bl	8001584 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800111e:	bf00      	nop
 8001120:	3728      	adds	r7, #40	; 0x28
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40004400 	.word	0x40004400
 800112c:	40023800 	.word	0x40023800
 8001130:	40020000 	.word	0x40020000

08001134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <NMI_Handler+0x4>

0800113a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113e:	e7fe      	b.n	800113e <HardFault_Handler+0x4>

08001140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <MemManage_Handler+0x4>

08001146 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114a:	e7fe      	b.n	800114a <BusFault_Handler+0x4>

0800114c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001150:	e7fe      	b.n	8001150 <UsageFault_Handler+0x4>

08001152 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001180:	f000 f8fa 	bl	8001378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}

08001188 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	return -1;
 8001190:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001194:	4618      	mov	r0, r3
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011b0:	605a      	str	r2, [r3, #4]
	return 0;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <_isatty>:

int _isatty(int file)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	return 1;
 80011c8:	2301      	movs	r3, #1
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b085      	sub	sp, #20
 80011da:	af00      	add	r7, sp, #0
 80011dc:	60f8      	str	r0, [r7, #12]
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
	return 0;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011f8:	4a14      	ldr	r2, [pc, #80]	; (800124c <_sbrk+0x5c>)
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <_sbrk+0x60>)
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001204:	4b13      	ldr	r3, [pc, #76]	; (8001254 <_sbrk+0x64>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d102      	bne.n	8001212 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <_sbrk+0x64>)
 800120e:	4a12      	ldr	r2, [pc, #72]	; (8001258 <_sbrk+0x68>)
 8001210:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001212:	4b10      	ldr	r3, [pc, #64]	; (8001254 <_sbrk+0x64>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	429a      	cmp	r2, r3
 800121e:	d207      	bcs.n	8001230 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001220:	f001 fb7e 	bl	8002920 <__errno>
 8001224:	4603      	mov	r3, r0
 8001226:	220c      	movs	r2, #12
 8001228:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800122a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800122e:	e009      	b.n	8001244 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <_sbrk+0x64>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001236:	4b07      	ldr	r3, [pc, #28]	; (8001254 <_sbrk+0x64>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	4a05      	ldr	r2, [pc, #20]	; (8001254 <_sbrk+0x64>)
 8001240:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001242:	68fb      	ldr	r3, [r7, #12]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20018000 	.word	0x20018000
 8001250:	00000400 	.word	0x00000400
 8001254:	2000008c 	.word	0x2000008c
 8001258:	200001f8 	.word	0x200001f8

0800125c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <SystemInit+0x20>)
 8001262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001266:	4a05      	ldr	r2, [pc, #20]	; (800127c <SystemInit+0x20>)
 8001268:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800126c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001280:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001284:	480d      	ldr	r0, [pc, #52]	; (80012bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001286:	490e      	ldr	r1, [pc, #56]	; (80012c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001288:	4a0e      	ldr	r2, [pc, #56]	; (80012c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800128a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800128c:	e002      	b.n	8001294 <LoopCopyDataInit>

0800128e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001292:	3304      	adds	r3, #4

08001294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001298:	d3f9      	bcc.n	800128e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800129a:	4a0b      	ldr	r2, [pc, #44]	; (80012c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800129c:	4c0b      	ldr	r4, [pc, #44]	; (80012cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a0:	e001      	b.n	80012a6 <LoopFillZerobss>

080012a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a4:	3204      	adds	r2, #4

080012a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a8:	d3fb      	bcc.n	80012a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012aa:	f7ff ffd7 	bl	800125c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ae:	f001 fb4f 	bl	8002950 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012b2:	f7ff fdab 	bl	8000e0c <main>
  bx  lr    
 80012b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012c4:	080042b0 	.word	0x080042b0
  ldr r2, =_sbss
 80012c8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012cc:	200001f4 	.word	0x200001f4

080012d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012d0:	e7fe      	b.n	80012d0 <ADC_IRQHandler>
	...

080012d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012d8:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <HAL_Init+0x40>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a0d      	ldr	r2, [pc, #52]	; (8001314 <HAL_Init+0x40>)
 80012de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012e4:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <HAL_Init+0x40>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <HAL_Init+0x40>)
 80012ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f0:	4b08      	ldr	r3, [pc, #32]	; (8001314 <HAL_Init+0x40>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a07      	ldr	r2, [pc, #28]	; (8001314 <HAL_Init+0x40>)
 80012f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012fc:	2003      	movs	r0, #3
 80012fe:	f000 f90d 	bl	800151c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001302:	2000      	movs	r0, #0
 8001304:	f000 f808 	bl	8001318 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001308:	f7ff fea4 	bl	8001054 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40023c00 	.word	0x40023c00

08001318 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <HAL_InitTick+0x54>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <HAL_InitTick+0x58>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	4619      	mov	r1, r3
 800132a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001332:	fbb2 f3f3 	udiv	r3, r2, r3
 8001336:	4618      	mov	r0, r3
 8001338:	f000 f917 	bl	800156a <HAL_SYSTICK_Config>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e00e      	b.n	8001364 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b0f      	cmp	r3, #15
 800134a:	d80a      	bhi.n	8001362 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800134c:	2200      	movs	r2, #0
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001354:	f000 f8ed 	bl	8001532 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001358:	4a06      	ldr	r2, [pc, #24]	; (8001374 <HAL_InitTick+0x5c>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800135e:	2300      	movs	r3, #0
 8001360:	e000      	b.n	8001364 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000000 	.word	0x20000000
 8001370:	20000008 	.word	0x20000008
 8001374:	20000004 	.word	0x20000004

08001378 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_IncTick+0x20>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_IncTick+0x24>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4413      	add	r3, r2
 8001388:	4a04      	ldr	r2, [pc, #16]	; (800139c <HAL_IncTick+0x24>)
 800138a:	6013      	str	r3, [r2, #0]
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	20000008 	.word	0x20000008
 800139c:	200001e0 	.word	0x200001e0

080013a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return uwTick;
 80013a4:	4b03      	ldr	r3, [pc, #12]	; (80013b4 <HAL_GetTick+0x14>)
 80013a6:	681b      	ldr	r3, [r3, #0]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	200001e0 	.word	0x200001e0

080013b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c8:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <__NVIC_SetPriorityGrouping+0x44>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013d4:	4013      	ands	r3, r2
 80013d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ea:	4a04      	ldr	r2, [pc, #16]	; (80013fc <__NVIC_SetPriorityGrouping+0x44>)
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	60d3      	str	r3, [r2, #12]
}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001404:	4b04      	ldr	r3, [pc, #16]	; (8001418 <__NVIC_GetPriorityGrouping+0x18>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	0a1b      	lsrs	r3, r3, #8
 800140a:	f003 0307 	and.w	r3, r3, #7
}
 800140e:	4618      	mov	r0, r3
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	6039      	str	r1, [r7, #0]
 8001426:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142c:	2b00      	cmp	r3, #0
 800142e:	db0a      	blt.n	8001446 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	b2da      	uxtb	r2, r3
 8001434:	490c      	ldr	r1, [pc, #48]	; (8001468 <__NVIC_SetPriority+0x4c>)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	0112      	lsls	r2, r2, #4
 800143c:	b2d2      	uxtb	r2, r2
 800143e:	440b      	add	r3, r1
 8001440:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001444:	e00a      	b.n	800145c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4908      	ldr	r1, [pc, #32]	; (800146c <__NVIC_SetPriority+0x50>)
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	f003 030f 	and.w	r3, r3, #15
 8001452:	3b04      	subs	r3, #4
 8001454:	0112      	lsls	r2, r2, #4
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	440b      	add	r3, r1
 800145a:	761a      	strb	r2, [r3, #24]
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000e100 	.word	0xe000e100
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001470:	b480      	push	{r7}
 8001472:	b089      	sub	sp, #36	; 0x24
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f1c3 0307 	rsb	r3, r3, #7
 800148a:	2b04      	cmp	r3, #4
 800148c:	bf28      	it	cs
 800148e:	2304      	movcs	r3, #4
 8001490:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3304      	adds	r3, #4
 8001496:	2b06      	cmp	r3, #6
 8001498:	d902      	bls.n	80014a0 <NVIC_EncodePriority+0x30>
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3b03      	subs	r3, #3
 800149e:	e000      	b.n	80014a2 <NVIC_EncodePriority+0x32>
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43da      	mvns	r2, r3
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	401a      	ands	r2, r3
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	fa01 f303 	lsl.w	r3, r1, r3
 80014c2:	43d9      	mvns	r1, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c8:	4313      	orrs	r3, r2
         );
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3724      	adds	r7, #36	; 0x24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014e8:	d301      	bcc.n	80014ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ea:	2301      	movs	r3, #1
 80014ec:	e00f      	b.n	800150e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ee:	4a0a      	ldr	r2, [pc, #40]	; (8001518 <SysTick_Config+0x40>)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014f6:	210f      	movs	r1, #15
 80014f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014fc:	f7ff ff8e 	bl	800141c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <SysTick_Config+0x40>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001506:	4b04      	ldr	r3, [pc, #16]	; (8001518 <SysTick_Config+0x40>)
 8001508:	2207      	movs	r2, #7
 800150a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	e000e010 	.word	0xe000e010

0800151c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff ff47 	bl	80013b8 <__NVIC_SetPriorityGrouping>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001532:	b580      	push	{r7, lr}
 8001534:	b086      	sub	sp, #24
 8001536:	af00      	add	r7, sp, #0
 8001538:	4603      	mov	r3, r0
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	607a      	str	r2, [r7, #4]
 800153e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001544:	f7ff ff5c 	bl	8001400 <__NVIC_GetPriorityGrouping>
 8001548:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	68b9      	ldr	r1, [r7, #8]
 800154e:	6978      	ldr	r0, [r7, #20]
 8001550:	f7ff ff8e 	bl	8001470 <NVIC_EncodePriority>
 8001554:	4602      	mov	r2, r0
 8001556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800155a:	4611      	mov	r1, r2
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff5d 	bl	800141c <__NVIC_SetPriority>
}
 8001562:	bf00      	nop
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff ffb0 	bl	80014d8 <SysTick_Config>
 8001578:	4603      	mov	r3, r0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001584:	b480      	push	{r7}
 8001586:	b089      	sub	sp, #36	; 0x24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001596:	2300      	movs	r3, #0
 8001598:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
 800159e:	e159      	b.n	8001854 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015a0:	2201      	movs	r2, #1
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	4013      	ands	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	f040 8148 	bne.w	800184e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d005      	beq.n	80015d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d130      	bne.n	8001638 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	2203      	movs	r2, #3
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	68da      	ldr	r2, [r3, #12]
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800160c:	2201      	movs	r2, #1
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	091b      	lsrs	r3, r3, #4
 8001622:	f003 0201 	and.w	r2, r3, #1
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 0303 	and.w	r3, r3, #3
 8001640:	2b03      	cmp	r3, #3
 8001642:	d017      	beq.n	8001674 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	2203      	movs	r2, #3
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d123      	bne.n	80016c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	08da      	lsrs	r2, r3, #3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3208      	adds	r2, #8
 8001688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800168c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	f003 0307 	and.w	r3, r3, #7
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	220f      	movs	r2, #15
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	691a      	ldr	r2, [r3, #16]
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	08da      	lsrs	r2, r3, #3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3208      	adds	r2, #8
 80016c2:	69b9      	ldr	r1, [r7, #24]
 80016c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	2203      	movs	r2, #3
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 0203 	and.w	r2, r3, #3
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001704:	2b00      	cmp	r3, #0
 8001706:	f000 80a2 	beq.w	800184e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	4b57      	ldr	r3, [pc, #348]	; (800186c <HAL_GPIO_Init+0x2e8>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	4a56      	ldr	r2, [pc, #344]	; (800186c <HAL_GPIO_Init+0x2e8>)
 8001714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001718:	6453      	str	r3, [r2, #68]	; 0x44
 800171a:	4b54      	ldr	r3, [pc, #336]	; (800186c <HAL_GPIO_Init+0x2e8>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001726:	4a52      	ldr	r2, [pc, #328]	; (8001870 <HAL_GPIO_Init+0x2ec>)
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	089b      	lsrs	r3, r3, #2
 800172c:	3302      	adds	r3, #2
 800172e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001732:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f003 0303 	and.w	r3, r3, #3
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	220f      	movs	r2, #15
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4013      	ands	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a49      	ldr	r2, [pc, #292]	; (8001874 <HAL_GPIO_Init+0x2f0>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d019      	beq.n	8001786 <HAL_GPIO_Init+0x202>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a48      	ldr	r2, [pc, #288]	; (8001878 <HAL_GPIO_Init+0x2f4>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d013      	beq.n	8001782 <HAL_GPIO_Init+0x1fe>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a47      	ldr	r2, [pc, #284]	; (800187c <HAL_GPIO_Init+0x2f8>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d00d      	beq.n	800177e <HAL_GPIO_Init+0x1fa>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a46      	ldr	r2, [pc, #280]	; (8001880 <HAL_GPIO_Init+0x2fc>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d007      	beq.n	800177a <HAL_GPIO_Init+0x1f6>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a45      	ldr	r2, [pc, #276]	; (8001884 <HAL_GPIO_Init+0x300>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d101      	bne.n	8001776 <HAL_GPIO_Init+0x1f2>
 8001772:	2304      	movs	r3, #4
 8001774:	e008      	b.n	8001788 <HAL_GPIO_Init+0x204>
 8001776:	2307      	movs	r3, #7
 8001778:	e006      	b.n	8001788 <HAL_GPIO_Init+0x204>
 800177a:	2303      	movs	r3, #3
 800177c:	e004      	b.n	8001788 <HAL_GPIO_Init+0x204>
 800177e:	2302      	movs	r3, #2
 8001780:	e002      	b.n	8001788 <HAL_GPIO_Init+0x204>
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <HAL_GPIO_Init+0x204>
 8001786:	2300      	movs	r3, #0
 8001788:	69fa      	ldr	r2, [r7, #28]
 800178a:	f002 0203 	and.w	r2, r2, #3
 800178e:	0092      	lsls	r2, r2, #2
 8001790:	4093      	lsls	r3, r2
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001798:	4935      	ldr	r1, [pc, #212]	; (8001870 <HAL_GPIO_Init+0x2ec>)
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	089b      	lsrs	r3, r3, #2
 800179e:	3302      	adds	r3, #2
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017a6:	4b38      	ldr	r3, [pc, #224]	; (8001888 <HAL_GPIO_Init+0x304>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	43db      	mvns	r3, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4013      	ands	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017ca:	4a2f      	ldr	r2, [pc, #188]	; (8001888 <HAL_GPIO_Init+0x304>)
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017d0:	4b2d      	ldr	r3, [pc, #180]	; (8001888 <HAL_GPIO_Init+0x304>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017f4:	4a24      	ldr	r2, [pc, #144]	; (8001888 <HAL_GPIO_Init+0x304>)
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017fa:	4b23      	ldr	r3, [pc, #140]	; (8001888 <HAL_GPIO_Init+0x304>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	43db      	mvns	r3, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4013      	ands	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800181e:	4a1a      	ldr	r2, [pc, #104]	; (8001888 <HAL_GPIO_Init+0x304>)
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001824:	4b18      	ldr	r3, [pc, #96]	; (8001888 <HAL_GPIO_Init+0x304>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001848:	4a0f      	ldr	r2, [pc, #60]	; (8001888 <HAL_GPIO_Init+0x304>)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3301      	adds	r3, #1
 8001852:	61fb      	str	r3, [r7, #28]
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	2b0f      	cmp	r3, #15
 8001858:	f67f aea2 	bls.w	80015a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800185c:	bf00      	nop
 800185e:	bf00      	nop
 8001860:	3724      	adds	r7, #36	; 0x24
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40023800 	.word	0x40023800
 8001870:	40013800 	.word	0x40013800
 8001874:	40020000 	.word	0x40020000
 8001878:	40020400 	.word	0x40020400
 800187c:	40020800 	.word	0x40020800
 8001880:	40020c00 	.word	0x40020c00
 8001884:	40021000 	.word	0x40021000
 8001888:	40013c00 	.word	0x40013c00

0800188c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	807b      	strh	r3, [r7, #2]
 8001898:	4613      	mov	r3, r2
 800189a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800189c:	787b      	ldrb	r3, [r7, #1]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018a2:	887a      	ldrh	r2, [r7, #2]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018a8:	e003      	b.n	80018b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018aa:	887b      	ldrh	r3, [r7, #2]
 80018ac:	041a      	lsls	r2, r3, #16
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	619a      	str	r2, [r3, #24]
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e264      	b.n	8001d9c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d075      	beq.n	80019ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018de:	4ba3      	ldr	r3, [pc, #652]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 030c 	and.w	r3, r3, #12
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	d00c      	beq.n	8001904 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ea:	4ba0      	ldr	r3, [pc, #640]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018f2:	2b08      	cmp	r3, #8
 80018f4:	d112      	bne.n	800191c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018f6:	4b9d      	ldr	r3, [pc, #628]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001902:	d10b      	bne.n	800191c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001904:	4b99      	ldr	r3, [pc, #612]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d05b      	beq.n	80019c8 <HAL_RCC_OscConfig+0x108>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d157      	bne.n	80019c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e23f      	b.n	8001d9c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001924:	d106      	bne.n	8001934 <HAL_RCC_OscConfig+0x74>
 8001926:	4b91      	ldr	r3, [pc, #580]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a90      	ldr	r2, [pc, #576]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 800192c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	e01d      	b.n	8001970 <HAL_RCC_OscConfig+0xb0>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800193c:	d10c      	bne.n	8001958 <HAL_RCC_OscConfig+0x98>
 800193e:	4b8b      	ldr	r3, [pc, #556]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a8a      	ldr	r2, [pc, #552]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 8001944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	4b88      	ldr	r3, [pc, #544]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a87      	ldr	r2, [pc, #540]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 8001950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	e00b      	b.n	8001970 <HAL_RCC_OscConfig+0xb0>
 8001958:	4b84      	ldr	r3, [pc, #528]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a83      	ldr	r2, [pc, #524]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 800195e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	4b81      	ldr	r3, [pc, #516]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a80      	ldr	r2, [pc, #512]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 800196a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800196e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d013      	beq.n	80019a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001978:	f7ff fd12 	bl	80013a0 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001980:	f7ff fd0e 	bl	80013a0 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b64      	cmp	r3, #100	; 0x64
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e204      	b.n	8001d9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001992:	4b76      	ldr	r3, [pc, #472]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0f0      	beq.n	8001980 <HAL_RCC_OscConfig+0xc0>
 800199e:	e014      	b.n	80019ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a0:	f7ff fcfe 	bl	80013a0 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019a8:	f7ff fcfa 	bl	80013a0 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b64      	cmp	r3, #100	; 0x64
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e1f0      	b.n	8001d9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ba:	4b6c      	ldr	r3, [pc, #432]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1f0      	bne.n	80019a8 <HAL_RCC_OscConfig+0xe8>
 80019c6:	e000      	b.n	80019ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d063      	beq.n	8001a9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019d6:	4b65      	ldr	r3, [pc, #404]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 030c 	and.w	r3, r3, #12
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00b      	beq.n	80019fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019e2:	4b62      	ldr	r3, [pc, #392]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019ea:	2b08      	cmp	r3, #8
 80019ec:	d11c      	bne.n	8001a28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ee:	4b5f      	ldr	r3, [pc, #380]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d116      	bne.n	8001a28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019fa:	4b5c      	ldr	r3, [pc, #368]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d005      	beq.n	8001a12 <HAL_RCC_OscConfig+0x152>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d001      	beq.n	8001a12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e1c4      	b.n	8001d9c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a12:	4b56      	ldr	r3, [pc, #344]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	4952      	ldr	r1, [pc, #328]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a26:	e03a      	b.n	8001a9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d020      	beq.n	8001a72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a30:	4b4f      	ldr	r3, [pc, #316]	; (8001b70 <HAL_RCC_OscConfig+0x2b0>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a36:	f7ff fcb3 	bl	80013a0 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a3e:	f7ff fcaf 	bl	80013a0 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e1a5      	b.n	8001d9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a50:	4b46      	ldr	r3, [pc, #280]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f0      	beq.n	8001a3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a5c:	4b43      	ldr	r3, [pc, #268]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	4940      	ldr	r1, [pc, #256]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	600b      	str	r3, [r1, #0]
 8001a70:	e015      	b.n	8001a9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a72:	4b3f      	ldr	r3, [pc, #252]	; (8001b70 <HAL_RCC_OscConfig+0x2b0>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a78:	f7ff fc92 	bl	80013a0 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a80:	f7ff fc8e 	bl	80013a0 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e184      	b.n	8001d9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a92:	4b36      	ldr	r3, [pc, #216]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f0      	bne.n	8001a80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d030      	beq.n	8001b0c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d016      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ab2:	4b30      	ldr	r3, [pc, #192]	; (8001b74 <HAL_RCC_OscConfig+0x2b4>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab8:	f7ff fc72 	bl	80013a0 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ac0:	f7ff fc6e 	bl	80013a0 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e164      	b.n	8001d9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad2:	4b26      	ldr	r3, [pc, #152]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 8001ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0f0      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x200>
 8001ade:	e015      	b.n	8001b0c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ae0:	4b24      	ldr	r3, [pc, #144]	; (8001b74 <HAL_RCC_OscConfig+0x2b4>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae6:	f7ff fc5b 	bl	80013a0 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aee:	f7ff fc57 	bl	80013a0 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e14d      	b.n	8001d9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b00:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 8001b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1f0      	bne.n	8001aee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 80a0 	beq.w	8001c5a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b1e:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10f      	bne.n	8001b4a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	4a0e      	ldr	r2, [pc, #56]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 8001b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b38:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <HAL_RCC_OscConfig+0x2ac>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b46:	2301      	movs	r3, #1
 8001b48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <HAL_RCC_OscConfig+0x2b8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d121      	bne.n	8001b9a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b56:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <HAL_RCC_OscConfig+0x2b8>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a07      	ldr	r2, [pc, #28]	; (8001b78 <HAL_RCC_OscConfig+0x2b8>)
 8001b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b62:	f7ff fc1d 	bl	80013a0 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b68:	e011      	b.n	8001b8e <HAL_RCC_OscConfig+0x2ce>
 8001b6a:	bf00      	nop
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	42470000 	.word	0x42470000
 8001b74:	42470e80 	.word	0x42470e80
 8001b78:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b7c:	f7ff fc10 	bl	80013a0 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e106      	b.n	8001d9c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8e:	4b85      	ldr	r3, [pc, #532]	; (8001da4 <HAL_RCC_OscConfig+0x4e4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0f0      	beq.n	8001b7c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d106      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x2f0>
 8001ba2:	4b81      	ldr	r3, [pc, #516]	; (8001da8 <HAL_RCC_OscConfig+0x4e8>)
 8001ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba6:	4a80      	ldr	r2, [pc, #512]	; (8001da8 <HAL_RCC_OscConfig+0x4e8>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6713      	str	r3, [r2, #112]	; 0x70
 8001bae:	e01c      	b.n	8001bea <HAL_RCC_OscConfig+0x32a>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	2b05      	cmp	r3, #5
 8001bb6:	d10c      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x312>
 8001bb8:	4b7b      	ldr	r3, [pc, #492]	; (8001da8 <HAL_RCC_OscConfig+0x4e8>)
 8001bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbc:	4a7a      	ldr	r2, [pc, #488]	; (8001da8 <HAL_RCC_OscConfig+0x4e8>)
 8001bbe:	f043 0304 	orr.w	r3, r3, #4
 8001bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc4:	4b78      	ldr	r3, [pc, #480]	; (8001da8 <HAL_RCC_OscConfig+0x4e8>)
 8001bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc8:	4a77      	ldr	r2, [pc, #476]	; (8001da8 <HAL_RCC_OscConfig+0x4e8>)
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd0:	e00b      	b.n	8001bea <HAL_RCC_OscConfig+0x32a>
 8001bd2:	4b75      	ldr	r3, [pc, #468]	; (8001da8 <HAL_RCC_OscConfig+0x4e8>)
 8001bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd6:	4a74      	ldr	r2, [pc, #464]	; (8001da8 <HAL_RCC_OscConfig+0x4e8>)
 8001bd8:	f023 0301 	bic.w	r3, r3, #1
 8001bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8001bde:	4b72      	ldr	r3, [pc, #456]	; (8001da8 <HAL_RCC_OscConfig+0x4e8>)
 8001be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be2:	4a71      	ldr	r2, [pc, #452]	; (8001da8 <HAL_RCC_OscConfig+0x4e8>)
 8001be4:	f023 0304 	bic.w	r3, r3, #4
 8001be8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d015      	beq.n	8001c1e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf2:	f7ff fbd5 	bl	80013a0 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf8:	e00a      	b.n	8001c10 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bfa:	f7ff fbd1 	bl	80013a0 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e0c5      	b.n	8001d9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c10:	4b65      	ldr	r3, [pc, #404]	; (8001da8 <HAL_RCC_OscConfig+0x4e8>)
 8001c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0ee      	beq.n	8001bfa <HAL_RCC_OscConfig+0x33a>
 8001c1c:	e014      	b.n	8001c48 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c1e:	f7ff fbbf 	bl	80013a0 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c24:	e00a      	b.n	8001c3c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c26:	f7ff fbbb 	bl	80013a0 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e0af      	b.n	8001d9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c3c:	4b5a      	ldr	r3, [pc, #360]	; (8001da8 <HAL_RCC_OscConfig+0x4e8>)
 8001c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1ee      	bne.n	8001c26 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c48:	7dfb      	ldrb	r3, [r7, #23]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d105      	bne.n	8001c5a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c4e:	4b56      	ldr	r3, [pc, #344]	; (8001da8 <HAL_RCC_OscConfig+0x4e8>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	4a55      	ldr	r2, [pc, #340]	; (8001da8 <HAL_RCC_OscConfig+0x4e8>)
 8001c54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 809b 	beq.w	8001d9a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c64:	4b50      	ldr	r3, [pc, #320]	; (8001da8 <HAL_RCC_OscConfig+0x4e8>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 030c 	and.w	r3, r3, #12
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d05c      	beq.n	8001d2a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d141      	bne.n	8001cfc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c78:	4b4c      	ldr	r3, [pc, #304]	; (8001dac <HAL_RCC_OscConfig+0x4ec>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7e:	f7ff fb8f 	bl	80013a0 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c86:	f7ff fb8b 	bl	80013a0 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e081      	b.n	8001d9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c98:	4b43      	ldr	r3, [pc, #268]	; (8001da8 <HAL_RCC_OscConfig+0x4e8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1f0      	bne.n	8001c86 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69da      	ldr	r2, [r3, #28]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	431a      	orrs	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb2:	019b      	lsls	r3, r3, #6
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cba:	085b      	lsrs	r3, r3, #1
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	041b      	lsls	r3, r3, #16
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc6:	061b      	lsls	r3, r3, #24
 8001cc8:	4937      	ldr	r1, [pc, #220]	; (8001da8 <HAL_RCC_OscConfig+0x4e8>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cce:	4b37      	ldr	r3, [pc, #220]	; (8001dac <HAL_RCC_OscConfig+0x4ec>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd4:	f7ff fb64 	bl	80013a0 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cdc:	f7ff fb60 	bl	80013a0 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e056      	b.n	8001d9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cee:	4b2e      	ldr	r3, [pc, #184]	; (8001da8 <HAL_RCC_OscConfig+0x4e8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0f0      	beq.n	8001cdc <HAL_RCC_OscConfig+0x41c>
 8001cfa:	e04e      	b.n	8001d9a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cfc:	4b2b      	ldr	r3, [pc, #172]	; (8001dac <HAL_RCC_OscConfig+0x4ec>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d02:	f7ff fb4d 	bl	80013a0 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d0a:	f7ff fb49 	bl	80013a0 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e03f      	b.n	8001d9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d1c:	4b22      	ldr	r3, [pc, #136]	; (8001da8 <HAL_RCC_OscConfig+0x4e8>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1f0      	bne.n	8001d0a <HAL_RCC_OscConfig+0x44a>
 8001d28:	e037      	b.n	8001d9a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e032      	b.n	8001d9c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d36:	4b1c      	ldr	r3, [pc, #112]	; (8001da8 <HAL_RCC_OscConfig+0x4e8>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d028      	beq.n	8001d96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d121      	bne.n	8001d96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d11a      	bne.n	8001d96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d66:	4013      	ands	r3, r2
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d6c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d111      	bne.n	8001d96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7c:	085b      	lsrs	r3, r3, #1
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d107      	bne.n	8001d96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d90:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d001      	beq.n	8001d9a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e000      	b.n	8001d9c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40007000 	.word	0x40007000
 8001da8:	40023800 	.word	0x40023800
 8001dac:	42470060 	.word	0x42470060

08001db0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e0cc      	b.n	8001f5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dc4:	4b68      	ldr	r3, [pc, #416]	; (8001f68 <HAL_RCC_ClockConfig+0x1b8>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d90c      	bls.n	8001dec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd2:	4b65      	ldr	r3, [pc, #404]	; (8001f68 <HAL_RCC_ClockConfig+0x1b8>)
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dda:	4b63      	ldr	r3, [pc, #396]	; (8001f68 <HAL_RCC_ClockConfig+0x1b8>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d001      	beq.n	8001dec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e0b8      	b.n	8001f5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d020      	beq.n	8001e3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d005      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e04:	4b59      	ldr	r3, [pc, #356]	; (8001f6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	4a58      	ldr	r2, [pc, #352]	; (8001f6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d005      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e1c:	4b53      	ldr	r3, [pc, #332]	; (8001f6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	4a52      	ldr	r2, [pc, #328]	; (8001f6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e28:	4b50      	ldr	r3, [pc, #320]	; (8001f6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	494d      	ldr	r1, [pc, #308]	; (8001f6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d044      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d107      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e4e:	4b47      	ldr	r3, [pc, #284]	; (8001f6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d119      	bne.n	8001e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e07f      	b.n	8001f5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d003      	beq.n	8001e6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e6a:	2b03      	cmp	r3, #3
 8001e6c:	d107      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e6e:	4b3f      	ldr	r3, [pc, #252]	; (8001f6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d109      	bne.n	8001e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e06f      	b.n	8001f5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e7e:	4b3b      	ldr	r3, [pc, #236]	; (8001f6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e067      	b.n	8001f5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e8e:	4b37      	ldr	r3, [pc, #220]	; (8001f6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f023 0203 	bic.w	r2, r3, #3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	4934      	ldr	r1, [pc, #208]	; (8001f6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ea0:	f7ff fa7e 	bl	80013a0 <HAL_GetTick>
 8001ea4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea6:	e00a      	b.n	8001ebe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea8:	f7ff fa7a 	bl	80013a0 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e04f      	b.n	8001f5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ebe:	4b2b      	ldr	r3, [pc, #172]	; (8001f6c <HAL_RCC_ClockConfig+0x1bc>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 020c 	and.w	r2, r3, #12
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d1eb      	bne.n	8001ea8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ed0:	4b25      	ldr	r3, [pc, #148]	; (8001f68 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d20c      	bcs.n	8001ef8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ede:	4b22      	ldr	r3, [pc, #136]	; (8001f68 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee6:	4b20      	ldr	r3, [pc, #128]	; (8001f68 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d001      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e032      	b.n	8001f5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d008      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f04:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <HAL_RCC_ClockConfig+0x1bc>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	4916      	ldr	r1, [pc, #88]	; (8001f6c <HAL_RCC_ClockConfig+0x1bc>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d009      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f22:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <HAL_RCC_ClockConfig+0x1bc>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	490e      	ldr	r1, [pc, #56]	; (8001f6c <HAL_RCC_ClockConfig+0x1bc>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f36:	f000 f821 	bl	8001f7c <HAL_RCC_GetSysClockFreq>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <HAL_RCC_ClockConfig+0x1bc>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	091b      	lsrs	r3, r3, #4
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	490a      	ldr	r1, [pc, #40]	; (8001f70 <HAL_RCC_ClockConfig+0x1c0>)
 8001f48:	5ccb      	ldrb	r3, [r1, r3]
 8001f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f4e:	4a09      	ldr	r2, [pc, #36]	; (8001f74 <HAL_RCC_ClockConfig+0x1c4>)
 8001f50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f52:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <HAL_RCC_ClockConfig+0x1c8>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff f9de 	bl	8001318 <HAL_InitTick>

  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40023c00 	.word	0x40023c00
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	080040c8 	.word	0x080040c8
 8001f74:	20000000 	.word	0x20000000
 8001f78:	20000004 	.word	0x20000004

08001f7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f7c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f80:	b084      	sub	sp, #16
 8001f82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	607b      	str	r3, [r7, #4]
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f94:	4b67      	ldr	r3, [pc, #412]	; (8002134 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f003 030c 	and.w	r3, r3, #12
 8001f9c:	2b08      	cmp	r3, #8
 8001f9e:	d00d      	beq.n	8001fbc <HAL_RCC_GetSysClockFreq+0x40>
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	f200 80bd 	bhi.w	8002120 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d002      	beq.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x34>
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	d003      	beq.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001fae:	e0b7      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fb0:	4b61      	ldr	r3, [pc, #388]	; (8002138 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001fb2:	60bb      	str	r3, [r7, #8]
       break;
 8001fb4:	e0b7      	b.n	8002126 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fb6:	4b61      	ldr	r3, [pc, #388]	; (800213c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001fb8:	60bb      	str	r3, [r7, #8]
      break;
 8001fba:	e0b4      	b.n	8002126 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fbc:	4b5d      	ldr	r3, [pc, #372]	; (8002134 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fc4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fc6:	4b5b      	ldr	r3, [pc, #364]	; (8002134 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d04d      	beq.n	800206e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fd2:	4b58      	ldr	r3, [pc, #352]	; (8002134 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	099b      	lsrs	r3, r3, #6
 8001fd8:	461a      	mov	r2, r3
 8001fda:	f04f 0300 	mov.w	r3, #0
 8001fde:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001fe2:	f04f 0100 	mov.w	r1, #0
 8001fe6:	ea02 0800 	and.w	r8, r2, r0
 8001fea:	ea03 0901 	and.w	r9, r3, r1
 8001fee:	4640      	mov	r0, r8
 8001ff0:	4649      	mov	r1, r9
 8001ff2:	f04f 0200 	mov.w	r2, #0
 8001ff6:	f04f 0300 	mov.w	r3, #0
 8001ffa:	014b      	lsls	r3, r1, #5
 8001ffc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002000:	0142      	lsls	r2, r0, #5
 8002002:	4610      	mov	r0, r2
 8002004:	4619      	mov	r1, r3
 8002006:	ebb0 0008 	subs.w	r0, r0, r8
 800200a:	eb61 0109 	sbc.w	r1, r1, r9
 800200e:	f04f 0200 	mov.w	r2, #0
 8002012:	f04f 0300 	mov.w	r3, #0
 8002016:	018b      	lsls	r3, r1, #6
 8002018:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800201c:	0182      	lsls	r2, r0, #6
 800201e:	1a12      	subs	r2, r2, r0
 8002020:	eb63 0301 	sbc.w	r3, r3, r1
 8002024:	f04f 0000 	mov.w	r0, #0
 8002028:	f04f 0100 	mov.w	r1, #0
 800202c:	00d9      	lsls	r1, r3, #3
 800202e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002032:	00d0      	lsls	r0, r2, #3
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	eb12 0208 	adds.w	r2, r2, r8
 800203c:	eb43 0309 	adc.w	r3, r3, r9
 8002040:	f04f 0000 	mov.w	r0, #0
 8002044:	f04f 0100 	mov.w	r1, #0
 8002048:	0259      	lsls	r1, r3, #9
 800204a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800204e:	0250      	lsls	r0, r2, #9
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	4610      	mov	r0, r2
 8002056:	4619      	mov	r1, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	461a      	mov	r2, r3
 800205c:	f04f 0300 	mov.w	r3, #0
 8002060:	f7fe f90e 	bl	8000280 <__aeabi_uldivmod>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	4613      	mov	r3, r2
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	e04a      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800206e:	4b31      	ldr	r3, [pc, #196]	; (8002134 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	099b      	lsrs	r3, r3, #6
 8002074:	461a      	mov	r2, r3
 8002076:	f04f 0300 	mov.w	r3, #0
 800207a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800207e:	f04f 0100 	mov.w	r1, #0
 8002082:	ea02 0400 	and.w	r4, r2, r0
 8002086:	ea03 0501 	and.w	r5, r3, r1
 800208a:	4620      	mov	r0, r4
 800208c:	4629      	mov	r1, r5
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	f04f 0300 	mov.w	r3, #0
 8002096:	014b      	lsls	r3, r1, #5
 8002098:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800209c:	0142      	lsls	r2, r0, #5
 800209e:	4610      	mov	r0, r2
 80020a0:	4619      	mov	r1, r3
 80020a2:	1b00      	subs	r0, r0, r4
 80020a4:	eb61 0105 	sbc.w	r1, r1, r5
 80020a8:	f04f 0200 	mov.w	r2, #0
 80020ac:	f04f 0300 	mov.w	r3, #0
 80020b0:	018b      	lsls	r3, r1, #6
 80020b2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80020b6:	0182      	lsls	r2, r0, #6
 80020b8:	1a12      	subs	r2, r2, r0
 80020ba:	eb63 0301 	sbc.w	r3, r3, r1
 80020be:	f04f 0000 	mov.w	r0, #0
 80020c2:	f04f 0100 	mov.w	r1, #0
 80020c6:	00d9      	lsls	r1, r3, #3
 80020c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020cc:	00d0      	lsls	r0, r2, #3
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	1912      	adds	r2, r2, r4
 80020d4:	eb45 0303 	adc.w	r3, r5, r3
 80020d8:	f04f 0000 	mov.w	r0, #0
 80020dc:	f04f 0100 	mov.w	r1, #0
 80020e0:	0299      	lsls	r1, r3, #10
 80020e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80020e6:	0290      	lsls	r0, r2, #10
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	4610      	mov	r0, r2
 80020ee:	4619      	mov	r1, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	461a      	mov	r2, r3
 80020f4:	f04f 0300 	mov.w	r3, #0
 80020f8:	f7fe f8c2 	bl	8000280 <__aeabi_uldivmod>
 80020fc:	4602      	mov	r2, r0
 80020fe:	460b      	mov	r3, r1
 8002100:	4613      	mov	r3, r2
 8002102:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002104:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	0c1b      	lsrs	r3, r3, #16
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	3301      	adds	r3, #1
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	fbb2 f3f3 	udiv	r3, r2, r3
 800211c:	60bb      	str	r3, [r7, #8]
      break;
 800211e:	e002      	b.n	8002126 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002120:	4b05      	ldr	r3, [pc, #20]	; (8002138 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002122:	60bb      	str	r3, [r7, #8]
      break;
 8002124:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002126:	68bb      	ldr	r3, [r7, #8]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002132:	bf00      	nop
 8002134:	40023800 	.word	0x40023800
 8002138:	00f42400 	.word	0x00f42400
 800213c:	007a1200 	.word	0x007a1200

08002140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002144:	4b03      	ldr	r3, [pc, #12]	; (8002154 <HAL_RCC_GetHCLKFreq+0x14>)
 8002146:	681b      	ldr	r3, [r3, #0]
}
 8002148:	4618      	mov	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	20000000 	.word	0x20000000

08002158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800215c:	f7ff fff0 	bl	8002140 <HAL_RCC_GetHCLKFreq>
 8002160:	4602      	mov	r2, r0
 8002162:	4b05      	ldr	r3, [pc, #20]	; (8002178 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	0a9b      	lsrs	r3, r3, #10
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	4903      	ldr	r1, [pc, #12]	; (800217c <HAL_RCC_GetPCLK1Freq+0x24>)
 800216e:	5ccb      	ldrb	r3, [r1, r3]
 8002170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002174:	4618      	mov	r0, r3
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40023800 	.word	0x40023800
 800217c:	080040d8 	.word	0x080040d8

08002180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002184:	f7ff ffdc 	bl	8002140 <HAL_RCC_GetHCLKFreq>
 8002188:	4602      	mov	r2, r0
 800218a:	4b05      	ldr	r3, [pc, #20]	; (80021a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	0b5b      	lsrs	r3, r3, #13
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	4903      	ldr	r1, [pc, #12]	; (80021a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002196:	5ccb      	ldrb	r3, [r1, r3]
 8002198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800219c:	4618      	mov	r0, r3
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40023800 	.word	0x40023800
 80021a4:	080040d8 	.word	0x080040d8

080021a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e03f      	b.n	800223a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d106      	bne.n	80021d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7fe ff68 	bl	80010a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2224      	movs	r2, #36	; 0x24
 80021d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 f9cb 	bl	8002588 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	691a      	ldr	r2, [r3, #16]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002200:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	695a      	ldr	r2, [r3, #20]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002210:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002220:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2220      	movs	r2, #32
 800222c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2220      	movs	r2, #32
 8002234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b08a      	sub	sp, #40	; 0x28
 8002246:	af02      	add	r7, sp, #8
 8002248:	60f8      	str	r0, [r7, #12]
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	603b      	str	r3, [r7, #0]
 800224e:	4613      	mov	r3, r2
 8002250:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b20      	cmp	r3, #32
 8002260:	d17c      	bne.n	800235c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d002      	beq.n	800226e <HAL_UART_Transmit+0x2c>
 8002268:	88fb      	ldrh	r3, [r7, #6]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e075      	b.n	800235e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <HAL_UART_Transmit+0x3e>
 800227c:	2302      	movs	r3, #2
 800227e:	e06e      	b.n	800235e <HAL_UART_Transmit+0x11c>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2221      	movs	r2, #33	; 0x21
 8002292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002296:	f7ff f883 	bl	80013a0 <HAL_GetTick>
 800229a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	88fa      	ldrh	r2, [r7, #6]
 80022a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	88fa      	ldrh	r2, [r7, #6]
 80022a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022b0:	d108      	bne.n	80022c4 <HAL_UART_Transmit+0x82>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d104      	bne.n	80022c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	61bb      	str	r3, [r7, #24]
 80022c2:	e003      	b.n	80022cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80022d4:	e02a      	b.n	800232c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	2200      	movs	r2, #0
 80022de:	2180      	movs	r1, #128	; 0x80
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 f8e2 	bl	80024aa <UART_WaitOnFlagUntilTimeout>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e036      	b.n	800235e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10b      	bne.n	800230e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	461a      	mov	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002304:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	3302      	adds	r3, #2
 800230a:	61bb      	str	r3, [r7, #24]
 800230c:	e007      	b.n	800231e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	781a      	ldrb	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	3301      	adds	r3, #1
 800231c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002322:	b29b      	uxth	r3, r3
 8002324:	3b01      	subs	r3, #1
 8002326:	b29a      	uxth	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002330:	b29b      	uxth	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1cf      	bne.n	80022d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	2200      	movs	r2, #0
 800233e:	2140      	movs	r1, #64	; 0x40
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f000 f8b2 	bl	80024aa <UART_WaitOnFlagUntilTimeout>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e006      	b.n	800235e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2220      	movs	r2, #32
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	e000      	b.n	800235e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800235c:	2302      	movs	r3, #2
  }
}
 800235e:	4618      	mov	r0, r3
 8002360:	3720      	adds	r7, #32
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b08a      	sub	sp, #40	; 0x28
 800236a:	af02      	add	r7, sp, #8
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	603b      	str	r3, [r7, #0]
 8002372:	4613      	mov	r3, r2
 8002374:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b20      	cmp	r3, #32
 8002384:	f040 808c 	bne.w	80024a0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d002      	beq.n	8002394 <HAL_UART_Receive+0x2e>
 800238e:	88fb      	ldrh	r3, [r7, #6]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e084      	b.n	80024a2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d101      	bne.n	80023a6 <HAL_UART_Receive+0x40>
 80023a2:	2302      	movs	r3, #2
 80023a4:	e07d      	b.n	80024a2 <HAL_UART_Receive+0x13c>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2222      	movs	r2, #34	; 0x22
 80023b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023c2:	f7fe ffed 	bl	80013a0 <HAL_GetTick>
 80023c6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	88fa      	ldrh	r2, [r7, #6]
 80023cc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	88fa      	ldrh	r2, [r7, #6]
 80023d2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023dc:	d108      	bne.n	80023f0 <HAL_UART_Receive+0x8a>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d104      	bne.n	80023f0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	61bb      	str	r3, [r7, #24]
 80023ee:	e003      	b.n	80023f8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002400:	e043      	b.n	800248a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	2200      	movs	r2, #0
 800240a:	2120      	movs	r1, #32
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 f84c 	bl	80024aa <UART_WaitOnFlagUntilTimeout>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e042      	b.n	80024a2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10c      	bne.n	800243c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	b29b      	uxth	r3, r3
 800242a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800242e:	b29a      	uxth	r2, r3
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	3302      	adds	r3, #2
 8002438:	61bb      	str	r3, [r7, #24]
 800243a:	e01f      	b.n	800247c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002444:	d007      	beq.n	8002456 <HAL_UART_Receive+0xf0>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10a      	bne.n	8002464 <HAL_UART_Receive+0xfe>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d106      	bne.n	8002464 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	b2da      	uxtb	r2, r3
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	701a      	strb	r2, [r3, #0]
 8002462:	e008      	b.n	8002476 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	b2db      	uxtb	r3, r3
 800246c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002470:	b2da      	uxtb	r2, r3
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	3301      	adds	r3, #1
 800247a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002480:	b29b      	uxth	r3, r3
 8002482:	3b01      	subs	r3, #1
 8002484:	b29a      	uxth	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800248e:	b29b      	uxth	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1b6      	bne.n	8002402 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2220      	movs	r2, #32
 8002498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800249c:	2300      	movs	r3, #0
 800249e:	e000      	b.n	80024a2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80024a0:	2302      	movs	r3, #2
  }
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3720      	adds	r7, #32
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b090      	sub	sp, #64	; 0x40
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	60f8      	str	r0, [r7, #12]
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	603b      	str	r3, [r7, #0]
 80024b6:	4613      	mov	r3, r2
 80024b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024ba:	e050      	b.n	800255e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024c2:	d04c      	beq.n	800255e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80024c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d007      	beq.n	80024da <UART_WaitOnFlagUntilTimeout+0x30>
 80024ca:	f7fe ff69 	bl	80013a0 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d241      	bcs.n	800255e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	330c      	adds	r3, #12
 80024e0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e4:	e853 3f00 	ldrex	r3, [r3]
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80024f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	330c      	adds	r3, #12
 80024f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024fa:	637a      	str	r2, [r7, #52]	; 0x34
 80024fc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002500:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002502:	e841 2300 	strex	r3, r2, [r1]
 8002506:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1e5      	bne.n	80024da <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	3314      	adds	r3, #20
 8002514:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	e853 3f00 	ldrex	r3, [r3]
 800251c:	613b      	str	r3, [r7, #16]
   return(result);
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	f023 0301 	bic.w	r3, r3, #1
 8002524:	63bb      	str	r3, [r7, #56]	; 0x38
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	3314      	adds	r3, #20
 800252c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800252e:	623a      	str	r2, [r7, #32]
 8002530:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002532:	69f9      	ldr	r1, [r7, #28]
 8002534:	6a3a      	ldr	r2, [r7, #32]
 8002536:	e841 2300 	strex	r3, r2, [r1]
 800253a:	61bb      	str	r3, [r7, #24]
   return(result);
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1e5      	bne.n	800250e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2220      	movs	r2, #32
 8002546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2220      	movs	r2, #32
 800254e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e00f      	b.n	800257e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	4013      	ands	r3, r2
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	429a      	cmp	r2, r3
 800256c:	bf0c      	ite	eq
 800256e:	2301      	moveq	r3, #1
 8002570:	2300      	movne	r3, #0
 8002572:	b2db      	uxtb	r3, r3
 8002574:	461a      	mov	r2, r3
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	429a      	cmp	r2, r3
 800257a:	d09f      	beq.n	80024bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3740      	adds	r7, #64	; 0x40
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800258c:	b09f      	sub	sp, #124	; 0x7c
 800258e:	af00      	add	r7, sp, #0
 8002590:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800259c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800259e:	68d9      	ldr	r1, [r3, #12]
 80025a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	ea40 0301 	orr.w	r3, r0, r1
 80025a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	431a      	orrs	r2, r3
 80025b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	431a      	orrs	r2, r3
 80025ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	4313      	orrs	r3, r2
 80025c0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80025c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80025cc:	f021 010c 	bic.w	r1, r1, #12
 80025d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025d6:	430b      	orrs	r3, r1
 80025d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80025e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025e6:	6999      	ldr	r1, [r3, #24]
 80025e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	ea40 0301 	orr.w	r3, r0, r1
 80025f0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	4bc5      	ldr	r3, [pc, #788]	; (800290c <UART_SetConfig+0x384>)
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d004      	beq.n	8002606 <UART_SetConfig+0x7e>
 80025fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	4bc3      	ldr	r3, [pc, #780]	; (8002910 <UART_SetConfig+0x388>)
 8002602:	429a      	cmp	r2, r3
 8002604:	d103      	bne.n	800260e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002606:	f7ff fdbb 	bl	8002180 <HAL_RCC_GetPCLK2Freq>
 800260a:	6778      	str	r0, [r7, #116]	; 0x74
 800260c:	e002      	b.n	8002614 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800260e:	f7ff fda3 	bl	8002158 <HAL_RCC_GetPCLK1Freq>
 8002612:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800261c:	f040 80b6 	bne.w	800278c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002620:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002622:	461c      	mov	r4, r3
 8002624:	f04f 0500 	mov.w	r5, #0
 8002628:	4622      	mov	r2, r4
 800262a:	462b      	mov	r3, r5
 800262c:	1891      	adds	r1, r2, r2
 800262e:	6439      	str	r1, [r7, #64]	; 0x40
 8002630:	415b      	adcs	r3, r3
 8002632:	647b      	str	r3, [r7, #68]	; 0x44
 8002634:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002638:	1912      	adds	r2, r2, r4
 800263a:	eb45 0303 	adc.w	r3, r5, r3
 800263e:	f04f 0000 	mov.w	r0, #0
 8002642:	f04f 0100 	mov.w	r1, #0
 8002646:	00d9      	lsls	r1, r3, #3
 8002648:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800264c:	00d0      	lsls	r0, r2, #3
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	1911      	adds	r1, r2, r4
 8002654:	6639      	str	r1, [r7, #96]	; 0x60
 8002656:	416b      	adcs	r3, r5
 8002658:	667b      	str	r3, [r7, #100]	; 0x64
 800265a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	461a      	mov	r2, r3
 8002660:	f04f 0300 	mov.w	r3, #0
 8002664:	1891      	adds	r1, r2, r2
 8002666:	63b9      	str	r1, [r7, #56]	; 0x38
 8002668:	415b      	adcs	r3, r3
 800266a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800266c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002670:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002674:	f7fd fe04 	bl	8000280 <__aeabi_uldivmod>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	4ba5      	ldr	r3, [pc, #660]	; (8002914 <UART_SetConfig+0x38c>)
 800267e:	fba3 2302 	umull	r2, r3, r3, r2
 8002682:	095b      	lsrs	r3, r3, #5
 8002684:	011e      	lsls	r6, r3, #4
 8002686:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002688:	461c      	mov	r4, r3
 800268a:	f04f 0500 	mov.w	r5, #0
 800268e:	4622      	mov	r2, r4
 8002690:	462b      	mov	r3, r5
 8002692:	1891      	adds	r1, r2, r2
 8002694:	6339      	str	r1, [r7, #48]	; 0x30
 8002696:	415b      	adcs	r3, r3
 8002698:	637b      	str	r3, [r7, #52]	; 0x34
 800269a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800269e:	1912      	adds	r2, r2, r4
 80026a0:	eb45 0303 	adc.w	r3, r5, r3
 80026a4:	f04f 0000 	mov.w	r0, #0
 80026a8:	f04f 0100 	mov.w	r1, #0
 80026ac:	00d9      	lsls	r1, r3, #3
 80026ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026b2:	00d0      	lsls	r0, r2, #3
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	1911      	adds	r1, r2, r4
 80026ba:	65b9      	str	r1, [r7, #88]	; 0x58
 80026bc:	416b      	adcs	r3, r5
 80026be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	461a      	mov	r2, r3
 80026c6:	f04f 0300 	mov.w	r3, #0
 80026ca:	1891      	adds	r1, r2, r2
 80026cc:	62b9      	str	r1, [r7, #40]	; 0x28
 80026ce:	415b      	adcs	r3, r3
 80026d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026d6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80026da:	f7fd fdd1 	bl	8000280 <__aeabi_uldivmod>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	4b8c      	ldr	r3, [pc, #560]	; (8002914 <UART_SetConfig+0x38c>)
 80026e4:	fba3 1302 	umull	r1, r3, r3, r2
 80026e8:	095b      	lsrs	r3, r3, #5
 80026ea:	2164      	movs	r1, #100	; 0x64
 80026ec:	fb01 f303 	mul.w	r3, r1, r3
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	3332      	adds	r3, #50	; 0x32
 80026f6:	4a87      	ldr	r2, [pc, #540]	; (8002914 <UART_SetConfig+0x38c>)
 80026f8:	fba2 2303 	umull	r2, r3, r2, r3
 80026fc:	095b      	lsrs	r3, r3, #5
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002704:	441e      	add	r6, r3
 8002706:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002708:	4618      	mov	r0, r3
 800270a:	f04f 0100 	mov.w	r1, #0
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	1894      	adds	r4, r2, r2
 8002714:	623c      	str	r4, [r7, #32]
 8002716:	415b      	adcs	r3, r3
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
 800271a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800271e:	1812      	adds	r2, r2, r0
 8002720:	eb41 0303 	adc.w	r3, r1, r3
 8002724:	f04f 0400 	mov.w	r4, #0
 8002728:	f04f 0500 	mov.w	r5, #0
 800272c:	00dd      	lsls	r5, r3, #3
 800272e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002732:	00d4      	lsls	r4, r2, #3
 8002734:	4622      	mov	r2, r4
 8002736:	462b      	mov	r3, r5
 8002738:	1814      	adds	r4, r2, r0
 800273a:	653c      	str	r4, [r7, #80]	; 0x50
 800273c:	414b      	adcs	r3, r1
 800273e:	657b      	str	r3, [r7, #84]	; 0x54
 8002740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	461a      	mov	r2, r3
 8002746:	f04f 0300 	mov.w	r3, #0
 800274a:	1891      	adds	r1, r2, r2
 800274c:	61b9      	str	r1, [r7, #24]
 800274e:	415b      	adcs	r3, r3
 8002750:	61fb      	str	r3, [r7, #28]
 8002752:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002756:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800275a:	f7fd fd91 	bl	8000280 <__aeabi_uldivmod>
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	4b6c      	ldr	r3, [pc, #432]	; (8002914 <UART_SetConfig+0x38c>)
 8002764:	fba3 1302 	umull	r1, r3, r3, r2
 8002768:	095b      	lsrs	r3, r3, #5
 800276a:	2164      	movs	r1, #100	; 0x64
 800276c:	fb01 f303 	mul.w	r3, r1, r3
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	3332      	adds	r3, #50	; 0x32
 8002776:	4a67      	ldr	r2, [pc, #412]	; (8002914 <UART_SetConfig+0x38c>)
 8002778:	fba2 2303 	umull	r2, r3, r2, r3
 800277c:	095b      	lsrs	r3, r3, #5
 800277e:	f003 0207 	and.w	r2, r3, #7
 8002782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4432      	add	r2, r6
 8002788:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800278a:	e0b9      	b.n	8002900 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800278c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800278e:	461c      	mov	r4, r3
 8002790:	f04f 0500 	mov.w	r5, #0
 8002794:	4622      	mov	r2, r4
 8002796:	462b      	mov	r3, r5
 8002798:	1891      	adds	r1, r2, r2
 800279a:	6139      	str	r1, [r7, #16]
 800279c:	415b      	adcs	r3, r3
 800279e:	617b      	str	r3, [r7, #20]
 80027a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80027a4:	1912      	adds	r2, r2, r4
 80027a6:	eb45 0303 	adc.w	r3, r5, r3
 80027aa:	f04f 0000 	mov.w	r0, #0
 80027ae:	f04f 0100 	mov.w	r1, #0
 80027b2:	00d9      	lsls	r1, r3, #3
 80027b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027b8:	00d0      	lsls	r0, r2, #3
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	eb12 0804 	adds.w	r8, r2, r4
 80027c2:	eb43 0905 	adc.w	r9, r3, r5
 80027c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f04f 0100 	mov.w	r1, #0
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	008b      	lsls	r3, r1, #2
 80027da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80027de:	0082      	lsls	r2, r0, #2
 80027e0:	4640      	mov	r0, r8
 80027e2:	4649      	mov	r1, r9
 80027e4:	f7fd fd4c 	bl	8000280 <__aeabi_uldivmod>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	4b49      	ldr	r3, [pc, #292]	; (8002914 <UART_SetConfig+0x38c>)
 80027ee:	fba3 2302 	umull	r2, r3, r3, r2
 80027f2:	095b      	lsrs	r3, r3, #5
 80027f4:	011e      	lsls	r6, r3, #4
 80027f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027f8:	4618      	mov	r0, r3
 80027fa:	f04f 0100 	mov.w	r1, #0
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	1894      	adds	r4, r2, r2
 8002804:	60bc      	str	r4, [r7, #8]
 8002806:	415b      	adcs	r3, r3
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800280e:	1812      	adds	r2, r2, r0
 8002810:	eb41 0303 	adc.w	r3, r1, r3
 8002814:	f04f 0400 	mov.w	r4, #0
 8002818:	f04f 0500 	mov.w	r5, #0
 800281c:	00dd      	lsls	r5, r3, #3
 800281e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002822:	00d4      	lsls	r4, r2, #3
 8002824:	4622      	mov	r2, r4
 8002826:	462b      	mov	r3, r5
 8002828:	1814      	adds	r4, r2, r0
 800282a:	64bc      	str	r4, [r7, #72]	; 0x48
 800282c:	414b      	adcs	r3, r1
 800282e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	4618      	mov	r0, r3
 8002836:	f04f 0100 	mov.w	r1, #0
 800283a:	f04f 0200 	mov.w	r2, #0
 800283e:	f04f 0300 	mov.w	r3, #0
 8002842:	008b      	lsls	r3, r1, #2
 8002844:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002848:	0082      	lsls	r2, r0, #2
 800284a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800284e:	f7fd fd17 	bl	8000280 <__aeabi_uldivmod>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	4b2f      	ldr	r3, [pc, #188]	; (8002914 <UART_SetConfig+0x38c>)
 8002858:	fba3 1302 	umull	r1, r3, r3, r2
 800285c:	095b      	lsrs	r3, r3, #5
 800285e:	2164      	movs	r1, #100	; 0x64
 8002860:	fb01 f303 	mul.w	r3, r1, r3
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	3332      	adds	r3, #50	; 0x32
 800286a:	4a2a      	ldr	r2, [pc, #168]	; (8002914 <UART_SetConfig+0x38c>)
 800286c:	fba2 2303 	umull	r2, r3, r2, r3
 8002870:	095b      	lsrs	r3, r3, #5
 8002872:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002876:	441e      	add	r6, r3
 8002878:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800287a:	4618      	mov	r0, r3
 800287c:	f04f 0100 	mov.w	r1, #0
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	1894      	adds	r4, r2, r2
 8002886:	603c      	str	r4, [r7, #0]
 8002888:	415b      	adcs	r3, r3
 800288a:	607b      	str	r3, [r7, #4]
 800288c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002890:	1812      	adds	r2, r2, r0
 8002892:	eb41 0303 	adc.w	r3, r1, r3
 8002896:	f04f 0400 	mov.w	r4, #0
 800289a:	f04f 0500 	mov.w	r5, #0
 800289e:	00dd      	lsls	r5, r3, #3
 80028a0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80028a4:	00d4      	lsls	r4, r2, #3
 80028a6:	4622      	mov	r2, r4
 80028a8:	462b      	mov	r3, r5
 80028aa:	eb12 0a00 	adds.w	sl, r2, r0
 80028ae:	eb43 0b01 	adc.w	fp, r3, r1
 80028b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f04f 0100 	mov.w	r1, #0
 80028bc:	f04f 0200 	mov.w	r2, #0
 80028c0:	f04f 0300 	mov.w	r3, #0
 80028c4:	008b      	lsls	r3, r1, #2
 80028c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80028ca:	0082      	lsls	r2, r0, #2
 80028cc:	4650      	mov	r0, sl
 80028ce:	4659      	mov	r1, fp
 80028d0:	f7fd fcd6 	bl	8000280 <__aeabi_uldivmod>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <UART_SetConfig+0x38c>)
 80028da:	fba3 1302 	umull	r1, r3, r3, r2
 80028de:	095b      	lsrs	r3, r3, #5
 80028e0:	2164      	movs	r1, #100	; 0x64
 80028e2:	fb01 f303 	mul.w	r3, r1, r3
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	3332      	adds	r3, #50	; 0x32
 80028ec:	4a09      	ldr	r2, [pc, #36]	; (8002914 <UART_SetConfig+0x38c>)
 80028ee:	fba2 2303 	umull	r2, r3, r2, r3
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	f003 020f 	and.w	r2, r3, #15
 80028f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4432      	add	r2, r6
 80028fe:	609a      	str	r2, [r3, #8]
}
 8002900:	bf00      	nop
 8002902:	377c      	adds	r7, #124	; 0x7c
 8002904:	46bd      	mov	sp, r7
 8002906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800290a:	bf00      	nop
 800290c:	40011000 	.word	0x40011000
 8002910:	40011400 	.word	0x40011400
 8002914:	51eb851f 	.word	0x51eb851f

08002918 <atoi>:
 8002918:	220a      	movs	r2, #10
 800291a:	2100      	movs	r1, #0
 800291c:	f000 b9be 	b.w	8002c9c <strtol>

08002920 <__errno>:
 8002920:	4b01      	ldr	r3, [pc, #4]	; (8002928 <__errno+0x8>)
 8002922:	6818      	ldr	r0, [r3, #0]
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	2000000c 	.word	0x2000000c

0800292c <getchar>:
 800292c:	4b07      	ldr	r3, [pc, #28]	; (800294c <getchar+0x20>)
 800292e:	b510      	push	{r4, lr}
 8002930:	681c      	ldr	r4, [r3, #0]
 8002932:	b124      	cbz	r4, 800293e <getchar+0x12>
 8002934:	69a3      	ldr	r3, [r4, #24]
 8002936:	b913      	cbnz	r3, 800293e <getchar+0x12>
 8002938:	4620      	mov	r0, r4
 800293a:	f000 fb27 	bl	8002f8c <__sinit>
 800293e:	6861      	ldr	r1, [r4, #4]
 8002940:	4620      	mov	r0, r4
 8002942:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002946:	f000 bbdb 	b.w	8003100 <_getc_r>
 800294a:	bf00      	nop
 800294c:	2000000c 	.word	0x2000000c

08002950 <__libc_init_array>:
 8002950:	b570      	push	{r4, r5, r6, lr}
 8002952:	4d0d      	ldr	r5, [pc, #52]	; (8002988 <__libc_init_array+0x38>)
 8002954:	4c0d      	ldr	r4, [pc, #52]	; (800298c <__libc_init_array+0x3c>)
 8002956:	1b64      	subs	r4, r4, r5
 8002958:	10a4      	asrs	r4, r4, #2
 800295a:	2600      	movs	r6, #0
 800295c:	42a6      	cmp	r6, r4
 800295e:	d109      	bne.n	8002974 <__libc_init_array+0x24>
 8002960:	4d0b      	ldr	r5, [pc, #44]	; (8002990 <__libc_init_array+0x40>)
 8002962:	4c0c      	ldr	r4, [pc, #48]	; (8002994 <__libc_init_array+0x44>)
 8002964:	f001 fa5c 	bl	8003e20 <_init>
 8002968:	1b64      	subs	r4, r4, r5
 800296a:	10a4      	asrs	r4, r4, #2
 800296c:	2600      	movs	r6, #0
 800296e:	42a6      	cmp	r6, r4
 8002970:	d105      	bne.n	800297e <__libc_init_array+0x2e>
 8002972:	bd70      	pop	{r4, r5, r6, pc}
 8002974:	f855 3b04 	ldr.w	r3, [r5], #4
 8002978:	4798      	blx	r3
 800297a:	3601      	adds	r6, #1
 800297c:	e7ee      	b.n	800295c <__libc_init_array+0xc>
 800297e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002982:	4798      	blx	r3
 8002984:	3601      	adds	r6, #1
 8002986:	e7f2      	b.n	800296e <__libc_init_array+0x1e>
 8002988:	080042a8 	.word	0x080042a8
 800298c:	080042a8 	.word	0x080042a8
 8002990:	080042a8 	.word	0x080042a8
 8002994:	080042ac 	.word	0x080042ac

08002998 <__itoa>:
 8002998:	1e93      	subs	r3, r2, #2
 800299a:	2b22      	cmp	r3, #34	; 0x22
 800299c:	b510      	push	{r4, lr}
 800299e:	460c      	mov	r4, r1
 80029a0:	d904      	bls.n	80029ac <__itoa+0x14>
 80029a2:	2300      	movs	r3, #0
 80029a4:	700b      	strb	r3, [r1, #0]
 80029a6:	461c      	mov	r4, r3
 80029a8:	4620      	mov	r0, r4
 80029aa:	bd10      	pop	{r4, pc}
 80029ac:	2a0a      	cmp	r2, #10
 80029ae:	d109      	bne.n	80029c4 <__itoa+0x2c>
 80029b0:	2800      	cmp	r0, #0
 80029b2:	da07      	bge.n	80029c4 <__itoa+0x2c>
 80029b4:	232d      	movs	r3, #45	; 0x2d
 80029b6:	700b      	strb	r3, [r1, #0]
 80029b8:	4240      	negs	r0, r0
 80029ba:	2101      	movs	r1, #1
 80029bc:	4421      	add	r1, r4
 80029be:	f000 f977 	bl	8002cb0 <__utoa>
 80029c2:	e7f1      	b.n	80029a8 <__itoa+0x10>
 80029c4:	2100      	movs	r1, #0
 80029c6:	e7f9      	b.n	80029bc <__itoa+0x24>

080029c8 <memset>:
 80029c8:	4402      	add	r2, r0
 80029ca:	4603      	mov	r3, r0
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d100      	bne.n	80029d2 <memset+0xa>
 80029d0:	4770      	bx	lr
 80029d2:	f803 1b01 	strb.w	r1, [r3], #1
 80029d6:	e7f9      	b.n	80029cc <memset+0x4>

080029d8 <iprintf>:
 80029d8:	b40f      	push	{r0, r1, r2, r3}
 80029da:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <iprintf+0x2c>)
 80029dc:	b513      	push	{r0, r1, r4, lr}
 80029de:	681c      	ldr	r4, [r3, #0]
 80029e0:	b124      	cbz	r4, 80029ec <iprintf+0x14>
 80029e2:	69a3      	ldr	r3, [r4, #24]
 80029e4:	b913      	cbnz	r3, 80029ec <iprintf+0x14>
 80029e6:	4620      	mov	r0, r4
 80029e8:	f000 fad0 	bl	8002f8c <__sinit>
 80029ec:	ab05      	add	r3, sp, #20
 80029ee:	9a04      	ldr	r2, [sp, #16]
 80029f0:	68a1      	ldr	r1, [r4, #8]
 80029f2:	9301      	str	r3, [sp, #4]
 80029f4:	4620      	mov	r0, r4
 80029f6:	f000 fd07 	bl	8003408 <_vfiprintf_r>
 80029fa:	b002      	add	sp, #8
 80029fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a00:	b004      	add	sp, #16
 8002a02:	4770      	bx	lr
 8002a04:	2000000c 	.word	0x2000000c

08002a08 <setvbuf>:
 8002a08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002a0c:	461d      	mov	r5, r3
 8002a0e:	4b5d      	ldr	r3, [pc, #372]	; (8002b84 <setvbuf+0x17c>)
 8002a10:	681f      	ldr	r7, [r3, #0]
 8002a12:	4604      	mov	r4, r0
 8002a14:	460e      	mov	r6, r1
 8002a16:	4690      	mov	r8, r2
 8002a18:	b127      	cbz	r7, 8002a24 <setvbuf+0x1c>
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	b913      	cbnz	r3, 8002a24 <setvbuf+0x1c>
 8002a1e:	4638      	mov	r0, r7
 8002a20:	f000 fab4 	bl	8002f8c <__sinit>
 8002a24:	4b58      	ldr	r3, [pc, #352]	; (8002b88 <setvbuf+0x180>)
 8002a26:	429c      	cmp	r4, r3
 8002a28:	d167      	bne.n	8002afa <setvbuf+0xf2>
 8002a2a:	687c      	ldr	r4, [r7, #4]
 8002a2c:	f1b8 0f02 	cmp.w	r8, #2
 8002a30:	d006      	beq.n	8002a40 <setvbuf+0x38>
 8002a32:	f1b8 0f01 	cmp.w	r8, #1
 8002a36:	f200 809f 	bhi.w	8002b78 <setvbuf+0x170>
 8002a3a:	2d00      	cmp	r5, #0
 8002a3c:	f2c0 809c 	blt.w	8002b78 <setvbuf+0x170>
 8002a40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a42:	07db      	lsls	r3, r3, #31
 8002a44:	d405      	bmi.n	8002a52 <setvbuf+0x4a>
 8002a46:	89a3      	ldrh	r3, [r4, #12]
 8002a48:	0598      	lsls	r0, r3, #22
 8002a4a:	d402      	bmi.n	8002a52 <setvbuf+0x4a>
 8002a4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a4e:	f000 fb98 	bl	8003182 <__retarget_lock_acquire_recursive>
 8002a52:	4621      	mov	r1, r4
 8002a54:	4638      	mov	r0, r7
 8002a56:	f000 f9f3 	bl	8002e40 <_fflush_r>
 8002a5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a5c:	b141      	cbz	r1, 8002a70 <setvbuf+0x68>
 8002a5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a62:	4299      	cmp	r1, r3
 8002a64:	d002      	beq.n	8002a6c <setvbuf+0x64>
 8002a66:	4638      	mov	r0, r7
 8002a68:	f000 fbfa 	bl	8003260 <_free_r>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	6363      	str	r3, [r4, #52]	; 0x34
 8002a70:	2300      	movs	r3, #0
 8002a72:	61a3      	str	r3, [r4, #24]
 8002a74:	6063      	str	r3, [r4, #4]
 8002a76:	89a3      	ldrh	r3, [r4, #12]
 8002a78:	0619      	lsls	r1, r3, #24
 8002a7a:	d503      	bpl.n	8002a84 <setvbuf+0x7c>
 8002a7c:	6921      	ldr	r1, [r4, #16]
 8002a7e:	4638      	mov	r0, r7
 8002a80:	f000 fbee 	bl	8003260 <_free_r>
 8002a84:	89a3      	ldrh	r3, [r4, #12]
 8002a86:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8002a8a:	f023 0303 	bic.w	r3, r3, #3
 8002a8e:	f1b8 0f02 	cmp.w	r8, #2
 8002a92:	81a3      	strh	r3, [r4, #12]
 8002a94:	d06c      	beq.n	8002b70 <setvbuf+0x168>
 8002a96:	ab01      	add	r3, sp, #4
 8002a98:	466a      	mov	r2, sp
 8002a9a:	4621      	mov	r1, r4
 8002a9c:	4638      	mov	r0, r7
 8002a9e:	f000 fb72 	bl	8003186 <__swhatbuf_r>
 8002aa2:	89a3      	ldrh	r3, [r4, #12]
 8002aa4:	4318      	orrs	r0, r3
 8002aa6:	81a0      	strh	r0, [r4, #12]
 8002aa8:	2d00      	cmp	r5, #0
 8002aaa:	d130      	bne.n	8002b0e <setvbuf+0x106>
 8002aac:	9d00      	ldr	r5, [sp, #0]
 8002aae:	4628      	mov	r0, r5
 8002ab0:	f000 fbce 	bl	8003250 <malloc>
 8002ab4:	4606      	mov	r6, r0
 8002ab6:	2800      	cmp	r0, #0
 8002ab8:	d155      	bne.n	8002b66 <setvbuf+0x15e>
 8002aba:	f8dd 9000 	ldr.w	r9, [sp]
 8002abe:	45a9      	cmp	r9, r5
 8002ac0:	d14a      	bne.n	8002b58 <setvbuf+0x150>
 8002ac2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	60a2      	str	r2, [r4, #8]
 8002aca:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8002ace:	6022      	str	r2, [r4, #0]
 8002ad0:	6122      	str	r2, [r4, #16]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ad8:	6162      	str	r2, [r4, #20]
 8002ada:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002adc:	f043 0302 	orr.w	r3, r3, #2
 8002ae0:	07d2      	lsls	r2, r2, #31
 8002ae2:	81a3      	strh	r3, [r4, #12]
 8002ae4:	d405      	bmi.n	8002af2 <setvbuf+0xea>
 8002ae6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002aea:	d102      	bne.n	8002af2 <setvbuf+0xea>
 8002aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002aee:	f000 fb49 	bl	8003184 <__retarget_lock_release_recursive>
 8002af2:	4628      	mov	r0, r5
 8002af4:	b003      	add	sp, #12
 8002af6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002afa:	4b24      	ldr	r3, [pc, #144]	; (8002b8c <setvbuf+0x184>)
 8002afc:	429c      	cmp	r4, r3
 8002afe:	d101      	bne.n	8002b04 <setvbuf+0xfc>
 8002b00:	68bc      	ldr	r4, [r7, #8]
 8002b02:	e793      	b.n	8002a2c <setvbuf+0x24>
 8002b04:	4b22      	ldr	r3, [pc, #136]	; (8002b90 <setvbuf+0x188>)
 8002b06:	429c      	cmp	r4, r3
 8002b08:	bf08      	it	eq
 8002b0a:	68fc      	ldreq	r4, [r7, #12]
 8002b0c:	e78e      	b.n	8002a2c <setvbuf+0x24>
 8002b0e:	2e00      	cmp	r6, #0
 8002b10:	d0cd      	beq.n	8002aae <setvbuf+0xa6>
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	b913      	cbnz	r3, 8002b1c <setvbuf+0x114>
 8002b16:	4638      	mov	r0, r7
 8002b18:	f000 fa38 	bl	8002f8c <__sinit>
 8002b1c:	f1b8 0f01 	cmp.w	r8, #1
 8002b20:	bf08      	it	eq
 8002b22:	89a3      	ldrheq	r3, [r4, #12]
 8002b24:	6026      	str	r6, [r4, #0]
 8002b26:	bf04      	itt	eq
 8002b28:	f043 0301 	orreq.w	r3, r3, #1
 8002b2c:	81a3      	strheq	r3, [r4, #12]
 8002b2e:	89a2      	ldrh	r2, [r4, #12]
 8002b30:	f012 0308 	ands.w	r3, r2, #8
 8002b34:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8002b38:	d01c      	beq.n	8002b74 <setvbuf+0x16c>
 8002b3a:	07d3      	lsls	r3, r2, #31
 8002b3c:	bf41      	itttt	mi
 8002b3e:	2300      	movmi	r3, #0
 8002b40:	426d      	negmi	r5, r5
 8002b42:	60a3      	strmi	r3, [r4, #8]
 8002b44:	61a5      	strmi	r5, [r4, #24]
 8002b46:	bf58      	it	pl
 8002b48:	60a5      	strpl	r5, [r4, #8]
 8002b4a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8002b4c:	f015 0501 	ands.w	r5, r5, #1
 8002b50:	d115      	bne.n	8002b7e <setvbuf+0x176>
 8002b52:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002b56:	e7c8      	b.n	8002aea <setvbuf+0xe2>
 8002b58:	4648      	mov	r0, r9
 8002b5a:	f000 fb79 	bl	8003250 <malloc>
 8002b5e:	4606      	mov	r6, r0
 8002b60:	2800      	cmp	r0, #0
 8002b62:	d0ae      	beq.n	8002ac2 <setvbuf+0xba>
 8002b64:	464d      	mov	r5, r9
 8002b66:	89a3      	ldrh	r3, [r4, #12]
 8002b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b6c:	81a3      	strh	r3, [r4, #12]
 8002b6e:	e7d0      	b.n	8002b12 <setvbuf+0x10a>
 8002b70:	2500      	movs	r5, #0
 8002b72:	e7a8      	b.n	8002ac6 <setvbuf+0xbe>
 8002b74:	60a3      	str	r3, [r4, #8]
 8002b76:	e7e8      	b.n	8002b4a <setvbuf+0x142>
 8002b78:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002b7c:	e7b9      	b.n	8002af2 <setvbuf+0xea>
 8002b7e:	2500      	movs	r5, #0
 8002b80:	e7b7      	b.n	8002af2 <setvbuf+0xea>
 8002b82:	bf00      	nop
 8002b84:	2000000c 	.word	0x2000000c
 8002b88:	0800422c 	.word	0x0800422c
 8002b8c:	0800424c 	.word	0x0800424c
 8002b90:	0800420c 	.word	0x0800420c

08002b94 <_strtol_l.isra.0>:
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b9a:	d001      	beq.n	8002ba0 <_strtol_l.isra.0+0xc>
 8002b9c:	2b24      	cmp	r3, #36	; 0x24
 8002b9e:	d906      	bls.n	8002bae <_strtol_l.isra.0+0x1a>
 8002ba0:	f7ff febe 	bl	8002920 <__errno>
 8002ba4:	2316      	movs	r3, #22
 8002ba6:	6003      	str	r3, [r0, #0]
 8002ba8:	2000      	movs	r0, #0
 8002baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bae:	4f3a      	ldr	r7, [pc, #232]	; (8002c98 <_strtol_l.isra.0+0x104>)
 8002bb0:	468e      	mov	lr, r1
 8002bb2:	4676      	mov	r6, lr
 8002bb4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8002bb8:	5de5      	ldrb	r5, [r4, r7]
 8002bba:	f015 0508 	ands.w	r5, r5, #8
 8002bbe:	d1f8      	bne.n	8002bb2 <_strtol_l.isra.0+0x1e>
 8002bc0:	2c2d      	cmp	r4, #45	; 0x2d
 8002bc2:	d134      	bne.n	8002c2e <_strtol_l.isra.0+0x9a>
 8002bc4:	f89e 4000 	ldrb.w	r4, [lr]
 8002bc8:	f04f 0801 	mov.w	r8, #1
 8002bcc:	f106 0e02 	add.w	lr, r6, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d05c      	beq.n	8002c8e <_strtol_l.isra.0+0xfa>
 8002bd4:	2b10      	cmp	r3, #16
 8002bd6:	d10c      	bne.n	8002bf2 <_strtol_l.isra.0+0x5e>
 8002bd8:	2c30      	cmp	r4, #48	; 0x30
 8002bda:	d10a      	bne.n	8002bf2 <_strtol_l.isra.0+0x5e>
 8002bdc:	f89e 4000 	ldrb.w	r4, [lr]
 8002be0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8002be4:	2c58      	cmp	r4, #88	; 0x58
 8002be6:	d14d      	bne.n	8002c84 <_strtol_l.isra.0+0xf0>
 8002be8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8002bec:	2310      	movs	r3, #16
 8002bee:	f10e 0e02 	add.w	lr, lr, #2
 8002bf2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8002bf6:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8002bfa:	2600      	movs	r6, #0
 8002bfc:	fbbc f9f3 	udiv	r9, ip, r3
 8002c00:	4635      	mov	r5, r6
 8002c02:	fb03 ca19 	mls	sl, r3, r9, ip
 8002c06:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8002c0a:	2f09      	cmp	r7, #9
 8002c0c:	d818      	bhi.n	8002c40 <_strtol_l.isra.0+0xac>
 8002c0e:	463c      	mov	r4, r7
 8002c10:	42a3      	cmp	r3, r4
 8002c12:	dd24      	ble.n	8002c5e <_strtol_l.isra.0+0xca>
 8002c14:	2e00      	cmp	r6, #0
 8002c16:	db1f      	blt.n	8002c58 <_strtol_l.isra.0+0xc4>
 8002c18:	45a9      	cmp	r9, r5
 8002c1a:	d31d      	bcc.n	8002c58 <_strtol_l.isra.0+0xc4>
 8002c1c:	d101      	bne.n	8002c22 <_strtol_l.isra.0+0x8e>
 8002c1e:	45a2      	cmp	sl, r4
 8002c20:	db1a      	blt.n	8002c58 <_strtol_l.isra.0+0xc4>
 8002c22:	fb05 4503 	mla	r5, r5, r3, r4
 8002c26:	2601      	movs	r6, #1
 8002c28:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8002c2c:	e7eb      	b.n	8002c06 <_strtol_l.isra.0+0x72>
 8002c2e:	2c2b      	cmp	r4, #43	; 0x2b
 8002c30:	bf08      	it	eq
 8002c32:	f89e 4000 	ldrbeq.w	r4, [lr]
 8002c36:	46a8      	mov	r8, r5
 8002c38:	bf08      	it	eq
 8002c3a:	f106 0e02 	addeq.w	lr, r6, #2
 8002c3e:	e7c7      	b.n	8002bd0 <_strtol_l.isra.0+0x3c>
 8002c40:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8002c44:	2f19      	cmp	r7, #25
 8002c46:	d801      	bhi.n	8002c4c <_strtol_l.isra.0+0xb8>
 8002c48:	3c37      	subs	r4, #55	; 0x37
 8002c4a:	e7e1      	b.n	8002c10 <_strtol_l.isra.0+0x7c>
 8002c4c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8002c50:	2f19      	cmp	r7, #25
 8002c52:	d804      	bhi.n	8002c5e <_strtol_l.isra.0+0xca>
 8002c54:	3c57      	subs	r4, #87	; 0x57
 8002c56:	e7db      	b.n	8002c10 <_strtol_l.isra.0+0x7c>
 8002c58:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8002c5c:	e7e4      	b.n	8002c28 <_strtol_l.isra.0+0x94>
 8002c5e:	2e00      	cmp	r6, #0
 8002c60:	da05      	bge.n	8002c6e <_strtol_l.isra.0+0xda>
 8002c62:	2322      	movs	r3, #34	; 0x22
 8002c64:	6003      	str	r3, [r0, #0]
 8002c66:	4665      	mov	r5, ip
 8002c68:	b942      	cbnz	r2, 8002c7c <_strtol_l.isra.0+0xe8>
 8002c6a:	4628      	mov	r0, r5
 8002c6c:	e79d      	b.n	8002baa <_strtol_l.isra.0+0x16>
 8002c6e:	f1b8 0f00 	cmp.w	r8, #0
 8002c72:	d000      	beq.n	8002c76 <_strtol_l.isra.0+0xe2>
 8002c74:	426d      	negs	r5, r5
 8002c76:	2a00      	cmp	r2, #0
 8002c78:	d0f7      	beq.n	8002c6a <_strtol_l.isra.0+0xd6>
 8002c7a:	b10e      	cbz	r6, 8002c80 <_strtol_l.isra.0+0xec>
 8002c7c:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8002c80:	6011      	str	r1, [r2, #0]
 8002c82:	e7f2      	b.n	8002c6a <_strtol_l.isra.0+0xd6>
 8002c84:	2430      	movs	r4, #48	; 0x30
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1b3      	bne.n	8002bf2 <_strtol_l.isra.0+0x5e>
 8002c8a:	2308      	movs	r3, #8
 8002c8c:	e7b1      	b.n	8002bf2 <_strtol_l.isra.0+0x5e>
 8002c8e:	2c30      	cmp	r4, #48	; 0x30
 8002c90:	d0a4      	beq.n	8002bdc <_strtol_l.isra.0+0x48>
 8002c92:	230a      	movs	r3, #10
 8002c94:	e7ad      	b.n	8002bf2 <_strtol_l.isra.0+0x5e>
 8002c96:	bf00      	nop
 8002c98:	0800410a 	.word	0x0800410a

08002c9c <strtol>:
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	460a      	mov	r2, r1
 8002ca0:	4601      	mov	r1, r0
 8002ca2:	4802      	ldr	r0, [pc, #8]	; (8002cac <strtol+0x10>)
 8002ca4:	6800      	ldr	r0, [r0, #0]
 8002ca6:	f7ff bf75 	b.w	8002b94 <_strtol_l.isra.0>
 8002caa:	bf00      	nop
 8002cac:	2000000c 	.word	0x2000000c

08002cb0 <__utoa>:
 8002cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cb2:	4c1f      	ldr	r4, [pc, #124]	; (8002d30 <__utoa+0x80>)
 8002cb4:	b08b      	sub	sp, #44	; 0x2c
 8002cb6:	4605      	mov	r5, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	466e      	mov	r6, sp
 8002cbc:	f104 0c20 	add.w	ip, r4, #32
 8002cc0:	6820      	ldr	r0, [r4, #0]
 8002cc2:	6861      	ldr	r1, [r4, #4]
 8002cc4:	4637      	mov	r7, r6
 8002cc6:	c703      	stmia	r7!, {r0, r1}
 8002cc8:	3408      	adds	r4, #8
 8002cca:	4564      	cmp	r4, ip
 8002ccc:	463e      	mov	r6, r7
 8002cce:	d1f7      	bne.n	8002cc0 <__utoa+0x10>
 8002cd0:	7921      	ldrb	r1, [r4, #4]
 8002cd2:	7139      	strb	r1, [r7, #4]
 8002cd4:	1e91      	subs	r1, r2, #2
 8002cd6:	6820      	ldr	r0, [r4, #0]
 8002cd8:	6038      	str	r0, [r7, #0]
 8002cda:	2922      	cmp	r1, #34	; 0x22
 8002cdc:	f04f 0100 	mov.w	r1, #0
 8002ce0:	d904      	bls.n	8002cec <__utoa+0x3c>
 8002ce2:	7019      	strb	r1, [r3, #0]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	b00b      	add	sp, #44	; 0x2c
 8002cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cec:	1e58      	subs	r0, r3, #1
 8002cee:	4684      	mov	ip, r0
 8002cf0:	fbb5 f7f2 	udiv	r7, r5, r2
 8002cf4:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8002cf8:	fb02 5617 	mls	r6, r2, r7, r5
 8002cfc:	4476      	add	r6, lr
 8002cfe:	460c      	mov	r4, r1
 8002d00:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8002d04:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8002d08:	462e      	mov	r6, r5
 8002d0a:	42b2      	cmp	r2, r6
 8002d0c:	f101 0101 	add.w	r1, r1, #1
 8002d10:	463d      	mov	r5, r7
 8002d12:	d9ed      	bls.n	8002cf0 <__utoa+0x40>
 8002d14:	2200      	movs	r2, #0
 8002d16:	545a      	strb	r2, [r3, r1]
 8002d18:	1919      	adds	r1, r3, r4
 8002d1a:	1aa5      	subs	r5, r4, r2
 8002d1c:	42aa      	cmp	r2, r5
 8002d1e:	dae2      	bge.n	8002ce6 <__utoa+0x36>
 8002d20:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002d24:	780e      	ldrb	r6, [r1, #0]
 8002d26:	7006      	strb	r6, [r0, #0]
 8002d28:	3201      	adds	r2, #1
 8002d2a:	f801 5901 	strb.w	r5, [r1], #-1
 8002d2e:	e7f4      	b.n	8002d1a <__utoa+0x6a>
 8002d30:	080040e4 	.word	0x080040e4

08002d34 <__sflush_r>:
 8002d34:	898a      	ldrh	r2, [r1, #12]
 8002d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d3a:	4605      	mov	r5, r0
 8002d3c:	0710      	lsls	r0, r2, #28
 8002d3e:	460c      	mov	r4, r1
 8002d40:	d458      	bmi.n	8002df4 <__sflush_r+0xc0>
 8002d42:	684b      	ldr	r3, [r1, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	dc05      	bgt.n	8002d54 <__sflush_r+0x20>
 8002d48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	dc02      	bgt.n	8002d54 <__sflush_r+0x20>
 8002d4e:	2000      	movs	r0, #0
 8002d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d56:	2e00      	cmp	r6, #0
 8002d58:	d0f9      	beq.n	8002d4e <__sflush_r+0x1a>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002d60:	682f      	ldr	r7, [r5, #0]
 8002d62:	602b      	str	r3, [r5, #0]
 8002d64:	d032      	beq.n	8002dcc <__sflush_r+0x98>
 8002d66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002d68:	89a3      	ldrh	r3, [r4, #12]
 8002d6a:	075a      	lsls	r2, r3, #29
 8002d6c:	d505      	bpl.n	8002d7a <__sflush_r+0x46>
 8002d6e:	6863      	ldr	r3, [r4, #4]
 8002d70:	1ac0      	subs	r0, r0, r3
 8002d72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d74:	b10b      	cbz	r3, 8002d7a <__sflush_r+0x46>
 8002d76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d78:	1ac0      	subs	r0, r0, r3
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d80:	6a21      	ldr	r1, [r4, #32]
 8002d82:	4628      	mov	r0, r5
 8002d84:	47b0      	blx	r6
 8002d86:	1c43      	adds	r3, r0, #1
 8002d88:	89a3      	ldrh	r3, [r4, #12]
 8002d8a:	d106      	bne.n	8002d9a <__sflush_r+0x66>
 8002d8c:	6829      	ldr	r1, [r5, #0]
 8002d8e:	291d      	cmp	r1, #29
 8002d90:	d82c      	bhi.n	8002dec <__sflush_r+0xb8>
 8002d92:	4a2a      	ldr	r2, [pc, #168]	; (8002e3c <__sflush_r+0x108>)
 8002d94:	40ca      	lsrs	r2, r1
 8002d96:	07d6      	lsls	r6, r2, #31
 8002d98:	d528      	bpl.n	8002dec <__sflush_r+0xb8>
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	6062      	str	r2, [r4, #4]
 8002d9e:	04d9      	lsls	r1, r3, #19
 8002da0:	6922      	ldr	r2, [r4, #16]
 8002da2:	6022      	str	r2, [r4, #0]
 8002da4:	d504      	bpl.n	8002db0 <__sflush_r+0x7c>
 8002da6:	1c42      	adds	r2, r0, #1
 8002da8:	d101      	bne.n	8002dae <__sflush_r+0x7a>
 8002daa:	682b      	ldr	r3, [r5, #0]
 8002dac:	b903      	cbnz	r3, 8002db0 <__sflush_r+0x7c>
 8002dae:	6560      	str	r0, [r4, #84]	; 0x54
 8002db0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002db2:	602f      	str	r7, [r5, #0]
 8002db4:	2900      	cmp	r1, #0
 8002db6:	d0ca      	beq.n	8002d4e <__sflush_r+0x1a>
 8002db8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002dbc:	4299      	cmp	r1, r3
 8002dbe:	d002      	beq.n	8002dc6 <__sflush_r+0x92>
 8002dc0:	4628      	mov	r0, r5
 8002dc2:	f000 fa4d 	bl	8003260 <_free_r>
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	6360      	str	r0, [r4, #52]	; 0x34
 8002dca:	e7c1      	b.n	8002d50 <__sflush_r+0x1c>
 8002dcc:	6a21      	ldr	r1, [r4, #32]
 8002dce:	2301      	movs	r3, #1
 8002dd0:	4628      	mov	r0, r5
 8002dd2:	47b0      	blx	r6
 8002dd4:	1c41      	adds	r1, r0, #1
 8002dd6:	d1c7      	bne.n	8002d68 <__sflush_r+0x34>
 8002dd8:	682b      	ldr	r3, [r5, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0c4      	beq.n	8002d68 <__sflush_r+0x34>
 8002dde:	2b1d      	cmp	r3, #29
 8002de0:	d001      	beq.n	8002de6 <__sflush_r+0xb2>
 8002de2:	2b16      	cmp	r3, #22
 8002de4:	d101      	bne.n	8002dea <__sflush_r+0xb6>
 8002de6:	602f      	str	r7, [r5, #0]
 8002de8:	e7b1      	b.n	8002d4e <__sflush_r+0x1a>
 8002dea:	89a3      	ldrh	r3, [r4, #12]
 8002dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002df0:	81a3      	strh	r3, [r4, #12]
 8002df2:	e7ad      	b.n	8002d50 <__sflush_r+0x1c>
 8002df4:	690f      	ldr	r7, [r1, #16]
 8002df6:	2f00      	cmp	r7, #0
 8002df8:	d0a9      	beq.n	8002d4e <__sflush_r+0x1a>
 8002dfa:	0793      	lsls	r3, r2, #30
 8002dfc:	680e      	ldr	r6, [r1, #0]
 8002dfe:	bf08      	it	eq
 8002e00:	694b      	ldreq	r3, [r1, #20]
 8002e02:	600f      	str	r7, [r1, #0]
 8002e04:	bf18      	it	ne
 8002e06:	2300      	movne	r3, #0
 8002e08:	eba6 0807 	sub.w	r8, r6, r7
 8002e0c:	608b      	str	r3, [r1, #8]
 8002e0e:	f1b8 0f00 	cmp.w	r8, #0
 8002e12:	dd9c      	ble.n	8002d4e <__sflush_r+0x1a>
 8002e14:	6a21      	ldr	r1, [r4, #32]
 8002e16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002e18:	4643      	mov	r3, r8
 8002e1a:	463a      	mov	r2, r7
 8002e1c:	4628      	mov	r0, r5
 8002e1e:	47b0      	blx	r6
 8002e20:	2800      	cmp	r0, #0
 8002e22:	dc06      	bgt.n	8002e32 <__sflush_r+0xfe>
 8002e24:	89a3      	ldrh	r3, [r4, #12]
 8002e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e2a:	81a3      	strh	r3, [r4, #12]
 8002e2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e30:	e78e      	b.n	8002d50 <__sflush_r+0x1c>
 8002e32:	4407      	add	r7, r0
 8002e34:	eba8 0800 	sub.w	r8, r8, r0
 8002e38:	e7e9      	b.n	8002e0e <__sflush_r+0xda>
 8002e3a:	bf00      	nop
 8002e3c:	20400001 	.word	0x20400001

08002e40 <_fflush_r>:
 8002e40:	b538      	push	{r3, r4, r5, lr}
 8002e42:	690b      	ldr	r3, [r1, #16]
 8002e44:	4605      	mov	r5, r0
 8002e46:	460c      	mov	r4, r1
 8002e48:	b913      	cbnz	r3, 8002e50 <_fflush_r+0x10>
 8002e4a:	2500      	movs	r5, #0
 8002e4c:	4628      	mov	r0, r5
 8002e4e:	bd38      	pop	{r3, r4, r5, pc}
 8002e50:	b118      	cbz	r0, 8002e5a <_fflush_r+0x1a>
 8002e52:	6983      	ldr	r3, [r0, #24]
 8002e54:	b90b      	cbnz	r3, 8002e5a <_fflush_r+0x1a>
 8002e56:	f000 f899 	bl	8002f8c <__sinit>
 8002e5a:	4b14      	ldr	r3, [pc, #80]	; (8002eac <_fflush_r+0x6c>)
 8002e5c:	429c      	cmp	r4, r3
 8002e5e:	d11b      	bne.n	8002e98 <_fflush_r+0x58>
 8002e60:	686c      	ldr	r4, [r5, #4]
 8002e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0ef      	beq.n	8002e4a <_fflush_r+0xa>
 8002e6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002e6c:	07d0      	lsls	r0, r2, #31
 8002e6e:	d404      	bmi.n	8002e7a <_fflush_r+0x3a>
 8002e70:	0599      	lsls	r1, r3, #22
 8002e72:	d402      	bmi.n	8002e7a <_fflush_r+0x3a>
 8002e74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e76:	f000 f984 	bl	8003182 <__retarget_lock_acquire_recursive>
 8002e7a:	4628      	mov	r0, r5
 8002e7c:	4621      	mov	r1, r4
 8002e7e:	f7ff ff59 	bl	8002d34 <__sflush_r>
 8002e82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e84:	07da      	lsls	r2, r3, #31
 8002e86:	4605      	mov	r5, r0
 8002e88:	d4e0      	bmi.n	8002e4c <_fflush_r+0xc>
 8002e8a:	89a3      	ldrh	r3, [r4, #12]
 8002e8c:	059b      	lsls	r3, r3, #22
 8002e8e:	d4dd      	bmi.n	8002e4c <_fflush_r+0xc>
 8002e90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e92:	f000 f977 	bl	8003184 <__retarget_lock_release_recursive>
 8002e96:	e7d9      	b.n	8002e4c <_fflush_r+0xc>
 8002e98:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <_fflush_r+0x70>)
 8002e9a:	429c      	cmp	r4, r3
 8002e9c:	d101      	bne.n	8002ea2 <_fflush_r+0x62>
 8002e9e:	68ac      	ldr	r4, [r5, #8]
 8002ea0:	e7df      	b.n	8002e62 <_fflush_r+0x22>
 8002ea2:	4b04      	ldr	r3, [pc, #16]	; (8002eb4 <_fflush_r+0x74>)
 8002ea4:	429c      	cmp	r4, r3
 8002ea6:	bf08      	it	eq
 8002ea8:	68ec      	ldreq	r4, [r5, #12]
 8002eaa:	e7da      	b.n	8002e62 <_fflush_r+0x22>
 8002eac:	0800422c 	.word	0x0800422c
 8002eb0:	0800424c 	.word	0x0800424c
 8002eb4:	0800420c 	.word	0x0800420c

08002eb8 <fflush>:
 8002eb8:	4601      	mov	r1, r0
 8002eba:	b920      	cbnz	r0, 8002ec6 <fflush+0xe>
 8002ebc:	4b04      	ldr	r3, [pc, #16]	; (8002ed0 <fflush+0x18>)
 8002ebe:	4905      	ldr	r1, [pc, #20]	; (8002ed4 <fflush+0x1c>)
 8002ec0:	6818      	ldr	r0, [r3, #0]
 8002ec2:	f000 b8fe 	b.w	80030c2 <_fwalk_reent>
 8002ec6:	4b04      	ldr	r3, [pc, #16]	; (8002ed8 <fflush+0x20>)
 8002ec8:	6818      	ldr	r0, [r3, #0]
 8002eca:	f7ff bfb9 	b.w	8002e40 <_fflush_r>
 8002ece:	bf00      	nop
 8002ed0:	080040e0 	.word	0x080040e0
 8002ed4:	08002e41 	.word	0x08002e41
 8002ed8:	2000000c 	.word	0x2000000c

08002edc <std>:
 8002edc:	2300      	movs	r3, #0
 8002ede:	b510      	push	{r4, lr}
 8002ee0:	4604      	mov	r4, r0
 8002ee2:	e9c0 3300 	strd	r3, r3, [r0]
 8002ee6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002eea:	6083      	str	r3, [r0, #8]
 8002eec:	8181      	strh	r1, [r0, #12]
 8002eee:	6643      	str	r3, [r0, #100]	; 0x64
 8002ef0:	81c2      	strh	r2, [r0, #14]
 8002ef2:	6183      	str	r3, [r0, #24]
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	2208      	movs	r2, #8
 8002ef8:	305c      	adds	r0, #92	; 0x5c
 8002efa:	f7ff fd65 	bl	80029c8 <memset>
 8002efe:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <std+0x38>)
 8002f00:	6263      	str	r3, [r4, #36]	; 0x24
 8002f02:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <std+0x3c>)
 8002f04:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f06:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <std+0x40>)
 8002f08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f0a:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <std+0x44>)
 8002f0c:	6224      	str	r4, [r4, #32]
 8002f0e:	6323      	str	r3, [r4, #48]	; 0x30
 8002f10:	bd10      	pop	{r4, pc}
 8002f12:	bf00      	nop
 8002f14:	08003a09 	.word	0x08003a09
 8002f18:	08003a2b 	.word	0x08003a2b
 8002f1c:	08003a63 	.word	0x08003a63
 8002f20:	08003a87 	.word	0x08003a87

08002f24 <_cleanup_r>:
 8002f24:	4901      	ldr	r1, [pc, #4]	; (8002f2c <_cleanup_r+0x8>)
 8002f26:	f000 b8cc 	b.w	80030c2 <_fwalk_reent>
 8002f2a:	bf00      	nop
 8002f2c:	08002e41 	.word	0x08002e41

08002f30 <__sfmoreglue>:
 8002f30:	b570      	push	{r4, r5, r6, lr}
 8002f32:	1e4a      	subs	r2, r1, #1
 8002f34:	2568      	movs	r5, #104	; 0x68
 8002f36:	4355      	muls	r5, r2
 8002f38:	460e      	mov	r6, r1
 8002f3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002f3e:	f000 f9df 	bl	8003300 <_malloc_r>
 8002f42:	4604      	mov	r4, r0
 8002f44:	b140      	cbz	r0, 8002f58 <__sfmoreglue+0x28>
 8002f46:	2100      	movs	r1, #0
 8002f48:	e9c0 1600 	strd	r1, r6, [r0]
 8002f4c:	300c      	adds	r0, #12
 8002f4e:	60a0      	str	r0, [r4, #8]
 8002f50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002f54:	f7ff fd38 	bl	80029c8 <memset>
 8002f58:	4620      	mov	r0, r4
 8002f5a:	bd70      	pop	{r4, r5, r6, pc}

08002f5c <__sfp_lock_acquire>:
 8002f5c:	4801      	ldr	r0, [pc, #4]	; (8002f64 <__sfp_lock_acquire+0x8>)
 8002f5e:	f000 b910 	b.w	8003182 <__retarget_lock_acquire_recursive>
 8002f62:	bf00      	nop
 8002f64:	200001ec 	.word	0x200001ec

08002f68 <__sfp_lock_release>:
 8002f68:	4801      	ldr	r0, [pc, #4]	; (8002f70 <__sfp_lock_release+0x8>)
 8002f6a:	f000 b90b 	b.w	8003184 <__retarget_lock_release_recursive>
 8002f6e:	bf00      	nop
 8002f70:	200001ec 	.word	0x200001ec

08002f74 <__sinit_lock_acquire>:
 8002f74:	4801      	ldr	r0, [pc, #4]	; (8002f7c <__sinit_lock_acquire+0x8>)
 8002f76:	f000 b904 	b.w	8003182 <__retarget_lock_acquire_recursive>
 8002f7a:	bf00      	nop
 8002f7c:	200001e7 	.word	0x200001e7

08002f80 <__sinit_lock_release>:
 8002f80:	4801      	ldr	r0, [pc, #4]	; (8002f88 <__sinit_lock_release+0x8>)
 8002f82:	f000 b8ff 	b.w	8003184 <__retarget_lock_release_recursive>
 8002f86:	bf00      	nop
 8002f88:	200001e7 	.word	0x200001e7

08002f8c <__sinit>:
 8002f8c:	b510      	push	{r4, lr}
 8002f8e:	4604      	mov	r4, r0
 8002f90:	f7ff fff0 	bl	8002f74 <__sinit_lock_acquire>
 8002f94:	69a3      	ldr	r3, [r4, #24]
 8002f96:	b11b      	cbz	r3, 8002fa0 <__sinit+0x14>
 8002f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f9c:	f7ff bff0 	b.w	8002f80 <__sinit_lock_release>
 8002fa0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002fa4:	6523      	str	r3, [r4, #80]	; 0x50
 8002fa6:	4b13      	ldr	r3, [pc, #76]	; (8002ff4 <__sinit+0x68>)
 8002fa8:	4a13      	ldr	r2, [pc, #76]	; (8002ff8 <__sinit+0x6c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	62a2      	str	r2, [r4, #40]	; 0x28
 8002fae:	42a3      	cmp	r3, r4
 8002fb0:	bf04      	itt	eq
 8002fb2:	2301      	moveq	r3, #1
 8002fb4:	61a3      	streq	r3, [r4, #24]
 8002fb6:	4620      	mov	r0, r4
 8002fb8:	f000 f820 	bl	8002ffc <__sfp>
 8002fbc:	6060      	str	r0, [r4, #4]
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	f000 f81c 	bl	8002ffc <__sfp>
 8002fc4:	60a0      	str	r0, [r4, #8]
 8002fc6:	4620      	mov	r0, r4
 8002fc8:	f000 f818 	bl	8002ffc <__sfp>
 8002fcc:	2200      	movs	r2, #0
 8002fce:	60e0      	str	r0, [r4, #12]
 8002fd0:	2104      	movs	r1, #4
 8002fd2:	6860      	ldr	r0, [r4, #4]
 8002fd4:	f7ff ff82 	bl	8002edc <std>
 8002fd8:	68a0      	ldr	r0, [r4, #8]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	2109      	movs	r1, #9
 8002fde:	f7ff ff7d 	bl	8002edc <std>
 8002fe2:	68e0      	ldr	r0, [r4, #12]
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	2112      	movs	r1, #18
 8002fe8:	f7ff ff78 	bl	8002edc <std>
 8002fec:	2301      	movs	r3, #1
 8002fee:	61a3      	str	r3, [r4, #24]
 8002ff0:	e7d2      	b.n	8002f98 <__sinit+0xc>
 8002ff2:	bf00      	nop
 8002ff4:	080040e0 	.word	0x080040e0
 8002ff8:	08002f25 	.word	0x08002f25

08002ffc <__sfp>:
 8002ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffe:	4607      	mov	r7, r0
 8003000:	f7ff ffac 	bl	8002f5c <__sfp_lock_acquire>
 8003004:	4b1e      	ldr	r3, [pc, #120]	; (8003080 <__sfp+0x84>)
 8003006:	681e      	ldr	r6, [r3, #0]
 8003008:	69b3      	ldr	r3, [r6, #24]
 800300a:	b913      	cbnz	r3, 8003012 <__sfp+0x16>
 800300c:	4630      	mov	r0, r6
 800300e:	f7ff ffbd 	bl	8002f8c <__sinit>
 8003012:	3648      	adds	r6, #72	; 0x48
 8003014:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003018:	3b01      	subs	r3, #1
 800301a:	d503      	bpl.n	8003024 <__sfp+0x28>
 800301c:	6833      	ldr	r3, [r6, #0]
 800301e:	b30b      	cbz	r3, 8003064 <__sfp+0x68>
 8003020:	6836      	ldr	r6, [r6, #0]
 8003022:	e7f7      	b.n	8003014 <__sfp+0x18>
 8003024:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003028:	b9d5      	cbnz	r5, 8003060 <__sfp+0x64>
 800302a:	4b16      	ldr	r3, [pc, #88]	; (8003084 <__sfp+0x88>)
 800302c:	60e3      	str	r3, [r4, #12]
 800302e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003032:	6665      	str	r5, [r4, #100]	; 0x64
 8003034:	f000 f8a4 	bl	8003180 <__retarget_lock_init_recursive>
 8003038:	f7ff ff96 	bl	8002f68 <__sfp_lock_release>
 800303c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003040:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003044:	6025      	str	r5, [r4, #0]
 8003046:	61a5      	str	r5, [r4, #24]
 8003048:	2208      	movs	r2, #8
 800304a:	4629      	mov	r1, r5
 800304c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003050:	f7ff fcba 	bl	80029c8 <memset>
 8003054:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003058:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800305c:	4620      	mov	r0, r4
 800305e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003060:	3468      	adds	r4, #104	; 0x68
 8003062:	e7d9      	b.n	8003018 <__sfp+0x1c>
 8003064:	2104      	movs	r1, #4
 8003066:	4638      	mov	r0, r7
 8003068:	f7ff ff62 	bl	8002f30 <__sfmoreglue>
 800306c:	4604      	mov	r4, r0
 800306e:	6030      	str	r0, [r6, #0]
 8003070:	2800      	cmp	r0, #0
 8003072:	d1d5      	bne.n	8003020 <__sfp+0x24>
 8003074:	f7ff ff78 	bl	8002f68 <__sfp_lock_release>
 8003078:	230c      	movs	r3, #12
 800307a:	603b      	str	r3, [r7, #0]
 800307c:	e7ee      	b.n	800305c <__sfp+0x60>
 800307e:	bf00      	nop
 8003080:	080040e0 	.word	0x080040e0
 8003084:	ffff0001 	.word	0xffff0001

08003088 <_fwalk>:
 8003088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800308c:	460f      	mov	r7, r1
 800308e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003092:	2600      	movs	r6, #0
 8003094:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8003098:	f1b8 0801 	subs.w	r8, r8, #1
 800309c:	d505      	bpl.n	80030aa <_fwalk+0x22>
 800309e:	6824      	ldr	r4, [r4, #0]
 80030a0:	2c00      	cmp	r4, #0
 80030a2:	d1f7      	bne.n	8003094 <_fwalk+0xc>
 80030a4:	4630      	mov	r0, r6
 80030a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030aa:	89ab      	ldrh	r3, [r5, #12]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d906      	bls.n	80030be <_fwalk+0x36>
 80030b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80030b4:	3301      	adds	r3, #1
 80030b6:	d002      	beq.n	80030be <_fwalk+0x36>
 80030b8:	4628      	mov	r0, r5
 80030ba:	47b8      	blx	r7
 80030bc:	4306      	orrs	r6, r0
 80030be:	3568      	adds	r5, #104	; 0x68
 80030c0:	e7ea      	b.n	8003098 <_fwalk+0x10>

080030c2 <_fwalk_reent>:
 80030c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030c6:	4606      	mov	r6, r0
 80030c8:	4688      	mov	r8, r1
 80030ca:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80030ce:	2700      	movs	r7, #0
 80030d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80030d4:	f1b9 0901 	subs.w	r9, r9, #1
 80030d8:	d505      	bpl.n	80030e6 <_fwalk_reent+0x24>
 80030da:	6824      	ldr	r4, [r4, #0]
 80030dc:	2c00      	cmp	r4, #0
 80030de:	d1f7      	bne.n	80030d0 <_fwalk_reent+0xe>
 80030e0:	4638      	mov	r0, r7
 80030e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030e6:	89ab      	ldrh	r3, [r5, #12]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d907      	bls.n	80030fc <_fwalk_reent+0x3a>
 80030ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80030f0:	3301      	adds	r3, #1
 80030f2:	d003      	beq.n	80030fc <_fwalk_reent+0x3a>
 80030f4:	4629      	mov	r1, r5
 80030f6:	4630      	mov	r0, r6
 80030f8:	47c0      	blx	r8
 80030fa:	4307      	orrs	r7, r0
 80030fc:	3568      	adds	r5, #104	; 0x68
 80030fe:	e7e9      	b.n	80030d4 <_fwalk_reent+0x12>

08003100 <_getc_r>:
 8003100:	b538      	push	{r3, r4, r5, lr}
 8003102:	460c      	mov	r4, r1
 8003104:	4605      	mov	r5, r0
 8003106:	b118      	cbz	r0, 8003110 <_getc_r+0x10>
 8003108:	6983      	ldr	r3, [r0, #24]
 800310a:	b90b      	cbnz	r3, 8003110 <_getc_r+0x10>
 800310c:	f7ff ff3e 	bl	8002f8c <__sinit>
 8003110:	4b18      	ldr	r3, [pc, #96]	; (8003174 <_getc_r+0x74>)
 8003112:	429c      	cmp	r4, r3
 8003114:	d11e      	bne.n	8003154 <_getc_r+0x54>
 8003116:	686c      	ldr	r4, [r5, #4]
 8003118:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800311a:	07d8      	lsls	r0, r3, #31
 800311c:	d405      	bmi.n	800312a <_getc_r+0x2a>
 800311e:	89a3      	ldrh	r3, [r4, #12]
 8003120:	0599      	lsls	r1, r3, #22
 8003122:	d402      	bmi.n	800312a <_getc_r+0x2a>
 8003124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003126:	f000 f82c 	bl	8003182 <__retarget_lock_acquire_recursive>
 800312a:	6863      	ldr	r3, [r4, #4]
 800312c:	3b01      	subs	r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	6063      	str	r3, [r4, #4]
 8003132:	da19      	bge.n	8003168 <_getc_r+0x68>
 8003134:	4628      	mov	r0, r5
 8003136:	4621      	mov	r1, r4
 8003138:	f000 fc2a 	bl	8003990 <__srget_r>
 800313c:	4605      	mov	r5, r0
 800313e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003140:	07da      	lsls	r2, r3, #31
 8003142:	d405      	bmi.n	8003150 <_getc_r+0x50>
 8003144:	89a3      	ldrh	r3, [r4, #12]
 8003146:	059b      	lsls	r3, r3, #22
 8003148:	d402      	bmi.n	8003150 <_getc_r+0x50>
 800314a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800314c:	f000 f81a 	bl	8003184 <__retarget_lock_release_recursive>
 8003150:	4628      	mov	r0, r5
 8003152:	bd38      	pop	{r3, r4, r5, pc}
 8003154:	4b08      	ldr	r3, [pc, #32]	; (8003178 <_getc_r+0x78>)
 8003156:	429c      	cmp	r4, r3
 8003158:	d101      	bne.n	800315e <_getc_r+0x5e>
 800315a:	68ac      	ldr	r4, [r5, #8]
 800315c:	e7dc      	b.n	8003118 <_getc_r+0x18>
 800315e:	4b07      	ldr	r3, [pc, #28]	; (800317c <_getc_r+0x7c>)
 8003160:	429c      	cmp	r4, r3
 8003162:	bf08      	it	eq
 8003164:	68ec      	ldreq	r4, [r5, #12]
 8003166:	e7d7      	b.n	8003118 <_getc_r+0x18>
 8003168:	6823      	ldr	r3, [r4, #0]
 800316a:	1c5a      	adds	r2, r3, #1
 800316c:	6022      	str	r2, [r4, #0]
 800316e:	781d      	ldrb	r5, [r3, #0]
 8003170:	e7e5      	b.n	800313e <_getc_r+0x3e>
 8003172:	bf00      	nop
 8003174:	0800422c 	.word	0x0800422c
 8003178:	0800424c 	.word	0x0800424c
 800317c:	0800420c 	.word	0x0800420c

08003180 <__retarget_lock_init_recursive>:
 8003180:	4770      	bx	lr

08003182 <__retarget_lock_acquire_recursive>:
 8003182:	4770      	bx	lr

08003184 <__retarget_lock_release_recursive>:
 8003184:	4770      	bx	lr

08003186 <__swhatbuf_r>:
 8003186:	b570      	push	{r4, r5, r6, lr}
 8003188:	460e      	mov	r6, r1
 800318a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800318e:	2900      	cmp	r1, #0
 8003190:	b096      	sub	sp, #88	; 0x58
 8003192:	4614      	mov	r4, r2
 8003194:	461d      	mov	r5, r3
 8003196:	da07      	bge.n	80031a8 <__swhatbuf_r+0x22>
 8003198:	2300      	movs	r3, #0
 800319a:	602b      	str	r3, [r5, #0]
 800319c:	89b3      	ldrh	r3, [r6, #12]
 800319e:	061a      	lsls	r2, r3, #24
 80031a0:	d410      	bmi.n	80031c4 <__swhatbuf_r+0x3e>
 80031a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031a6:	e00e      	b.n	80031c6 <__swhatbuf_r+0x40>
 80031a8:	466a      	mov	r2, sp
 80031aa:	f000 fd53 	bl	8003c54 <_fstat_r>
 80031ae:	2800      	cmp	r0, #0
 80031b0:	dbf2      	blt.n	8003198 <__swhatbuf_r+0x12>
 80031b2:	9a01      	ldr	r2, [sp, #4]
 80031b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80031b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80031bc:	425a      	negs	r2, r3
 80031be:	415a      	adcs	r2, r3
 80031c0:	602a      	str	r2, [r5, #0]
 80031c2:	e7ee      	b.n	80031a2 <__swhatbuf_r+0x1c>
 80031c4:	2340      	movs	r3, #64	; 0x40
 80031c6:	2000      	movs	r0, #0
 80031c8:	6023      	str	r3, [r4, #0]
 80031ca:	b016      	add	sp, #88	; 0x58
 80031cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080031d0 <__smakebuf_r>:
 80031d0:	898b      	ldrh	r3, [r1, #12]
 80031d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80031d4:	079d      	lsls	r5, r3, #30
 80031d6:	4606      	mov	r6, r0
 80031d8:	460c      	mov	r4, r1
 80031da:	d507      	bpl.n	80031ec <__smakebuf_r+0x1c>
 80031dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80031e0:	6023      	str	r3, [r4, #0]
 80031e2:	6123      	str	r3, [r4, #16]
 80031e4:	2301      	movs	r3, #1
 80031e6:	6163      	str	r3, [r4, #20]
 80031e8:	b002      	add	sp, #8
 80031ea:	bd70      	pop	{r4, r5, r6, pc}
 80031ec:	ab01      	add	r3, sp, #4
 80031ee:	466a      	mov	r2, sp
 80031f0:	f7ff ffc9 	bl	8003186 <__swhatbuf_r>
 80031f4:	9900      	ldr	r1, [sp, #0]
 80031f6:	4605      	mov	r5, r0
 80031f8:	4630      	mov	r0, r6
 80031fa:	f000 f881 	bl	8003300 <_malloc_r>
 80031fe:	b948      	cbnz	r0, 8003214 <__smakebuf_r+0x44>
 8003200:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003204:	059a      	lsls	r2, r3, #22
 8003206:	d4ef      	bmi.n	80031e8 <__smakebuf_r+0x18>
 8003208:	f023 0303 	bic.w	r3, r3, #3
 800320c:	f043 0302 	orr.w	r3, r3, #2
 8003210:	81a3      	strh	r3, [r4, #12]
 8003212:	e7e3      	b.n	80031dc <__smakebuf_r+0xc>
 8003214:	4b0d      	ldr	r3, [pc, #52]	; (800324c <__smakebuf_r+0x7c>)
 8003216:	62b3      	str	r3, [r6, #40]	; 0x28
 8003218:	89a3      	ldrh	r3, [r4, #12]
 800321a:	6020      	str	r0, [r4, #0]
 800321c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003220:	81a3      	strh	r3, [r4, #12]
 8003222:	9b00      	ldr	r3, [sp, #0]
 8003224:	6163      	str	r3, [r4, #20]
 8003226:	9b01      	ldr	r3, [sp, #4]
 8003228:	6120      	str	r0, [r4, #16]
 800322a:	b15b      	cbz	r3, 8003244 <__smakebuf_r+0x74>
 800322c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003230:	4630      	mov	r0, r6
 8003232:	f000 fd21 	bl	8003c78 <_isatty_r>
 8003236:	b128      	cbz	r0, 8003244 <__smakebuf_r+0x74>
 8003238:	89a3      	ldrh	r3, [r4, #12]
 800323a:	f023 0303 	bic.w	r3, r3, #3
 800323e:	f043 0301 	orr.w	r3, r3, #1
 8003242:	81a3      	strh	r3, [r4, #12]
 8003244:	89a0      	ldrh	r0, [r4, #12]
 8003246:	4305      	orrs	r5, r0
 8003248:	81a5      	strh	r5, [r4, #12]
 800324a:	e7cd      	b.n	80031e8 <__smakebuf_r+0x18>
 800324c:	08002f25 	.word	0x08002f25

08003250 <malloc>:
 8003250:	4b02      	ldr	r3, [pc, #8]	; (800325c <malloc+0xc>)
 8003252:	4601      	mov	r1, r0
 8003254:	6818      	ldr	r0, [r3, #0]
 8003256:	f000 b853 	b.w	8003300 <_malloc_r>
 800325a:	bf00      	nop
 800325c:	2000000c 	.word	0x2000000c

08003260 <_free_r>:
 8003260:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003262:	2900      	cmp	r1, #0
 8003264:	d048      	beq.n	80032f8 <_free_r+0x98>
 8003266:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800326a:	9001      	str	r0, [sp, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	f1a1 0404 	sub.w	r4, r1, #4
 8003272:	bfb8      	it	lt
 8003274:	18e4      	addlt	r4, r4, r3
 8003276:	f000 fd21 	bl	8003cbc <__malloc_lock>
 800327a:	4a20      	ldr	r2, [pc, #128]	; (80032fc <_free_r+0x9c>)
 800327c:	9801      	ldr	r0, [sp, #4]
 800327e:	6813      	ldr	r3, [r2, #0]
 8003280:	4615      	mov	r5, r2
 8003282:	b933      	cbnz	r3, 8003292 <_free_r+0x32>
 8003284:	6063      	str	r3, [r4, #4]
 8003286:	6014      	str	r4, [r2, #0]
 8003288:	b003      	add	sp, #12
 800328a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800328e:	f000 bd1b 	b.w	8003cc8 <__malloc_unlock>
 8003292:	42a3      	cmp	r3, r4
 8003294:	d90b      	bls.n	80032ae <_free_r+0x4e>
 8003296:	6821      	ldr	r1, [r4, #0]
 8003298:	1862      	adds	r2, r4, r1
 800329a:	4293      	cmp	r3, r2
 800329c:	bf04      	itt	eq
 800329e:	681a      	ldreq	r2, [r3, #0]
 80032a0:	685b      	ldreq	r3, [r3, #4]
 80032a2:	6063      	str	r3, [r4, #4]
 80032a4:	bf04      	itt	eq
 80032a6:	1852      	addeq	r2, r2, r1
 80032a8:	6022      	streq	r2, [r4, #0]
 80032aa:	602c      	str	r4, [r5, #0]
 80032ac:	e7ec      	b.n	8003288 <_free_r+0x28>
 80032ae:	461a      	mov	r2, r3
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	b10b      	cbz	r3, 80032b8 <_free_r+0x58>
 80032b4:	42a3      	cmp	r3, r4
 80032b6:	d9fa      	bls.n	80032ae <_free_r+0x4e>
 80032b8:	6811      	ldr	r1, [r2, #0]
 80032ba:	1855      	adds	r5, r2, r1
 80032bc:	42a5      	cmp	r5, r4
 80032be:	d10b      	bne.n	80032d8 <_free_r+0x78>
 80032c0:	6824      	ldr	r4, [r4, #0]
 80032c2:	4421      	add	r1, r4
 80032c4:	1854      	adds	r4, r2, r1
 80032c6:	42a3      	cmp	r3, r4
 80032c8:	6011      	str	r1, [r2, #0]
 80032ca:	d1dd      	bne.n	8003288 <_free_r+0x28>
 80032cc:	681c      	ldr	r4, [r3, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	6053      	str	r3, [r2, #4]
 80032d2:	4421      	add	r1, r4
 80032d4:	6011      	str	r1, [r2, #0]
 80032d6:	e7d7      	b.n	8003288 <_free_r+0x28>
 80032d8:	d902      	bls.n	80032e0 <_free_r+0x80>
 80032da:	230c      	movs	r3, #12
 80032dc:	6003      	str	r3, [r0, #0]
 80032de:	e7d3      	b.n	8003288 <_free_r+0x28>
 80032e0:	6825      	ldr	r5, [r4, #0]
 80032e2:	1961      	adds	r1, r4, r5
 80032e4:	428b      	cmp	r3, r1
 80032e6:	bf04      	itt	eq
 80032e8:	6819      	ldreq	r1, [r3, #0]
 80032ea:	685b      	ldreq	r3, [r3, #4]
 80032ec:	6063      	str	r3, [r4, #4]
 80032ee:	bf04      	itt	eq
 80032f0:	1949      	addeq	r1, r1, r5
 80032f2:	6021      	streq	r1, [r4, #0]
 80032f4:	6054      	str	r4, [r2, #4]
 80032f6:	e7c7      	b.n	8003288 <_free_r+0x28>
 80032f8:	b003      	add	sp, #12
 80032fa:	bd30      	pop	{r4, r5, pc}
 80032fc:	20000090 	.word	0x20000090

08003300 <_malloc_r>:
 8003300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003302:	1ccd      	adds	r5, r1, #3
 8003304:	f025 0503 	bic.w	r5, r5, #3
 8003308:	3508      	adds	r5, #8
 800330a:	2d0c      	cmp	r5, #12
 800330c:	bf38      	it	cc
 800330e:	250c      	movcc	r5, #12
 8003310:	2d00      	cmp	r5, #0
 8003312:	4606      	mov	r6, r0
 8003314:	db01      	blt.n	800331a <_malloc_r+0x1a>
 8003316:	42a9      	cmp	r1, r5
 8003318:	d903      	bls.n	8003322 <_malloc_r+0x22>
 800331a:	230c      	movs	r3, #12
 800331c:	6033      	str	r3, [r6, #0]
 800331e:	2000      	movs	r0, #0
 8003320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003322:	f000 fccb 	bl	8003cbc <__malloc_lock>
 8003326:	4921      	ldr	r1, [pc, #132]	; (80033ac <_malloc_r+0xac>)
 8003328:	680a      	ldr	r2, [r1, #0]
 800332a:	4614      	mov	r4, r2
 800332c:	b99c      	cbnz	r4, 8003356 <_malloc_r+0x56>
 800332e:	4f20      	ldr	r7, [pc, #128]	; (80033b0 <_malloc_r+0xb0>)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	b923      	cbnz	r3, 800333e <_malloc_r+0x3e>
 8003334:	4621      	mov	r1, r4
 8003336:	4630      	mov	r0, r6
 8003338:	f000 fb56 	bl	80039e8 <_sbrk_r>
 800333c:	6038      	str	r0, [r7, #0]
 800333e:	4629      	mov	r1, r5
 8003340:	4630      	mov	r0, r6
 8003342:	f000 fb51 	bl	80039e8 <_sbrk_r>
 8003346:	1c43      	adds	r3, r0, #1
 8003348:	d123      	bne.n	8003392 <_malloc_r+0x92>
 800334a:	230c      	movs	r3, #12
 800334c:	6033      	str	r3, [r6, #0]
 800334e:	4630      	mov	r0, r6
 8003350:	f000 fcba 	bl	8003cc8 <__malloc_unlock>
 8003354:	e7e3      	b.n	800331e <_malloc_r+0x1e>
 8003356:	6823      	ldr	r3, [r4, #0]
 8003358:	1b5b      	subs	r3, r3, r5
 800335a:	d417      	bmi.n	800338c <_malloc_r+0x8c>
 800335c:	2b0b      	cmp	r3, #11
 800335e:	d903      	bls.n	8003368 <_malloc_r+0x68>
 8003360:	6023      	str	r3, [r4, #0]
 8003362:	441c      	add	r4, r3
 8003364:	6025      	str	r5, [r4, #0]
 8003366:	e004      	b.n	8003372 <_malloc_r+0x72>
 8003368:	6863      	ldr	r3, [r4, #4]
 800336a:	42a2      	cmp	r2, r4
 800336c:	bf0c      	ite	eq
 800336e:	600b      	streq	r3, [r1, #0]
 8003370:	6053      	strne	r3, [r2, #4]
 8003372:	4630      	mov	r0, r6
 8003374:	f000 fca8 	bl	8003cc8 <__malloc_unlock>
 8003378:	f104 000b 	add.w	r0, r4, #11
 800337c:	1d23      	adds	r3, r4, #4
 800337e:	f020 0007 	bic.w	r0, r0, #7
 8003382:	1ac2      	subs	r2, r0, r3
 8003384:	d0cc      	beq.n	8003320 <_malloc_r+0x20>
 8003386:	1a1b      	subs	r3, r3, r0
 8003388:	50a3      	str	r3, [r4, r2]
 800338a:	e7c9      	b.n	8003320 <_malloc_r+0x20>
 800338c:	4622      	mov	r2, r4
 800338e:	6864      	ldr	r4, [r4, #4]
 8003390:	e7cc      	b.n	800332c <_malloc_r+0x2c>
 8003392:	1cc4      	adds	r4, r0, #3
 8003394:	f024 0403 	bic.w	r4, r4, #3
 8003398:	42a0      	cmp	r0, r4
 800339a:	d0e3      	beq.n	8003364 <_malloc_r+0x64>
 800339c:	1a21      	subs	r1, r4, r0
 800339e:	4630      	mov	r0, r6
 80033a0:	f000 fb22 	bl	80039e8 <_sbrk_r>
 80033a4:	3001      	adds	r0, #1
 80033a6:	d1dd      	bne.n	8003364 <_malloc_r+0x64>
 80033a8:	e7cf      	b.n	800334a <_malloc_r+0x4a>
 80033aa:	bf00      	nop
 80033ac:	20000090 	.word	0x20000090
 80033b0:	20000094 	.word	0x20000094

080033b4 <__sfputc_r>:
 80033b4:	6893      	ldr	r3, [r2, #8]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	b410      	push	{r4}
 80033bc:	6093      	str	r3, [r2, #8]
 80033be:	da08      	bge.n	80033d2 <__sfputc_r+0x1e>
 80033c0:	6994      	ldr	r4, [r2, #24]
 80033c2:	42a3      	cmp	r3, r4
 80033c4:	db01      	blt.n	80033ca <__sfputc_r+0x16>
 80033c6:	290a      	cmp	r1, #10
 80033c8:	d103      	bne.n	80033d2 <__sfputc_r+0x1e>
 80033ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033ce:	f000 bb5f 	b.w	8003a90 <__swbuf_r>
 80033d2:	6813      	ldr	r3, [r2, #0]
 80033d4:	1c58      	adds	r0, r3, #1
 80033d6:	6010      	str	r0, [r2, #0]
 80033d8:	7019      	strb	r1, [r3, #0]
 80033da:	4608      	mov	r0, r1
 80033dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <__sfputs_r>:
 80033e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e4:	4606      	mov	r6, r0
 80033e6:	460f      	mov	r7, r1
 80033e8:	4614      	mov	r4, r2
 80033ea:	18d5      	adds	r5, r2, r3
 80033ec:	42ac      	cmp	r4, r5
 80033ee:	d101      	bne.n	80033f4 <__sfputs_r+0x12>
 80033f0:	2000      	movs	r0, #0
 80033f2:	e007      	b.n	8003404 <__sfputs_r+0x22>
 80033f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033f8:	463a      	mov	r2, r7
 80033fa:	4630      	mov	r0, r6
 80033fc:	f7ff ffda 	bl	80033b4 <__sfputc_r>
 8003400:	1c43      	adds	r3, r0, #1
 8003402:	d1f3      	bne.n	80033ec <__sfputs_r+0xa>
 8003404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003408 <_vfiprintf_r>:
 8003408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800340c:	460d      	mov	r5, r1
 800340e:	b09d      	sub	sp, #116	; 0x74
 8003410:	4614      	mov	r4, r2
 8003412:	4698      	mov	r8, r3
 8003414:	4606      	mov	r6, r0
 8003416:	b118      	cbz	r0, 8003420 <_vfiprintf_r+0x18>
 8003418:	6983      	ldr	r3, [r0, #24]
 800341a:	b90b      	cbnz	r3, 8003420 <_vfiprintf_r+0x18>
 800341c:	f7ff fdb6 	bl	8002f8c <__sinit>
 8003420:	4b89      	ldr	r3, [pc, #548]	; (8003648 <_vfiprintf_r+0x240>)
 8003422:	429d      	cmp	r5, r3
 8003424:	d11b      	bne.n	800345e <_vfiprintf_r+0x56>
 8003426:	6875      	ldr	r5, [r6, #4]
 8003428:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800342a:	07d9      	lsls	r1, r3, #31
 800342c:	d405      	bmi.n	800343a <_vfiprintf_r+0x32>
 800342e:	89ab      	ldrh	r3, [r5, #12]
 8003430:	059a      	lsls	r2, r3, #22
 8003432:	d402      	bmi.n	800343a <_vfiprintf_r+0x32>
 8003434:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003436:	f7ff fea4 	bl	8003182 <__retarget_lock_acquire_recursive>
 800343a:	89ab      	ldrh	r3, [r5, #12]
 800343c:	071b      	lsls	r3, r3, #28
 800343e:	d501      	bpl.n	8003444 <_vfiprintf_r+0x3c>
 8003440:	692b      	ldr	r3, [r5, #16]
 8003442:	b9eb      	cbnz	r3, 8003480 <_vfiprintf_r+0x78>
 8003444:	4629      	mov	r1, r5
 8003446:	4630      	mov	r0, r6
 8003448:	f000 fb86 	bl	8003b58 <__swsetup_r>
 800344c:	b1c0      	cbz	r0, 8003480 <_vfiprintf_r+0x78>
 800344e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003450:	07dc      	lsls	r4, r3, #31
 8003452:	d50e      	bpl.n	8003472 <_vfiprintf_r+0x6a>
 8003454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003458:	b01d      	add	sp, #116	; 0x74
 800345a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800345e:	4b7b      	ldr	r3, [pc, #492]	; (800364c <_vfiprintf_r+0x244>)
 8003460:	429d      	cmp	r5, r3
 8003462:	d101      	bne.n	8003468 <_vfiprintf_r+0x60>
 8003464:	68b5      	ldr	r5, [r6, #8]
 8003466:	e7df      	b.n	8003428 <_vfiprintf_r+0x20>
 8003468:	4b79      	ldr	r3, [pc, #484]	; (8003650 <_vfiprintf_r+0x248>)
 800346a:	429d      	cmp	r5, r3
 800346c:	bf08      	it	eq
 800346e:	68f5      	ldreq	r5, [r6, #12]
 8003470:	e7da      	b.n	8003428 <_vfiprintf_r+0x20>
 8003472:	89ab      	ldrh	r3, [r5, #12]
 8003474:	0598      	lsls	r0, r3, #22
 8003476:	d4ed      	bmi.n	8003454 <_vfiprintf_r+0x4c>
 8003478:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800347a:	f7ff fe83 	bl	8003184 <__retarget_lock_release_recursive>
 800347e:	e7e9      	b.n	8003454 <_vfiprintf_r+0x4c>
 8003480:	2300      	movs	r3, #0
 8003482:	9309      	str	r3, [sp, #36]	; 0x24
 8003484:	2320      	movs	r3, #32
 8003486:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800348a:	f8cd 800c 	str.w	r8, [sp, #12]
 800348e:	2330      	movs	r3, #48	; 0x30
 8003490:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003654 <_vfiprintf_r+0x24c>
 8003494:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003498:	f04f 0901 	mov.w	r9, #1
 800349c:	4623      	mov	r3, r4
 800349e:	469a      	mov	sl, r3
 80034a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034a4:	b10a      	cbz	r2, 80034aa <_vfiprintf_r+0xa2>
 80034a6:	2a25      	cmp	r2, #37	; 0x25
 80034a8:	d1f9      	bne.n	800349e <_vfiprintf_r+0x96>
 80034aa:	ebba 0b04 	subs.w	fp, sl, r4
 80034ae:	d00b      	beq.n	80034c8 <_vfiprintf_r+0xc0>
 80034b0:	465b      	mov	r3, fp
 80034b2:	4622      	mov	r2, r4
 80034b4:	4629      	mov	r1, r5
 80034b6:	4630      	mov	r0, r6
 80034b8:	f7ff ff93 	bl	80033e2 <__sfputs_r>
 80034bc:	3001      	adds	r0, #1
 80034be:	f000 80aa 	beq.w	8003616 <_vfiprintf_r+0x20e>
 80034c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034c4:	445a      	add	r2, fp
 80034c6:	9209      	str	r2, [sp, #36]	; 0x24
 80034c8:	f89a 3000 	ldrb.w	r3, [sl]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 80a2 	beq.w	8003616 <_vfiprintf_r+0x20e>
 80034d2:	2300      	movs	r3, #0
 80034d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034dc:	f10a 0a01 	add.w	sl, sl, #1
 80034e0:	9304      	str	r3, [sp, #16]
 80034e2:	9307      	str	r3, [sp, #28]
 80034e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034e8:	931a      	str	r3, [sp, #104]	; 0x68
 80034ea:	4654      	mov	r4, sl
 80034ec:	2205      	movs	r2, #5
 80034ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034f2:	4858      	ldr	r0, [pc, #352]	; (8003654 <_vfiprintf_r+0x24c>)
 80034f4:	f7fc fe74 	bl	80001e0 <memchr>
 80034f8:	9a04      	ldr	r2, [sp, #16]
 80034fa:	b9d8      	cbnz	r0, 8003534 <_vfiprintf_r+0x12c>
 80034fc:	06d1      	lsls	r1, r2, #27
 80034fe:	bf44      	itt	mi
 8003500:	2320      	movmi	r3, #32
 8003502:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003506:	0713      	lsls	r3, r2, #28
 8003508:	bf44      	itt	mi
 800350a:	232b      	movmi	r3, #43	; 0x2b
 800350c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003510:	f89a 3000 	ldrb.w	r3, [sl]
 8003514:	2b2a      	cmp	r3, #42	; 0x2a
 8003516:	d015      	beq.n	8003544 <_vfiprintf_r+0x13c>
 8003518:	9a07      	ldr	r2, [sp, #28]
 800351a:	4654      	mov	r4, sl
 800351c:	2000      	movs	r0, #0
 800351e:	f04f 0c0a 	mov.w	ip, #10
 8003522:	4621      	mov	r1, r4
 8003524:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003528:	3b30      	subs	r3, #48	; 0x30
 800352a:	2b09      	cmp	r3, #9
 800352c:	d94e      	bls.n	80035cc <_vfiprintf_r+0x1c4>
 800352e:	b1b0      	cbz	r0, 800355e <_vfiprintf_r+0x156>
 8003530:	9207      	str	r2, [sp, #28]
 8003532:	e014      	b.n	800355e <_vfiprintf_r+0x156>
 8003534:	eba0 0308 	sub.w	r3, r0, r8
 8003538:	fa09 f303 	lsl.w	r3, r9, r3
 800353c:	4313      	orrs	r3, r2
 800353e:	9304      	str	r3, [sp, #16]
 8003540:	46a2      	mov	sl, r4
 8003542:	e7d2      	b.n	80034ea <_vfiprintf_r+0xe2>
 8003544:	9b03      	ldr	r3, [sp, #12]
 8003546:	1d19      	adds	r1, r3, #4
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	9103      	str	r1, [sp, #12]
 800354c:	2b00      	cmp	r3, #0
 800354e:	bfbb      	ittet	lt
 8003550:	425b      	neglt	r3, r3
 8003552:	f042 0202 	orrlt.w	r2, r2, #2
 8003556:	9307      	strge	r3, [sp, #28]
 8003558:	9307      	strlt	r3, [sp, #28]
 800355a:	bfb8      	it	lt
 800355c:	9204      	strlt	r2, [sp, #16]
 800355e:	7823      	ldrb	r3, [r4, #0]
 8003560:	2b2e      	cmp	r3, #46	; 0x2e
 8003562:	d10c      	bne.n	800357e <_vfiprintf_r+0x176>
 8003564:	7863      	ldrb	r3, [r4, #1]
 8003566:	2b2a      	cmp	r3, #42	; 0x2a
 8003568:	d135      	bne.n	80035d6 <_vfiprintf_r+0x1ce>
 800356a:	9b03      	ldr	r3, [sp, #12]
 800356c:	1d1a      	adds	r2, r3, #4
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	9203      	str	r2, [sp, #12]
 8003572:	2b00      	cmp	r3, #0
 8003574:	bfb8      	it	lt
 8003576:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800357a:	3402      	adds	r4, #2
 800357c:	9305      	str	r3, [sp, #20]
 800357e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003664 <_vfiprintf_r+0x25c>
 8003582:	7821      	ldrb	r1, [r4, #0]
 8003584:	2203      	movs	r2, #3
 8003586:	4650      	mov	r0, sl
 8003588:	f7fc fe2a 	bl	80001e0 <memchr>
 800358c:	b140      	cbz	r0, 80035a0 <_vfiprintf_r+0x198>
 800358e:	2340      	movs	r3, #64	; 0x40
 8003590:	eba0 000a 	sub.w	r0, r0, sl
 8003594:	fa03 f000 	lsl.w	r0, r3, r0
 8003598:	9b04      	ldr	r3, [sp, #16]
 800359a:	4303      	orrs	r3, r0
 800359c:	3401      	adds	r4, #1
 800359e:	9304      	str	r3, [sp, #16]
 80035a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035a4:	482c      	ldr	r0, [pc, #176]	; (8003658 <_vfiprintf_r+0x250>)
 80035a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035aa:	2206      	movs	r2, #6
 80035ac:	f7fc fe18 	bl	80001e0 <memchr>
 80035b0:	2800      	cmp	r0, #0
 80035b2:	d03f      	beq.n	8003634 <_vfiprintf_r+0x22c>
 80035b4:	4b29      	ldr	r3, [pc, #164]	; (800365c <_vfiprintf_r+0x254>)
 80035b6:	bb1b      	cbnz	r3, 8003600 <_vfiprintf_r+0x1f8>
 80035b8:	9b03      	ldr	r3, [sp, #12]
 80035ba:	3307      	adds	r3, #7
 80035bc:	f023 0307 	bic.w	r3, r3, #7
 80035c0:	3308      	adds	r3, #8
 80035c2:	9303      	str	r3, [sp, #12]
 80035c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035c6:	443b      	add	r3, r7
 80035c8:	9309      	str	r3, [sp, #36]	; 0x24
 80035ca:	e767      	b.n	800349c <_vfiprintf_r+0x94>
 80035cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80035d0:	460c      	mov	r4, r1
 80035d2:	2001      	movs	r0, #1
 80035d4:	e7a5      	b.n	8003522 <_vfiprintf_r+0x11a>
 80035d6:	2300      	movs	r3, #0
 80035d8:	3401      	adds	r4, #1
 80035da:	9305      	str	r3, [sp, #20]
 80035dc:	4619      	mov	r1, r3
 80035de:	f04f 0c0a 	mov.w	ip, #10
 80035e2:	4620      	mov	r0, r4
 80035e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035e8:	3a30      	subs	r2, #48	; 0x30
 80035ea:	2a09      	cmp	r2, #9
 80035ec:	d903      	bls.n	80035f6 <_vfiprintf_r+0x1ee>
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0c5      	beq.n	800357e <_vfiprintf_r+0x176>
 80035f2:	9105      	str	r1, [sp, #20]
 80035f4:	e7c3      	b.n	800357e <_vfiprintf_r+0x176>
 80035f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80035fa:	4604      	mov	r4, r0
 80035fc:	2301      	movs	r3, #1
 80035fe:	e7f0      	b.n	80035e2 <_vfiprintf_r+0x1da>
 8003600:	ab03      	add	r3, sp, #12
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	462a      	mov	r2, r5
 8003606:	4b16      	ldr	r3, [pc, #88]	; (8003660 <_vfiprintf_r+0x258>)
 8003608:	a904      	add	r1, sp, #16
 800360a:	4630      	mov	r0, r6
 800360c:	f3af 8000 	nop.w
 8003610:	4607      	mov	r7, r0
 8003612:	1c78      	adds	r0, r7, #1
 8003614:	d1d6      	bne.n	80035c4 <_vfiprintf_r+0x1bc>
 8003616:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003618:	07d9      	lsls	r1, r3, #31
 800361a:	d405      	bmi.n	8003628 <_vfiprintf_r+0x220>
 800361c:	89ab      	ldrh	r3, [r5, #12]
 800361e:	059a      	lsls	r2, r3, #22
 8003620:	d402      	bmi.n	8003628 <_vfiprintf_r+0x220>
 8003622:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003624:	f7ff fdae 	bl	8003184 <__retarget_lock_release_recursive>
 8003628:	89ab      	ldrh	r3, [r5, #12]
 800362a:	065b      	lsls	r3, r3, #25
 800362c:	f53f af12 	bmi.w	8003454 <_vfiprintf_r+0x4c>
 8003630:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003632:	e711      	b.n	8003458 <_vfiprintf_r+0x50>
 8003634:	ab03      	add	r3, sp, #12
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	462a      	mov	r2, r5
 800363a:	4b09      	ldr	r3, [pc, #36]	; (8003660 <_vfiprintf_r+0x258>)
 800363c:	a904      	add	r1, sp, #16
 800363e:	4630      	mov	r0, r6
 8003640:	f000 f880 	bl	8003744 <_printf_i>
 8003644:	e7e4      	b.n	8003610 <_vfiprintf_r+0x208>
 8003646:	bf00      	nop
 8003648:	0800422c 	.word	0x0800422c
 800364c:	0800424c 	.word	0x0800424c
 8003650:	0800420c 	.word	0x0800420c
 8003654:	0800426c 	.word	0x0800426c
 8003658:	08004276 	.word	0x08004276
 800365c:	00000000 	.word	0x00000000
 8003660:	080033e3 	.word	0x080033e3
 8003664:	08004272 	.word	0x08004272

08003668 <_printf_common>:
 8003668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800366c:	4616      	mov	r6, r2
 800366e:	4699      	mov	r9, r3
 8003670:	688a      	ldr	r2, [r1, #8]
 8003672:	690b      	ldr	r3, [r1, #16]
 8003674:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003678:	4293      	cmp	r3, r2
 800367a:	bfb8      	it	lt
 800367c:	4613      	movlt	r3, r2
 800367e:	6033      	str	r3, [r6, #0]
 8003680:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003684:	4607      	mov	r7, r0
 8003686:	460c      	mov	r4, r1
 8003688:	b10a      	cbz	r2, 800368e <_printf_common+0x26>
 800368a:	3301      	adds	r3, #1
 800368c:	6033      	str	r3, [r6, #0]
 800368e:	6823      	ldr	r3, [r4, #0]
 8003690:	0699      	lsls	r1, r3, #26
 8003692:	bf42      	ittt	mi
 8003694:	6833      	ldrmi	r3, [r6, #0]
 8003696:	3302      	addmi	r3, #2
 8003698:	6033      	strmi	r3, [r6, #0]
 800369a:	6825      	ldr	r5, [r4, #0]
 800369c:	f015 0506 	ands.w	r5, r5, #6
 80036a0:	d106      	bne.n	80036b0 <_printf_common+0x48>
 80036a2:	f104 0a19 	add.w	sl, r4, #25
 80036a6:	68e3      	ldr	r3, [r4, #12]
 80036a8:	6832      	ldr	r2, [r6, #0]
 80036aa:	1a9b      	subs	r3, r3, r2
 80036ac:	42ab      	cmp	r3, r5
 80036ae:	dc26      	bgt.n	80036fe <_printf_common+0x96>
 80036b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036b4:	1e13      	subs	r3, r2, #0
 80036b6:	6822      	ldr	r2, [r4, #0]
 80036b8:	bf18      	it	ne
 80036ba:	2301      	movne	r3, #1
 80036bc:	0692      	lsls	r2, r2, #26
 80036be:	d42b      	bmi.n	8003718 <_printf_common+0xb0>
 80036c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036c4:	4649      	mov	r1, r9
 80036c6:	4638      	mov	r0, r7
 80036c8:	47c0      	blx	r8
 80036ca:	3001      	adds	r0, #1
 80036cc:	d01e      	beq.n	800370c <_printf_common+0xa4>
 80036ce:	6823      	ldr	r3, [r4, #0]
 80036d0:	68e5      	ldr	r5, [r4, #12]
 80036d2:	6832      	ldr	r2, [r6, #0]
 80036d4:	f003 0306 	and.w	r3, r3, #6
 80036d8:	2b04      	cmp	r3, #4
 80036da:	bf08      	it	eq
 80036dc:	1aad      	subeq	r5, r5, r2
 80036de:	68a3      	ldr	r3, [r4, #8]
 80036e0:	6922      	ldr	r2, [r4, #16]
 80036e2:	bf0c      	ite	eq
 80036e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036e8:	2500      	movne	r5, #0
 80036ea:	4293      	cmp	r3, r2
 80036ec:	bfc4      	itt	gt
 80036ee:	1a9b      	subgt	r3, r3, r2
 80036f0:	18ed      	addgt	r5, r5, r3
 80036f2:	2600      	movs	r6, #0
 80036f4:	341a      	adds	r4, #26
 80036f6:	42b5      	cmp	r5, r6
 80036f8:	d11a      	bne.n	8003730 <_printf_common+0xc8>
 80036fa:	2000      	movs	r0, #0
 80036fc:	e008      	b.n	8003710 <_printf_common+0xa8>
 80036fe:	2301      	movs	r3, #1
 8003700:	4652      	mov	r2, sl
 8003702:	4649      	mov	r1, r9
 8003704:	4638      	mov	r0, r7
 8003706:	47c0      	blx	r8
 8003708:	3001      	adds	r0, #1
 800370a:	d103      	bne.n	8003714 <_printf_common+0xac>
 800370c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003714:	3501      	adds	r5, #1
 8003716:	e7c6      	b.n	80036a6 <_printf_common+0x3e>
 8003718:	18e1      	adds	r1, r4, r3
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	2030      	movs	r0, #48	; 0x30
 800371e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003722:	4422      	add	r2, r4
 8003724:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003728:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800372c:	3302      	adds	r3, #2
 800372e:	e7c7      	b.n	80036c0 <_printf_common+0x58>
 8003730:	2301      	movs	r3, #1
 8003732:	4622      	mov	r2, r4
 8003734:	4649      	mov	r1, r9
 8003736:	4638      	mov	r0, r7
 8003738:	47c0      	blx	r8
 800373a:	3001      	adds	r0, #1
 800373c:	d0e6      	beq.n	800370c <_printf_common+0xa4>
 800373e:	3601      	adds	r6, #1
 8003740:	e7d9      	b.n	80036f6 <_printf_common+0x8e>
	...

08003744 <_printf_i>:
 8003744:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003748:	460c      	mov	r4, r1
 800374a:	4691      	mov	r9, r2
 800374c:	7e27      	ldrb	r7, [r4, #24]
 800374e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003750:	2f78      	cmp	r7, #120	; 0x78
 8003752:	4680      	mov	r8, r0
 8003754:	469a      	mov	sl, r3
 8003756:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800375a:	d807      	bhi.n	800376c <_printf_i+0x28>
 800375c:	2f62      	cmp	r7, #98	; 0x62
 800375e:	d80a      	bhi.n	8003776 <_printf_i+0x32>
 8003760:	2f00      	cmp	r7, #0
 8003762:	f000 80d8 	beq.w	8003916 <_printf_i+0x1d2>
 8003766:	2f58      	cmp	r7, #88	; 0x58
 8003768:	f000 80a3 	beq.w	80038b2 <_printf_i+0x16e>
 800376c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003770:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003774:	e03a      	b.n	80037ec <_printf_i+0xa8>
 8003776:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800377a:	2b15      	cmp	r3, #21
 800377c:	d8f6      	bhi.n	800376c <_printf_i+0x28>
 800377e:	a001      	add	r0, pc, #4	; (adr r0, 8003784 <_printf_i+0x40>)
 8003780:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003784:	080037dd 	.word	0x080037dd
 8003788:	080037f1 	.word	0x080037f1
 800378c:	0800376d 	.word	0x0800376d
 8003790:	0800376d 	.word	0x0800376d
 8003794:	0800376d 	.word	0x0800376d
 8003798:	0800376d 	.word	0x0800376d
 800379c:	080037f1 	.word	0x080037f1
 80037a0:	0800376d 	.word	0x0800376d
 80037a4:	0800376d 	.word	0x0800376d
 80037a8:	0800376d 	.word	0x0800376d
 80037ac:	0800376d 	.word	0x0800376d
 80037b0:	080038fd 	.word	0x080038fd
 80037b4:	08003821 	.word	0x08003821
 80037b8:	080038df 	.word	0x080038df
 80037bc:	0800376d 	.word	0x0800376d
 80037c0:	0800376d 	.word	0x0800376d
 80037c4:	0800391f 	.word	0x0800391f
 80037c8:	0800376d 	.word	0x0800376d
 80037cc:	08003821 	.word	0x08003821
 80037d0:	0800376d 	.word	0x0800376d
 80037d4:	0800376d 	.word	0x0800376d
 80037d8:	080038e7 	.word	0x080038e7
 80037dc:	680b      	ldr	r3, [r1, #0]
 80037de:	1d1a      	adds	r2, r3, #4
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	600a      	str	r2, [r1, #0]
 80037e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80037e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037ec:	2301      	movs	r3, #1
 80037ee:	e0a3      	b.n	8003938 <_printf_i+0x1f4>
 80037f0:	6825      	ldr	r5, [r4, #0]
 80037f2:	6808      	ldr	r0, [r1, #0]
 80037f4:	062e      	lsls	r6, r5, #24
 80037f6:	f100 0304 	add.w	r3, r0, #4
 80037fa:	d50a      	bpl.n	8003812 <_printf_i+0xce>
 80037fc:	6805      	ldr	r5, [r0, #0]
 80037fe:	600b      	str	r3, [r1, #0]
 8003800:	2d00      	cmp	r5, #0
 8003802:	da03      	bge.n	800380c <_printf_i+0xc8>
 8003804:	232d      	movs	r3, #45	; 0x2d
 8003806:	426d      	negs	r5, r5
 8003808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800380c:	485e      	ldr	r0, [pc, #376]	; (8003988 <_printf_i+0x244>)
 800380e:	230a      	movs	r3, #10
 8003810:	e019      	b.n	8003846 <_printf_i+0x102>
 8003812:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003816:	6805      	ldr	r5, [r0, #0]
 8003818:	600b      	str	r3, [r1, #0]
 800381a:	bf18      	it	ne
 800381c:	b22d      	sxthne	r5, r5
 800381e:	e7ef      	b.n	8003800 <_printf_i+0xbc>
 8003820:	680b      	ldr	r3, [r1, #0]
 8003822:	6825      	ldr	r5, [r4, #0]
 8003824:	1d18      	adds	r0, r3, #4
 8003826:	6008      	str	r0, [r1, #0]
 8003828:	0628      	lsls	r0, r5, #24
 800382a:	d501      	bpl.n	8003830 <_printf_i+0xec>
 800382c:	681d      	ldr	r5, [r3, #0]
 800382e:	e002      	b.n	8003836 <_printf_i+0xf2>
 8003830:	0669      	lsls	r1, r5, #25
 8003832:	d5fb      	bpl.n	800382c <_printf_i+0xe8>
 8003834:	881d      	ldrh	r5, [r3, #0]
 8003836:	4854      	ldr	r0, [pc, #336]	; (8003988 <_printf_i+0x244>)
 8003838:	2f6f      	cmp	r7, #111	; 0x6f
 800383a:	bf0c      	ite	eq
 800383c:	2308      	moveq	r3, #8
 800383e:	230a      	movne	r3, #10
 8003840:	2100      	movs	r1, #0
 8003842:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003846:	6866      	ldr	r6, [r4, #4]
 8003848:	60a6      	str	r6, [r4, #8]
 800384a:	2e00      	cmp	r6, #0
 800384c:	bfa2      	ittt	ge
 800384e:	6821      	ldrge	r1, [r4, #0]
 8003850:	f021 0104 	bicge.w	r1, r1, #4
 8003854:	6021      	strge	r1, [r4, #0]
 8003856:	b90d      	cbnz	r5, 800385c <_printf_i+0x118>
 8003858:	2e00      	cmp	r6, #0
 800385a:	d04d      	beq.n	80038f8 <_printf_i+0x1b4>
 800385c:	4616      	mov	r6, r2
 800385e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003862:	fb03 5711 	mls	r7, r3, r1, r5
 8003866:	5dc7      	ldrb	r7, [r0, r7]
 8003868:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800386c:	462f      	mov	r7, r5
 800386e:	42bb      	cmp	r3, r7
 8003870:	460d      	mov	r5, r1
 8003872:	d9f4      	bls.n	800385e <_printf_i+0x11a>
 8003874:	2b08      	cmp	r3, #8
 8003876:	d10b      	bne.n	8003890 <_printf_i+0x14c>
 8003878:	6823      	ldr	r3, [r4, #0]
 800387a:	07df      	lsls	r7, r3, #31
 800387c:	d508      	bpl.n	8003890 <_printf_i+0x14c>
 800387e:	6923      	ldr	r3, [r4, #16]
 8003880:	6861      	ldr	r1, [r4, #4]
 8003882:	4299      	cmp	r1, r3
 8003884:	bfde      	ittt	le
 8003886:	2330      	movle	r3, #48	; 0x30
 8003888:	f806 3c01 	strble.w	r3, [r6, #-1]
 800388c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003890:	1b92      	subs	r2, r2, r6
 8003892:	6122      	str	r2, [r4, #16]
 8003894:	f8cd a000 	str.w	sl, [sp]
 8003898:	464b      	mov	r3, r9
 800389a:	aa03      	add	r2, sp, #12
 800389c:	4621      	mov	r1, r4
 800389e:	4640      	mov	r0, r8
 80038a0:	f7ff fee2 	bl	8003668 <_printf_common>
 80038a4:	3001      	adds	r0, #1
 80038a6:	d14c      	bne.n	8003942 <_printf_i+0x1fe>
 80038a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038ac:	b004      	add	sp, #16
 80038ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038b2:	4835      	ldr	r0, [pc, #212]	; (8003988 <_printf_i+0x244>)
 80038b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80038b8:	6823      	ldr	r3, [r4, #0]
 80038ba:	680e      	ldr	r6, [r1, #0]
 80038bc:	061f      	lsls	r7, r3, #24
 80038be:	f856 5b04 	ldr.w	r5, [r6], #4
 80038c2:	600e      	str	r6, [r1, #0]
 80038c4:	d514      	bpl.n	80038f0 <_printf_i+0x1ac>
 80038c6:	07d9      	lsls	r1, r3, #31
 80038c8:	bf44      	itt	mi
 80038ca:	f043 0320 	orrmi.w	r3, r3, #32
 80038ce:	6023      	strmi	r3, [r4, #0]
 80038d0:	b91d      	cbnz	r5, 80038da <_printf_i+0x196>
 80038d2:	6823      	ldr	r3, [r4, #0]
 80038d4:	f023 0320 	bic.w	r3, r3, #32
 80038d8:	6023      	str	r3, [r4, #0]
 80038da:	2310      	movs	r3, #16
 80038dc:	e7b0      	b.n	8003840 <_printf_i+0xfc>
 80038de:	6823      	ldr	r3, [r4, #0]
 80038e0:	f043 0320 	orr.w	r3, r3, #32
 80038e4:	6023      	str	r3, [r4, #0]
 80038e6:	2378      	movs	r3, #120	; 0x78
 80038e8:	4828      	ldr	r0, [pc, #160]	; (800398c <_printf_i+0x248>)
 80038ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80038ee:	e7e3      	b.n	80038b8 <_printf_i+0x174>
 80038f0:	065e      	lsls	r6, r3, #25
 80038f2:	bf48      	it	mi
 80038f4:	b2ad      	uxthmi	r5, r5
 80038f6:	e7e6      	b.n	80038c6 <_printf_i+0x182>
 80038f8:	4616      	mov	r6, r2
 80038fa:	e7bb      	b.n	8003874 <_printf_i+0x130>
 80038fc:	680b      	ldr	r3, [r1, #0]
 80038fe:	6826      	ldr	r6, [r4, #0]
 8003900:	6960      	ldr	r0, [r4, #20]
 8003902:	1d1d      	adds	r5, r3, #4
 8003904:	600d      	str	r5, [r1, #0]
 8003906:	0635      	lsls	r5, r6, #24
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	d501      	bpl.n	8003910 <_printf_i+0x1cc>
 800390c:	6018      	str	r0, [r3, #0]
 800390e:	e002      	b.n	8003916 <_printf_i+0x1d2>
 8003910:	0671      	lsls	r1, r6, #25
 8003912:	d5fb      	bpl.n	800390c <_printf_i+0x1c8>
 8003914:	8018      	strh	r0, [r3, #0]
 8003916:	2300      	movs	r3, #0
 8003918:	6123      	str	r3, [r4, #16]
 800391a:	4616      	mov	r6, r2
 800391c:	e7ba      	b.n	8003894 <_printf_i+0x150>
 800391e:	680b      	ldr	r3, [r1, #0]
 8003920:	1d1a      	adds	r2, r3, #4
 8003922:	600a      	str	r2, [r1, #0]
 8003924:	681e      	ldr	r6, [r3, #0]
 8003926:	6862      	ldr	r2, [r4, #4]
 8003928:	2100      	movs	r1, #0
 800392a:	4630      	mov	r0, r6
 800392c:	f7fc fc58 	bl	80001e0 <memchr>
 8003930:	b108      	cbz	r0, 8003936 <_printf_i+0x1f2>
 8003932:	1b80      	subs	r0, r0, r6
 8003934:	6060      	str	r0, [r4, #4]
 8003936:	6863      	ldr	r3, [r4, #4]
 8003938:	6123      	str	r3, [r4, #16]
 800393a:	2300      	movs	r3, #0
 800393c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003940:	e7a8      	b.n	8003894 <_printf_i+0x150>
 8003942:	6923      	ldr	r3, [r4, #16]
 8003944:	4632      	mov	r2, r6
 8003946:	4649      	mov	r1, r9
 8003948:	4640      	mov	r0, r8
 800394a:	47d0      	blx	sl
 800394c:	3001      	adds	r0, #1
 800394e:	d0ab      	beq.n	80038a8 <_printf_i+0x164>
 8003950:	6823      	ldr	r3, [r4, #0]
 8003952:	079b      	lsls	r3, r3, #30
 8003954:	d413      	bmi.n	800397e <_printf_i+0x23a>
 8003956:	68e0      	ldr	r0, [r4, #12]
 8003958:	9b03      	ldr	r3, [sp, #12]
 800395a:	4298      	cmp	r0, r3
 800395c:	bfb8      	it	lt
 800395e:	4618      	movlt	r0, r3
 8003960:	e7a4      	b.n	80038ac <_printf_i+0x168>
 8003962:	2301      	movs	r3, #1
 8003964:	4632      	mov	r2, r6
 8003966:	4649      	mov	r1, r9
 8003968:	4640      	mov	r0, r8
 800396a:	47d0      	blx	sl
 800396c:	3001      	adds	r0, #1
 800396e:	d09b      	beq.n	80038a8 <_printf_i+0x164>
 8003970:	3501      	adds	r5, #1
 8003972:	68e3      	ldr	r3, [r4, #12]
 8003974:	9903      	ldr	r1, [sp, #12]
 8003976:	1a5b      	subs	r3, r3, r1
 8003978:	42ab      	cmp	r3, r5
 800397a:	dcf2      	bgt.n	8003962 <_printf_i+0x21e>
 800397c:	e7eb      	b.n	8003956 <_printf_i+0x212>
 800397e:	2500      	movs	r5, #0
 8003980:	f104 0619 	add.w	r6, r4, #25
 8003984:	e7f5      	b.n	8003972 <_printf_i+0x22e>
 8003986:	bf00      	nop
 8003988:	0800427d 	.word	0x0800427d
 800398c:	0800428e 	.word	0x0800428e

08003990 <__srget_r>:
 8003990:	b538      	push	{r3, r4, r5, lr}
 8003992:	460c      	mov	r4, r1
 8003994:	4605      	mov	r5, r0
 8003996:	b118      	cbz	r0, 80039a0 <__srget_r+0x10>
 8003998:	6983      	ldr	r3, [r0, #24]
 800399a:	b90b      	cbnz	r3, 80039a0 <__srget_r+0x10>
 800399c:	f7ff faf6 	bl	8002f8c <__sinit>
 80039a0:	4b0e      	ldr	r3, [pc, #56]	; (80039dc <__srget_r+0x4c>)
 80039a2:	429c      	cmp	r4, r3
 80039a4:	d10d      	bne.n	80039c2 <__srget_r+0x32>
 80039a6:	686c      	ldr	r4, [r5, #4]
 80039a8:	4621      	mov	r1, r4
 80039aa:	4628      	mov	r0, r5
 80039ac:	f000 f9ae 	bl	8003d0c <__srefill_r>
 80039b0:	b988      	cbnz	r0, 80039d6 <__srget_r+0x46>
 80039b2:	6863      	ldr	r3, [r4, #4]
 80039b4:	3b01      	subs	r3, #1
 80039b6:	6063      	str	r3, [r4, #4]
 80039b8:	6823      	ldr	r3, [r4, #0]
 80039ba:	1c5a      	adds	r2, r3, #1
 80039bc:	6022      	str	r2, [r4, #0]
 80039be:	7818      	ldrb	r0, [r3, #0]
 80039c0:	bd38      	pop	{r3, r4, r5, pc}
 80039c2:	4b07      	ldr	r3, [pc, #28]	; (80039e0 <__srget_r+0x50>)
 80039c4:	429c      	cmp	r4, r3
 80039c6:	d101      	bne.n	80039cc <__srget_r+0x3c>
 80039c8:	68ac      	ldr	r4, [r5, #8]
 80039ca:	e7ed      	b.n	80039a8 <__srget_r+0x18>
 80039cc:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <__srget_r+0x54>)
 80039ce:	429c      	cmp	r4, r3
 80039d0:	bf08      	it	eq
 80039d2:	68ec      	ldreq	r4, [r5, #12]
 80039d4:	e7e8      	b.n	80039a8 <__srget_r+0x18>
 80039d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039da:	e7f1      	b.n	80039c0 <__srget_r+0x30>
 80039dc:	0800422c 	.word	0x0800422c
 80039e0:	0800424c 	.word	0x0800424c
 80039e4:	0800420c 	.word	0x0800420c

080039e8 <_sbrk_r>:
 80039e8:	b538      	push	{r3, r4, r5, lr}
 80039ea:	4d06      	ldr	r5, [pc, #24]	; (8003a04 <_sbrk_r+0x1c>)
 80039ec:	2300      	movs	r3, #0
 80039ee:	4604      	mov	r4, r0
 80039f0:	4608      	mov	r0, r1
 80039f2:	602b      	str	r3, [r5, #0]
 80039f4:	f7fd fbfc 	bl	80011f0 <_sbrk>
 80039f8:	1c43      	adds	r3, r0, #1
 80039fa:	d102      	bne.n	8003a02 <_sbrk_r+0x1a>
 80039fc:	682b      	ldr	r3, [r5, #0]
 80039fe:	b103      	cbz	r3, 8003a02 <_sbrk_r+0x1a>
 8003a00:	6023      	str	r3, [r4, #0]
 8003a02:	bd38      	pop	{r3, r4, r5, pc}
 8003a04:	200001f0 	.word	0x200001f0

08003a08 <__sread>:
 8003a08:	b510      	push	{r4, lr}
 8003a0a:	460c      	mov	r4, r1
 8003a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a10:	f000 f960 	bl	8003cd4 <_read_r>
 8003a14:	2800      	cmp	r0, #0
 8003a16:	bfab      	itete	ge
 8003a18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003a1a:	89a3      	ldrhlt	r3, [r4, #12]
 8003a1c:	181b      	addge	r3, r3, r0
 8003a1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003a22:	bfac      	ite	ge
 8003a24:	6563      	strge	r3, [r4, #84]	; 0x54
 8003a26:	81a3      	strhlt	r3, [r4, #12]
 8003a28:	bd10      	pop	{r4, pc}

08003a2a <__swrite>:
 8003a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a2e:	461f      	mov	r7, r3
 8003a30:	898b      	ldrh	r3, [r1, #12]
 8003a32:	05db      	lsls	r3, r3, #23
 8003a34:	4605      	mov	r5, r0
 8003a36:	460c      	mov	r4, r1
 8003a38:	4616      	mov	r6, r2
 8003a3a:	d505      	bpl.n	8003a48 <__swrite+0x1e>
 8003a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a40:	2302      	movs	r3, #2
 8003a42:	2200      	movs	r2, #0
 8003a44:	f000 f928 	bl	8003c98 <_lseek_r>
 8003a48:	89a3      	ldrh	r3, [r4, #12]
 8003a4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a52:	81a3      	strh	r3, [r4, #12]
 8003a54:	4632      	mov	r2, r6
 8003a56:	463b      	mov	r3, r7
 8003a58:	4628      	mov	r0, r5
 8003a5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a5e:	f000 b869 	b.w	8003b34 <_write_r>

08003a62 <__sseek>:
 8003a62:	b510      	push	{r4, lr}
 8003a64:	460c      	mov	r4, r1
 8003a66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a6a:	f000 f915 	bl	8003c98 <_lseek_r>
 8003a6e:	1c43      	adds	r3, r0, #1
 8003a70:	89a3      	ldrh	r3, [r4, #12]
 8003a72:	bf15      	itete	ne
 8003a74:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a7e:	81a3      	strheq	r3, [r4, #12]
 8003a80:	bf18      	it	ne
 8003a82:	81a3      	strhne	r3, [r4, #12]
 8003a84:	bd10      	pop	{r4, pc}

08003a86 <__sclose>:
 8003a86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a8a:	f000 b8d3 	b.w	8003c34 <_close_r>
	...

08003a90 <__swbuf_r>:
 8003a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a92:	460e      	mov	r6, r1
 8003a94:	4614      	mov	r4, r2
 8003a96:	4605      	mov	r5, r0
 8003a98:	b118      	cbz	r0, 8003aa2 <__swbuf_r+0x12>
 8003a9a:	6983      	ldr	r3, [r0, #24]
 8003a9c:	b90b      	cbnz	r3, 8003aa2 <__swbuf_r+0x12>
 8003a9e:	f7ff fa75 	bl	8002f8c <__sinit>
 8003aa2:	4b21      	ldr	r3, [pc, #132]	; (8003b28 <__swbuf_r+0x98>)
 8003aa4:	429c      	cmp	r4, r3
 8003aa6:	d12b      	bne.n	8003b00 <__swbuf_r+0x70>
 8003aa8:	686c      	ldr	r4, [r5, #4]
 8003aaa:	69a3      	ldr	r3, [r4, #24]
 8003aac:	60a3      	str	r3, [r4, #8]
 8003aae:	89a3      	ldrh	r3, [r4, #12]
 8003ab0:	071a      	lsls	r2, r3, #28
 8003ab2:	d52f      	bpl.n	8003b14 <__swbuf_r+0x84>
 8003ab4:	6923      	ldr	r3, [r4, #16]
 8003ab6:	b36b      	cbz	r3, 8003b14 <__swbuf_r+0x84>
 8003ab8:	6923      	ldr	r3, [r4, #16]
 8003aba:	6820      	ldr	r0, [r4, #0]
 8003abc:	1ac0      	subs	r0, r0, r3
 8003abe:	6963      	ldr	r3, [r4, #20]
 8003ac0:	b2f6      	uxtb	r6, r6
 8003ac2:	4283      	cmp	r3, r0
 8003ac4:	4637      	mov	r7, r6
 8003ac6:	dc04      	bgt.n	8003ad2 <__swbuf_r+0x42>
 8003ac8:	4621      	mov	r1, r4
 8003aca:	4628      	mov	r0, r5
 8003acc:	f7ff f9b8 	bl	8002e40 <_fflush_r>
 8003ad0:	bb30      	cbnz	r0, 8003b20 <__swbuf_r+0x90>
 8003ad2:	68a3      	ldr	r3, [r4, #8]
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	60a3      	str	r3, [r4, #8]
 8003ad8:	6823      	ldr	r3, [r4, #0]
 8003ada:	1c5a      	adds	r2, r3, #1
 8003adc:	6022      	str	r2, [r4, #0]
 8003ade:	701e      	strb	r6, [r3, #0]
 8003ae0:	6963      	ldr	r3, [r4, #20]
 8003ae2:	3001      	adds	r0, #1
 8003ae4:	4283      	cmp	r3, r0
 8003ae6:	d004      	beq.n	8003af2 <__swbuf_r+0x62>
 8003ae8:	89a3      	ldrh	r3, [r4, #12]
 8003aea:	07db      	lsls	r3, r3, #31
 8003aec:	d506      	bpl.n	8003afc <__swbuf_r+0x6c>
 8003aee:	2e0a      	cmp	r6, #10
 8003af0:	d104      	bne.n	8003afc <__swbuf_r+0x6c>
 8003af2:	4621      	mov	r1, r4
 8003af4:	4628      	mov	r0, r5
 8003af6:	f7ff f9a3 	bl	8002e40 <_fflush_r>
 8003afa:	b988      	cbnz	r0, 8003b20 <__swbuf_r+0x90>
 8003afc:	4638      	mov	r0, r7
 8003afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b00:	4b0a      	ldr	r3, [pc, #40]	; (8003b2c <__swbuf_r+0x9c>)
 8003b02:	429c      	cmp	r4, r3
 8003b04:	d101      	bne.n	8003b0a <__swbuf_r+0x7a>
 8003b06:	68ac      	ldr	r4, [r5, #8]
 8003b08:	e7cf      	b.n	8003aaa <__swbuf_r+0x1a>
 8003b0a:	4b09      	ldr	r3, [pc, #36]	; (8003b30 <__swbuf_r+0xa0>)
 8003b0c:	429c      	cmp	r4, r3
 8003b0e:	bf08      	it	eq
 8003b10:	68ec      	ldreq	r4, [r5, #12]
 8003b12:	e7ca      	b.n	8003aaa <__swbuf_r+0x1a>
 8003b14:	4621      	mov	r1, r4
 8003b16:	4628      	mov	r0, r5
 8003b18:	f000 f81e 	bl	8003b58 <__swsetup_r>
 8003b1c:	2800      	cmp	r0, #0
 8003b1e:	d0cb      	beq.n	8003ab8 <__swbuf_r+0x28>
 8003b20:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003b24:	e7ea      	b.n	8003afc <__swbuf_r+0x6c>
 8003b26:	bf00      	nop
 8003b28:	0800422c 	.word	0x0800422c
 8003b2c:	0800424c 	.word	0x0800424c
 8003b30:	0800420c 	.word	0x0800420c

08003b34 <_write_r>:
 8003b34:	b538      	push	{r3, r4, r5, lr}
 8003b36:	4d07      	ldr	r5, [pc, #28]	; (8003b54 <_write_r+0x20>)
 8003b38:	4604      	mov	r4, r0
 8003b3a:	4608      	mov	r0, r1
 8003b3c:	4611      	mov	r1, r2
 8003b3e:	2200      	movs	r2, #0
 8003b40:	602a      	str	r2, [r5, #0]
 8003b42:	461a      	mov	r2, r3
 8003b44:	f7fd f910 	bl	8000d68 <_write>
 8003b48:	1c43      	adds	r3, r0, #1
 8003b4a:	d102      	bne.n	8003b52 <_write_r+0x1e>
 8003b4c:	682b      	ldr	r3, [r5, #0]
 8003b4e:	b103      	cbz	r3, 8003b52 <_write_r+0x1e>
 8003b50:	6023      	str	r3, [r4, #0]
 8003b52:	bd38      	pop	{r3, r4, r5, pc}
 8003b54:	200001f0 	.word	0x200001f0

08003b58 <__swsetup_r>:
 8003b58:	4b32      	ldr	r3, [pc, #200]	; (8003c24 <__swsetup_r+0xcc>)
 8003b5a:	b570      	push	{r4, r5, r6, lr}
 8003b5c:	681d      	ldr	r5, [r3, #0]
 8003b5e:	4606      	mov	r6, r0
 8003b60:	460c      	mov	r4, r1
 8003b62:	b125      	cbz	r5, 8003b6e <__swsetup_r+0x16>
 8003b64:	69ab      	ldr	r3, [r5, #24]
 8003b66:	b913      	cbnz	r3, 8003b6e <__swsetup_r+0x16>
 8003b68:	4628      	mov	r0, r5
 8003b6a:	f7ff fa0f 	bl	8002f8c <__sinit>
 8003b6e:	4b2e      	ldr	r3, [pc, #184]	; (8003c28 <__swsetup_r+0xd0>)
 8003b70:	429c      	cmp	r4, r3
 8003b72:	d10f      	bne.n	8003b94 <__swsetup_r+0x3c>
 8003b74:	686c      	ldr	r4, [r5, #4]
 8003b76:	89a3      	ldrh	r3, [r4, #12]
 8003b78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b7c:	0719      	lsls	r1, r3, #28
 8003b7e:	d42c      	bmi.n	8003bda <__swsetup_r+0x82>
 8003b80:	06dd      	lsls	r5, r3, #27
 8003b82:	d411      	bmi.n	8003ba8 <__swsetup_r+0x50>
 8003b84:	2309      	movs	r3, #9
 8003b86:	6033      	str	r3, [r6, #0]
 8003b88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003b8c:	81a3      	strh	r3, [r4, #12]
 8003b8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b92:	e03e      	b.n	8003c12 <__swsetup_r+0xba>
 8003b94:	4b25      	ldr	r3, [pc, #148]	; (8003c2c <__swsetup_r+0xd4>)
 8003b96:	429c      	cmp	r4, r3
 8003b98:	d101      	bne.n	8003b9e <__swsetup_r+0x46>
 8003b9a:	68ac      	ldr	r4, [r5, #8]
 8003b9c:	e7eb      	b.n	8003b76 <__swsetup_r+0x1e>
 8003b9e:	4b24      	ldr	r3, [pc, #144]	; (8003c30 <__swsetup_r+0xd8>)
 8003ba0:	429c      	cmp	r4, r3
 8003ba2:	bf08      	it	eq
 8003ba4:	68ec      	ldreq	r4, [r5, #12]
 8003ba6:	e7e6      	b.n	8003b76 <__swsetup_r+0x1e>
 8003ba8:	0758      	lsls	r0, r3, #29
 8003baa:	d512      	bpl.n	8003bd2 <__swsetup_r+0x7a>
 8003bac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003bae:	b141      	cbz	r1, 8003bc2 <__swsetup_r+0x6a>
 8003bb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003bb4:	4299      	cmp	r1, r3
 8003bb6:	d002      	beq.n	8003bbe <__swsetup_r+0x66>
 8003bb8:	4630      	mov	r0, r6
 8003bba:	f7ff fb51 	bl	8003260 <_free_r>
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	6363      	str	r3, [r4, #52]	; 0x34
 8003bc2:	89a3      	ldrh	r3, [r4, #12]
 8003bc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003bc8:	81a3      	strh	r3, [r4, #12]
 8003bca:	2300      	movs	r3, #0
 8003bcc:	6063      	str	r3, [r4, #4]
 8003bce:	6923      	ldr	r3, [r4, #16]
 8003bd0:	6023      	str	r3, [r4, #0]
 8003bd2:	89a3      	ldrh	r3, [r4, #12]
 8003bd4:	f043 0308 	orr.w	r3, r3, #8
 8003bd8:	81a3      	strh	r3, [r4, #12]
 8003bda:	6923      	ldr	r3, [r4, #16]
 8003bdc:	b94b      	cbnz	r3, 8003bf2 <__swsetup_r+0x9a>
 8003bde:	89a3      	ldrh	r3, [r4, #12]
 8003be0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003be8:	d003      	beq.n	8003bf2 <__swsetup_r+0x9a>
 8003bea:	4621      	mov	r1, r4
 8003bec:	4630      	mov	r0, r6
 8003bee:	f7ff faef 	bl	80031d0 <__smakebuf_r>
 8003bf2:	89a0      	ldrh	r0, [r4, #12]
 8003bf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003bf8:	f010 0301 	ands.w	r3, r0, #1
 8003bfc:	d00a      	beq.n	8003c14 <__swsetup_r+0xbc>
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60a3      	str	r3, [r4, #8]
 8003c02:	6963      	ldr	r3, [r4, #20]
 8003c04:	425b      	negs	r3, r3
 8003c06:	61a3      	str	r3, [r4, #24]
 8003c08:	6923      	ldr	r3, [r4, #16]
 8003c0a:	b943      	cbnz	r3, 8003c1e <__swsetup_r+0xc6>
 8003c0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003c10:	d1ba      	bne.n	8003b88 <__swsetup_r+0x30>
 8003c12:	bd70      	pop	{r4, r5, r6, pc}
 8003c14:	0781      	lsls	r1, r0, #30
 8003c16:	bf58      	it	pl
 8003c18:	6963      	ldrpl	r3, [r4, #20]
 8003c1a:	60a3      	str	r3, [r4, #8]
 8003c1c:	e7f4      	b.n	8003c08 <__swsetup_r+0xb0>
 8003c1e:	2000      	movs	r0, #0
 8003c20:	e7f7      	b.n	8003c12 <__swsetup_r+0xba>
 8003c22:	bf00      	nop
 8003c24:	2000000c 	.word	0x2000000c
 8003c28:	0800422c 	.word	0x0800422c
 8003c2c:	0800424c 	.word	0x0800424c
 8003c30:	0800420c 	.word	0x0800420c

08003c34 <_close_r>:
 8003c34:	b538      	push	{r3, r4, r5, lr}
 8003c36:	4d06      	ldr	r5, [pc, #24]	; (8003c50 <_close_r+0x1c>)
 8003c38:	2300      	movs	r3, #0
 8003c3a:	4604      	mov	r4, r0
 8003c3c:	4608      	mov	r0, r1
 8003c3e:	602b      	str	r3, [r5, #0]
 8003c40:	f7fd faa2 	bl	8001188 <_close>
 8003c44:	1c43      	adds	r3, r0, #1
 8003c46:	d102      	bne.n	8003c4e <_close_r+0x1a>
 8003c48:	682b      	ldr	r3, [r5, #0]
 8003c4a:	b103      	cbz	r3, 8003c4e <_close_r+0x1a>
 8003c4c:	6023      	str	r3, [r4, #0]
 8003c4e:	bd38      	pop	{r3, r4, r5, pc}
 8003c50:	200001f0 	.word	0x200001f0

08003c54 <_fstat_r>:
 8003c54:	b538      	push	{r3, r4, r5, lr}
 8003c56:	4d07      	ldr	r5, [pc, #28]	; (8003c74 <_fstat_r+0x20>)
 8003c58:	2300      	movs	r3, #0
 8003c5a:	4604      	mov	r4, r0
 8003c5c:	4608      	mov	r0, r1
 8003c5e:	4611      	mov	r1, r2
 8003c60:	602b      	str	r3, [r5, #0]
 8003c62:	f7fd fa9d 	bl	80011a0 <_fstat>
 8003c66:	1c43      	adds	r3, r0, #1
 8003c68:	d102      	bne.n	8003c70 <_fstat_r+0x1c>
 8003c6a:	682b      	ldr	r3, [r5, #0]
 8003c6c:	b103      	cbz	r3, 8003c70 <_fstat_r+0x1c>
 8003c6e:	6023      	str	r3, [r4, #0]
 8003c70:	bd38      	pop	{r3, r4, r5, pc}
 8003c72:	bf00      	nop
 8003c74:	200001f0 	.word	0x200001f0

08003c78 <_isatty_r>:
 8003c78:	b538      	push	{r3, r4, r5, lr}
 8003c7a:	4d06      	ldr	r5, [pc, #24]	; (8003c94 <_isatty_r+0x1c>)
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	4604      	mov	r4, r0
 8003c80:	4608      	mov	r0, r1
 8003c82:	602b      	str	r3, [r5, #0]
 8003c84:	f7fd fa9c 	bl	80011c0 <_isatty>
 8003c88:	1c43      	adds	r3, r0, #1
 8003c8a:	d102      	bne.n	8003c92 <_isatty_r+0x1a>
 8003c8c:	682b      	ldr	r3, [r5, #0]
 8003c8e:	b103      	cbz	r3, 8003c92 <_isatty_r+0x1a>
 8003c90:	6023      	str	r3, [r4, #0]
 8003c92:	bd38      	pop	{r3, r4, r5, pc}
 8003c94:	200001f0 	.word	0x200001f0

08003c98 <_lseek_r>:
 8003c98:	b538      	push	{r3, r4, r5, lr}
 8003c9a:	4d07      	ldr	r5, [pc, #28]	; (8003cb8 <_lseek_r+0x20>)
 8003c9c:	4604      	mov	r4, r0
 8003c9e:	4608      	mov	r0, r1
 8003ca0:	4611      	mov	r1, r2
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	602a      	str	r2, [r5, #0]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	f7fd fa95 	bl	80011d6 <_lseek>
 8003cac:	1c43      	adds	r3, r0, #1
 8003cae:	d102      	bne.n	8003cb6 <_lseek_r+0x1e>
 8003cb0:	682b      	ldr	r3, [r5, #0]
 8003cb2:	b103      	cbz	r3, 8003cb6 <_lseek_r+0x1e>
 8003cb4:	6023      	str	r3, [r4, #0]
 8003cb6:	bd38      	pop	{r3, r4, r5, pc}
 8003cb8:	200001f0 	.word	0x200001f0

08003cbc <__malloc_lock>:
 8003cbc:	4801      	ldr	r0, [pc, #4]	; (8003cc4 <__malloc_lock+0x8>)
 8003cbe:	f7ff ba60 	b.w	8003182 <__retarget_lock_acquire_recursive>
 8003cc2:	bf00      	nop
 8003cc4:	200001e8 	.word	0x200001e8

08003cc8 <__malloc_unlock>:
 8003cc8:	4801      	ldr	r0, [pc, #4]	; (8003cd0 <__malloc_unlock+0x8>)
 8003cca:	f7ff ba5b 	b.w	8003184 <__retarget_lock_release_recursive>
 8003cce:	bf00      	nop
 8003cd0:	200001e8 	.word	0x200001e8

08003cd4 <_read_r>:
 8003cd4:	b538      	push	{r3, r4, r5, lr}
 8003cd6:	4d07      	ldr	r5, [pc, #28]	; (8003cf4 <_read_r+0x20>)
 8003cd8:	4604      	mov	r4, r0
 8003cda:	4608      	mov	r0, r1
 8003cdc:	4611      	mov	r1, r2
 8003cde:	2200      	movs	r2, #0
 8003ce0:	602a      	str	r2, [r5, #0]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	f7fd f81a 	bl	8000d1c <_read>
 8003ce8:	1c43      	adds	r3, r0, #1
 8003cea:	d102      	bne.n	8003cf2 <_read_r+0x1e>
 8003cec:	682b      	ldr	r3, [r5, #0]
 8003cee:	b103      	cbz	r3, 8003cf2 <_read_r+0x1e>
 8003cf0:	6023      	str	r3, [r4, #0]
 8003cf2:	bd38      	pop	{r3, r4, r5, pc}
 8003cf4:	200001f0 	.word	0x200001f0

08003cf8 <lflush>:
 8003cf8:	8983      	ldrh	r3, [r0, #12]
 8003cfa:	f003 0309 	and.w	r3, r3, #9
 8003cfe:	2b09      	cmp	r3, #9
 8003d00:	d101      	bne.n	8003d06 <lflush+0xe>
 8003d02:	f7ff b8d9 	b.w	8002eb8 <fflush>
 8003d06:	2000      	movs	r0, #0
 8003d08:	4770      	bx	lr
	...

08003d0c <__srefill_r>:
 8003d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0e:	460c      	mov	r4, r1
 8003d10:	4605      	mov	r5, r0
 8003d12:	b118      	cbz	r0, 8003d1c <__srefill_r+0x10>
 8003d14:	6983      	ldr	r3, [r0, #24]
 8003d16:	b90b      	cbnz	r3, 8003d1c <__srefill_r+0x10>
 8003d18:	f7ff f938 	bl	8002f8c <__sinit>
 8003d1c:	4b3b      	ldr	r3, [pc, #236]	; (8003e0c <__srefill_r+0x100>)
 8003d1e:	429c      	cmp	r4, r3
 8003d20:	d10a      	bne.n	8003d38 <__srefill_r+0x2c>
 8003d22:	686c      	ldr	r4, [r5, #4]
 8003d24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d28:	2300      	movs	r3, #0
 8003d2a:	6063      	str	r3, [r4, #4]
 8003d2c:	89a3      	ldrh	r3, [r4, #12]
 8003d2e:	069e      	lsls	r6, r3, #26
 8003d30:	d50c      	bpl.n	8003d4c <__srefill_r+0x40>
 8003d32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d36:	e066      	b.n	8003e06 <__srefill_r+0xfa>
 8003d38:	4b35      	ldr	r3, [pc, #212]	; (8003e10 <__srefill_r+0x104>)
 8003d3a:	429c      	cmp	r4, r3
 8003d3c:	d101      	bne.n	8003d42 <__srefill_r+0x36>
 8003d3e:	68ac      	ldr	r4, [r5, #8]
 8003d40:	e7f0      	b.n	8003d24 <__srefill_r+0x18>
 8003d42:	4b34      	ldr	r3, [pc, #208]	; (8003e14 <__srefill_r+0x108>)
 8003d44:	429c      	cmp	r4, r3
 8003d46:	bf08      	it	eq
 8003d48:	68ec      	ldreq	r4, [r5, #12]
 8003d4a:	e7eb      	b.n	8003d24 <__srefill_r+0x18>
 8003d4c:	0758      	lsls	r0, r3, #29
 8003d4e:	d448      	bmi.n	8003de2 <__srefill_r+0xd6>
 8003d50:	06d9      	lsls	r1, r3, #27
 8003d52:	d405      	bmi.n	8003d60 <__srefill_r+0x54>
 8003d54:	2309      	movs	r3, #9
 8003d56:	602b      	str	r3, [r5, #0]
 8003d58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003d5c:	81a3      	strh	r3, [r4, #12]
 8003d5e:	e7e8      	b.n	8003d32 <__srefill_r+0x26>
 8003d60:	071a      	lsls	r2, r3, #28
 8003d62:	d50b      	bpl.n	8003d7c <__srefill_r+0x70>
 8003d64:	4621      	mov	r1, r4
 8003d66:	4628      	mov	r0, r5
 8003d68:	f7ff f86a 	bl	8002e40 <_fflush_r>
 8003d6c:	2800      	cmp	r0, #0
 8003d6e:	d1e0      	bne.n	8003d32 <__srefill_r+0x26>
 8003d70:	89a3      	ldrh	r3, [r4, #12]
 8003d72:	60a0      	str	r0, [r4, #8]
 8003d74:	f023 0308 	bic.w	r3, r3, #8
 8003d78:	81a3      	strh	r3, [r4, #12]
 8003d7a:	61a0      	str	r0, [r4, #24]
 8003d7c:	89a3      	ldrh	r3, [r4, #12]
 8003d7e:	f043 0304 	orr.w	r3, r3, #4
 8003d82:	81a3      	strh	r3, [r4, #12]
 8003d84:	6923      	ldr	r3, [r4, #16]
 8003d86:	b91b      	cbnz	r3, 8003d90 <__srefill_r+0x84>
 8003d88:	4621      	mov	r1, r4
 8003d8a:	4628      	mov	r0, r5
 8003d8c:	f7ff fa20 	bl	80031d0 <__smakebuf_r>
 8003d90:	89a6      	ldrh	r6, [r4, #12]
 8003d92:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8003d96:	07b3      	lsls	r3, r6, #30
 8003d98:	d00f      	beq.n	8003dba <__srefill_r+0xae>
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	81a3      	strh	r3, [r4, #12]
 8003d9e:	4b1e      	ldr	r3, [pc, #120]	; (8003e18 <__srefill_r+0x10c>)
 8003da0:	491e      	ldr	r1, [pc, #120]	; (8003e1c <__srefill_r+0x110>)
 8003da2:	6818      	ldr	r0, [r3, #0]
 8003da4:	f006 0609 	and.w	r6, r6, #9
 8003da8:	f7ff f96e 	bl	8003088 <_fwalk>
 8003dac:	2e09      	cmp	r6, #9
 8003dae:	81a7      	strh	r7, [r4, #12]
 8003db0:	d103      	bne.n	8003dba <__srefill_r+0xae>
 8003db2:	4621      	mov	r1, r4
 8003db4:	4628      	mov	r0, r5
 8003db6:	f7fe ffbd 	bl	8002d34 <__sflush_r>
 8003dba:	6922      	ldr	r2, [r4, #16]
 8003dbc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003dbe:	6963      	ldr	r3, [r4, #20]
 8003dc0:	6a21      	ldr	r1, [r4, #32]
 8003dc2:	6022      	str	r2, [r4, #0]
 8003dc4:	4628      	mov	r0, r5
 8003dc6:	47b0      	blx	r6
 8003dc8:	2800      	cmp	r0, #0
 8003dca:	6060      	str	r0, [r4, #4]
 8003dcc:	dc1c      	bgt.n	8003e08 <__srefill_r+0xfc>
 8003dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dd2:	bf17      	itett	ne
 8003dd4:	2200      	movne	r2, #0
 8003dd6:	f043 0320 	orreq.w	r3, r3, #32
 8003dda:	6062      	strne	r2, [r4, #4]
 8003ddc:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8003de0:	e7bc      	b.n	8003d5c <__srefill_r+0x50>
 8003de2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003de4:	2900      	cmp	r1, #0
 8003de6:	d0cd      	beq.n	8003d84 <__srefill_r+0x78>
 8003de8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003dec:	4299      	cmp	r1, r3
 8003dee:	d002      	beq.n	8003df6 <__srefill_r+0xea>
 8003df0:	4628      	mov	r0, r5
 8003df2:	f7ff fa35 	bl	8003260 <_free_r>
 8003df6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003df8:	6063      	str	r3, [r4, #4]
 8003dfa:	2000      	movs	r0, #0
 8003dfc:	6360      	str	r0, [r4, #52]	; 0x34
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d0c0      	beq.n	8003d84 <__srefill_r+0x78>
 8003e02:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003e04:	6023      	str	r3, [r4, #0]
 8003e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e08:	2000      	movs	r0, #0
 8003e0a:	e7fc      	b.n	8003e06 <__srefill_r+0xfa>
 8003e0c:	0800422c 	.word	0x0800422c
 8003e10:	0800424c 	.word	0x0800424c
 8003e14:	0800420c 	.word	0x0800420c
 8003e18:	080040e0 	.word	0x080040e0
 8003e1c:	08003cf9 	.word	0x08003cf9

08003e20 <_init>:
 8003e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e22:	bf00      	nop
 8003e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e26:	bc08      	pop	{r3}
 8003e28:	469e      	mov	lr, r3
 8003e2a:	4770      	bx	lr

08003e2c <_fini>:
 8003e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e2e:	bf00      	nop
 8003e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e32:	bc08      	pop	{r3}
 8003e34:	469e      	mov	lr, r3
 8003e36:	4770      	bx	lr
